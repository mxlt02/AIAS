{"repo": "google/guava", "path": "guava/src/com/google/common/escape/ArrayBasedUnicodeEscaper.java", "func_name": "ArrayBasedUnicodeEscaper.escape", "original_string": "@Override\n  public final String escape(String s) {\n    checkNotNull(s); // GWT specific check (do not optimize)\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if ((c < replacementsLength && replacements[c] != null)\n          || c > safeMaxChar\n          || c < safeMinChar) {\n        return escapeSlow(s, i);\n      }\n    }\n    return s;\n  }", "language": "java", "code": "@Override\n  public final String escape(String s) {\n    checkNotNull(s); // GWT specific check (do not optimize)\n    for (int i = 0; i < s.length(); i++) {\n      char c = s.charAt(i);\n      if ((c < replacementsLength && replacements[c] != null)\n          || c > safeMaxChar\n          || c < safeMinChar) {\n        return escapeSlow(s, i);\n      }\n    }\n    return s;\n  }", "code_tokens": ["@", "Override", "public", "final", "String", "escape", "(", "String", "s", ")", "{", "checkNotNull", "(", "s", ")", ";", "// GWT specific check (do not optimize)", "for", "(", "int", "i", "=", "0", ";", "i", "<", "s", ".", "length", "(", ")", ";", "i", "++", ")", "{", "char", "c", "=", "s", ".", "charAt", "(", "i", ")", ";", "if", "(", "(", "c", "<", "replacementsLength", "&&", "replacements", "[", "c", "]", "!=", "null", ")", "||", "c", ">", "safeMaxChar", "||", "c", "<", "safeMinChar", ")", "{", "return", "escapeSlow", "(", "s", ",", "i", ")", ";", "}", "}", "return", "s", ";", "}"], "docstring": "/*\nThis is overridden to improve performance. Rough benchmarking shows that this almost doubles\nthe speed when processing strings that do not require any escaping.", "docstring_tokens": ["/", "*", "This", "is", "overridden", "to", "improve", "performance", ".", "Rough", "benchmarking", "shows", "that", "this", "almost", "doubles", "the", "speed", "when", "processing", "strings", "that", "do", "not", "require", "any", "escaping", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/escape/ArrayBasedUnicodeEscaper.java#L142-L154", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/escape/ArrayBasedUnicodeEscaper.java", "func_name": "ArrayBasedUnicodeEscaper.escape", "original_string": "@Override\n  protected final char[] escape(int cp) {\n    if (cp < replacementsLength) {\n      char[] chars = replacements[cp];\n      if (chars != null) {\n        return chars;\n      }\n    }\n    if (cp >= safeMin && cp <= safeMax) {\n      return null;\n    }\n    return escapeUnsafe(cp);\n  }", "language": "java", "code": "@Override\n  protected final char[] escape(int cp) {\n    if (cp < replacementsLength) {\n      char[] chars = replacements[cp];\n      if (chars != null) {\n        return chars;\n      }\n    }\n    if (cp >= safeMin && cp <= safeMax) {\n      return null;\n    }\n    return escapeUnsafe(cp);\n  }", "code_tokens": ["@", "Override", "protected", "final", "char", "[", "]", "escape", "(", "int", "cp", ")", "{", "if", "(", "cp", "<", "replacementsLength", ")", "{", "char", "[", "]", "chars", "=", "replacements", "[", "cp", "]", ";", "if", "(", "chars", "!=", "null", ")", "{", "return", "chars", ";", "}", "}", "if", "(", "cp", ">=", "safeMin", "&&", "cp", "<=", "safeMax", ")", "{", "return", "null", ";", "}", "return", "escapeUnsafe", "(", "cp", ")", ";", "}"], "docstring": "Escapes a single Unicode code point using the replacement array and safe range values. If the\ngiven character does not have an explicit replacement and lies outside the safe range then\n{@link #escapeUnsafe} is called.", "docstring_tokens": ["Escapes", "a", "single", "Unicode", "code", "point", "using", "the", "replacement", "array", "and", "safe", "range", "values", ".", "If", "the", "given", "character", "does", "not", "have", "an", "explicit", "replacement", "and", "lies", "outside", "the", "safe", "range", "then", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/escape/ArrayBasedUnicodeEscaper.java#L161-L173", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/escape/ArrayBasedUnicodeEscaper.java", "func_name": "ArrayBasedUnicodeEscaper.nextEscapeIndex", "original_string": "@Override\n  protected final int nextEscapeIndex(CharSequence csq, int index, int end) {\n    while (index < end) {\n      char c = csq.charAt(index);\n      if ((c < replacementsLength && replacements[c] != null)\n          || c > safeMaxChar\n          || c < safeMinChar) {\n        break;\n      }\n      index++;\n    }\n    return index;\n  }", "language": "java", "code": "@Override\n  protected final int nextEscapeIndex(CharSequence csq, int index, int end) {\n    while (index < end) {\n      char c = csq.charAt(index);\n      if ((c < replacementsLength && replacements[c] != null)\n          || c > safeMaxChar\n          || c < safeMinChar) {\n        break;\n      }\n      index++;\n    }\n    return index;\n  }", "code_tokens": ["@", "Override", "protected", "final", "int", "nextEscapeIndex", "(", "CharSequence", "csq", ",", "int", "index", ",", "int", "end", ")", "{", "while", "(", "index", "<", "end", ")", "{", "char", "c", "=", "csq", ".", "charAt", "(", "index", ")", ";", "if", "(", "(", "c", "<", "replacementsLength", "&&", "replacements", "[", "c", "]", "!=", "null", ")", "||", "c", ">", "safeMaxChar", "||", "c", "<", "safeMinChar", ")", "{", "break", ";", "}", "index", "++", ";", "}", "return", "index", ";", "}"], "docstring": "/* Overridden for performance.", "docstring_tokens": ["/", "*", "Overridden", "for", "performance", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/escape/ArrayBasedUnicodeEscaper.java#L176-L188", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/CharSource.java", "func_name": "CharSource.openBufferedStream", "original_string": "public BufferedReader openBufferedStream() throws IOException {\n    Reader reader = openStream();\n    return (reader instanceof BufferedReader)\n        ? (BufferedReader) reader\n        : new BufferedReader(reader);\n  }", "language": "java", "code": "public BufferedReader openBufferedStream() throws IOException {\n    Reader reader = openStream();\n    return (reader instanceof BufferedReader)\n        ? (BufferedReader) reader\n        : new BufferedReader(reader);\n  }", "code_tokens": ["public", "BufferedReader", "openBufferedStream", "(", ")", "throws", "IOException", "{", "Reader", "reader", "=", "openStream", "(", ")", ";", "return", "(", "reader", "instanceof", "BufferedReader", ")", "?", "(", "BufferedReader", ")", "reader", ":", "new", "BufferedReader", "(", "reader", ")", ";", "}"], "docstring": "Opens a new {@link BufferedReader} for reading from this source. This method returns a new,\nindependent reader each time it is called.\n\n<p>The caller is responsible for ensuring that the returned reader is closed.\n\n@throws IOException if an I/O error occurs while of opening the reader", "docstring_tokens": ["Opens", "a", "new", "{", "@link", "BufferedReader", "}", "for", "reading", "from", "this", "source", ".", "This", "method", "returns", "a", "new", "independent", "reader", "each", "time", "it", "is", "called", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/CharSource.java#L106-L111", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/CharSource.java", "func_name": "CharSource.length", "original_string": "@Beta\n  public long length() throws IOException {\n    Optional<Long> lengthIfKnown = lengthIfKnown();\n    if (lengthIfKnown.isPresent()) {\n      return lengthIfKnown.get();\n    }\n\n    Closer closer = Closer.create();\n    try {\n      Reader reader = closer.register(openStream());\n      return countBySkipping(reader);\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "language": "java", "code": "@Beta\n  public long length() throws IOException {\n    Optional<Long> lengthIfKnown = lengthIfKnown();\n    if (lengthIfKnown.isPresent()) {\n      return lengthIfKnown.get();\n    }\n\n    Closer closer = Closer.create();\n    try {\n      Reader reader = closer.register(openStream());\n      return countBySkipping(reader);\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "code_tokens": ["@", "Beta", "public", "long", "length", "(", ")", "throws", "IOException", "{", "Optional", "<", "Long", ">", "lengthIfKnown", "=", "lengthIfKnown", "(", ")", ";", "if", "(", "lengthIfKnown", ".", "isPresent", "(", ")", ")", "{", "return", "lengthIfKnown", ".", "get", "(", ")", ";", "}", "Closer", "closer", "=", "Closer", ".", "create", "(", ")", ";", "try", "{", "Reader", "reader", "=", "closer", ".", "register", "(", "openStream", "(", ")", ")", ";", "return", "countBySkipping", "(", "reader", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "closer", ".", "rethrow", "(", "e", ")", ";", "}", "finally", "{", "closer", ".", "close", "(", ")", ";", "}", "}"], "docstring": "Returns the length of this source in chars, even if doing so requires opening and traversing an\nentire stream. To avoid a potentially expensive operation, see {@link #lengthIfKnown}.\n\n<p>The default implementation calls {@link #lengthIfKnown} and returns the value if present. If\nabsent, it will fall back to a heavyweight operation that will open a stream, {@link\nReader#skip(long) skip} to the end of the stream, and return the total number of chars that\nwere skipped.\n\n<p>Note that for sources that implement {@link #lengthIfKnown} to provide a more efficient\nimplementation, it is <i>possible</i> that this method will return a different number of chars\nthan would be returned by reading all of the chars.\n\n<p>In either case, for mutable sources such as files, a subsequent read may return a different\nnumber of chars if the contents are changed.\n\n@throws IOException if an I/O error occurs while reading the length of this source\n@since 19.0", "docstring_tokens": ["Returns", "the", "length", "of", "this", "source", "in", "chars", "even", "if", "doing", "so", "requires", "opening", "and", "traversing", "an", "entire", "stream", ".", "To", "avoid", "a", "potentially", "expensive", "operation", "see", "{", "@link", "#lengthIfKnown", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/CharSource.java#L151-L167", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/CharSource.java", "func_name": "CharSource.copyTo", "original_string": "@CanIgnoreReturnValue\n  public long copyTo(CharSink sink) throws IOException {\n    checkNotNull(sink);\n\n    Closer closer = Closer.create();\n    try {\n      Reader reader = closer.register(openStream());\n      Writer writer = closer.register(sink.openStream());\n      return CharStreams.copy(reader, writer);\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  public long copyTo(CharSink sink) throws IOException {\n    checkNotNull(sink);\n\n    Closer closer = Closer.create();\n    try {\n      Reader reader = closer.register(openStream());\n      Writer writer = closer.register(sink.openStream());\n      return CharStreams.copy(reader, writer);\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "public", "long", "copyTo", "(", "CharSink", "sink", ")", "throws", "IOException", "{", "checkNotNull", "(", "sink", ")", ";", "Closer", "closer", "=", "Closer", ".", "create", "(", ")", ";", "try", "{", "Reader", "reader", "=", "closer", ".", "register", "(", "openStream", "(", ")", ")", ";", "Writer", "writer", "=", "closer", ".", "register", "(", "sink", ".", "openStream", "(", ")", ")", ";", "return", "CharStreams", ".", "copy", "(", "reader", ",", "writer", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "closer", ".", "rethrow", "(", "e", ")", ";", "}", "finally", "{", "closer", ".", "close", "(", ")", ";", "}", "}"], "docstring": "Copies the contents of this source to the given sink.\n\n@return the number of characters copied\n@throws IOException if an I/O error occurs while reading from this source or writing to {@code\nsink}", "docstring_tokens": ["Copies", "the", "contents", "of", "this", "source", "to", "the", "given", "sink", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/CharSource.java#L208-L222", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/CharSource.java", "func_name": "CharSource.read", "original_string": "public String read() throws IOException {\n    Closer closer = Closer.create();\n    try {\n      Reader reader = closer.register(openStream());\n      return CharStreams.toString(reader);\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "language": "java", "code": "public String read() throws IOException {\n    Closer closer = Closer.create();\n    try {\n      Reader reader = closer.register(openStream());\n      return CharStreams.toString(reader);\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "code_tokens": ["public", "String", "read", "(", ")", "throws", "IOException", "{", "Closer", "closer", "=", "Closer", ".", "create", "(", ")", ";", "try", "{", "Reader", "reader", "=", "closer", ".", "register", "(", "openStream", "(", ")", ")", ";", "return", "CharStreams", ".", "toString", "(", "reader", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "closer", ".", "rethrow", "(", "e", ")", ";", "}", "finally", "{", "closer", ".", "close", "(", ")", ";", "}", "}"], "docstring": "Reads the contents of this source as a string.\n\n@throws IOException if an I/O error occurs while reading from this source", "docstring_tokens": ["Reads", "the", "contents", "of", "this", "source", "as", "a", "string", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/CharSource.java#L229-L239", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/CharSource.java", "func_name": "CharSource.readFirstLine", "original_string": "@NullableDecl\n  public String readFirstLine() throws IOException {\n    Closer closer = Closer.create();\n    try {\n      BufferedReader reader = closer.register(openBufferedStream());\n      return reader.readLine();\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "language": "java", "code": "@NullableDecl\n  public String readFirstLine() throws IOException {\n    Closer closer = Closer.create();\n    try {\n      BufferedReader reader = closer.register(openBufferedStream());\n      return reader.readLine();\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "code_tokens": ["@", "NullableDecl", "public", "String", "readFirstLine", "(", ")", "throws", "IOException", "{", "Closer", "closer", "=", "Closer", ".", "create", "(", ")", ";", "try", "{", "BufferedReader", "reader", "=", "closer", ".", "register", "(", "openBufferedStream", "(", ")", ")", ";", "return", "reader", ".", "readLine", "(", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "closer", ".", "rethrow", "(", "e", ")", ";", "}", "finally", "{", "closer", ".", "close", "(", ")", ";", "}", "}"], "docstring": "Reads the first line of this source as a string. Returns {@code null} if this source is empty.\n\n<p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of\ntext that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n\\n}. If the source's content does not end in a line termination sequence, it is treated as if\nit does.\n\n@throws IOException if an I/O error occurs while reading from this source", "docstring_tokens": ["Reads", "the", "first", "line", "of", "this", "source", "as", "a", "string", ".", "Returns", "{", "@code", "null", "}", "if", "this", "source", "is", "empty", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/CharSource.java#L251-L262", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/CharSource.java", "func_name": "CharSource.readLines", "original_string": "public ImmutableList<String> readLines() throws IOException {\n    Closer closer = Closer.create();\n    try {\n      BufferedReader reader = closer.register(openBufferedStream());\n      List<String> result = Lists.newArrayList();\n      String line;\n      while ((line = reader.readLine()) != null) {\n        result.add(line);\n      }\n      return ImmutableList.copyOf(result);\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "language": "java", "code": "public ImmutableList<String> readLines() throws IOException {\n    Closer closer = Closer.create();\n    try {\n      BufferedReader reader = closer.register(openBufferedStream());\n      List<String> result = Lists.newArrayList();\n      String line;\n      while ((line = reader.readLine()) != null) {\n        result.add(line);\n      }\n      return ImmutableList.copyOf(result);\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "code_tokens": ["public", "ImmutableList", "<", "String", ">", "readLines", "(", ")", "throws", "IOException", "{", "Closer", "closer", "=", "Closer", ".", "create", "(", ")", ";", "try", "{", "BufferedReader", "reader", "=", "closer", ".", "register", "(", "openBufferedStream", "(", ")", ")", ";", "List", "<", "String", ">", "result", "=", "Lists", ".", "newArrayList", "(", ")", ";", "String", "line", ";", "while", "(", "(", "line", "=", "reader", ".", "readLine", "(", ")", ")", "!=", "null", ")", "{", "result", ".", "add", "(", "line", ")", ";", "}", "return", "ImmutableList", ".", "copyOf", "(", "result", ")", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "closer", ".", "rethrow", "(", "e", ")", ";", "}", "finally", "{", "closer", ".", "close", "(", ")", ";", "}", "}"], "docstring": "Reads all the lines of this source as a list of strings. The returned list will be empty if\nthis source is empty.\n\n<p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of\ntext that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n\\n}. If the source's content does not end in a line termination sequence, it is treated as if\nit does.\n\n@throws IOException if an I/O error occurs while reading from this source", "docstring_tokens": ["Reads", "all", "the", "lines", "of", "this", "source", "as", "a", "list", "of", "strings", ".", "The", "returned", "list", "will", "be", "empty", "if", "this", "source", "is", "empty", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/CharSource.java#L275-L290", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/CharSource.java", "func_name": "CharSource.isEmpty", "original_string": "public boolean isEmpty() throws IOException {\n    Optional<Long> lengthIfKnown = lengthIfKnown();\n    if (lengthIfKnown.isPresent()) {\n      return lengthIfKnown.get() == 0L;\n    }\n    Closer closer = Closer.create();\n    try {\n      Reader reader = closer.register(openStream());\n      return reader.read() == -1;\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "language": "java", "code": "public boolean isEmpty() throws IOException {\n    Optional<Long> lengthIfKnown = lengthIfKnown();\n    if (lengthIfKnown.isPresent()) {\n      return lengthIfKnown.get() == 0L;\n    }\n    Closer closer = Closer.create();\n    try {\n      Reader reader = closer.register(openStream());\n      return reader.read() == -1;\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "code_tokens": ["public", "boolean", "isEmpty", "(", ")", "throws", "IOException", "{", "Optional", "<", "Long", ">", "lengthIfKnown", "=", "lengthIfKnown", "(", ")", ";", "if", "(", "lengthIfKnown", ".", "isPresent", "(", ")", ")", "{", "return", "lengthIfKnown", ".", "get", "(", ")", "==", "0L", ";", "}", "Closer", "closer", "=", "Closer", ".", "create", "(", ")", ";", "try", "{", "Reader", "reader", "=", "closer", ".", "register", "(", "openStream", "(", ")", ")", ";", "return", "reader", ".", "read", "(", ")", "==", "-", "1", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "closer", ".", "rethrow", "(", "e", ")", ";", "}", "finally", "{", "closer", ".", "close", "(", ")", ";", "}", "}"], "docstring": "Returns whether the source has zero chars. The default implementation first checks {@link\n#lengthIfKnown}, returning true if it's known to be zero and false if it's known to be\nnon-zero. If the length is not known, it falls back to opening a stream and checking for EOF.\n\n<p>Note that, in cases where {@code lengthIfKnown} returns zero, it is <i>possible</i> that\nchars are actually available for reading. This means that a source may return {@code true} from\n{@code isEmpty()} despite having readable content.\n\n@throws IOException if an I/O error occurs\n@since 15.0", "docstring_tokens": ["Returns", "whether", "the", "source", "has", "zero", "chars", ".", "The", "default", "implementation", "first", "checks", "{", "@link", "#lengthIfKnown", "}", "returning", "true", "if", "it", "s", "known", "to", "be", "zero", "and", "false", "if", "it", "s", "known", "to", "be", "non", "-", "zero", ".", "If", "the", "length", "is", "not", "known", "it", "falls", "back", "to", "opening", "a", "stream", "and", "checking", "for", "EOF", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/CharSource.java#L334-L348", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/CharSource.java", "func_name": "CharSource.wrap", "original_string": "public static CharSource wrap(CharSequence charSequence) {\n    return charSequence instanceof String\n        ? new StringCharSource((String) charSequence)\n        : new CharSequenceCharSource(charSequence);\n  }", "language": "java", "code": "public static CharSource wrap(CharSequence charSequence) {\n    return charSequence instanceof String\n        ? new StringCharSource((String) charSequence)\n        : new CharSequenceCharSource(charSequence);\n  }", "code_tokens": ["public", "static", "CharSource", "wrap", "(", "CharSequence", "charSequence", ")", "{", "return", "charSequence", "instanceof", "String", "?", "new", "StringCharSource", "(", "(", "String", ")", "charSequence", ")", ":", "new", "CharSequenceCharSource", "(", "charSequence", ")", ";", "}"], "docstring": "Returns a view of the given character sequence as a {@link CharSource}. The behavior of the\nreturned {@code CharSource} and any {@code Reader} instances created by it is unspecified if\nthe {@code charSequence} is mutated while it is being read, so don't do that.\n\n@since 15.0 (since 14.0 as {@code CharStreams.asCharSource(String)})", "docstring_tokens": ["Returns", "a", "view", "of", "the", "given", "character", "sequence", "as", "a", "{", "@link", "CharSource", "}", ".", "The", "behavior", "of", "the", "returned", "{", "@code", "CharSource", "}", "and", "any", "{", "@code", "Reader", "}", "instances", "created", "by", "it", "is", "unspecified", "if", "the", "{", "@code", "charSequence", "}", "is", "mutated", "while", "it", "is", "being", "read", "so", "don", "t", "do", "that", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/CharSource.java#L410-L414", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/ReaderInputStream.java", "func_name": "ReaderInputStream.read", "original_string": "@Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    // Obey InputStream contract.\n    checkPositionIndexes(off, off + len, b.length);\n    if (len == 0) {\n      return 0;\n    }\n\n    // The rest of this method implements the process described by the CharsetEncoder javadoc.\n    int totalBytesRead = 0;\n    boolean doneEncoding = endOfInput;\n\n    DRAINING:\n    while (true) {\n      // We stay in draining mode until there are no bytes left in the output buffer. Then we go\n      // back to encoding/flushing.\n      if (draining) {\n        totalBytesRead += drain(b, off + totalBytesRead, len - totalBytesRead);\n        if (totalBytesRead == len || doneFlushing) {\n          return (totalBytesRead > 0) ? totalBytesRead : -1;\n        }\n        draining = false;\n        byteBuffer.clear();\n      }\n\n      while (true) {\n        // We call encode until there is no more input. The last call to encode will have endOfInput\n        // == true. Then there is a final call to flush.\n        CoderResult result;\n        if (doneFlushing) {\n          result = CoderResult.UNDERFLOW;\n        } else if (doneEncoding) {\n          result = encoder.flush(byteBuffer);\n        } else {\n          result = encoder.encode(charBuffer, byteBuffer, endOfInput);\n        }\n\n        if (result.isOverflow()) {\n          // Not enough room in output buffer--drain it, creating a bigger buffer if necessary.\n          startDraining(true);\n          continue DRAINING;\n        } else if (result.isUnderflow()) {\n          // If encoder underflows, it means either:\n          // a) the final flush() succeeded; next drain (then done)\n          // b) we encoded all of the input; next flush\n          // c) we ran of out input to encode; next read more input\n          if (doneEncoding) { // (a)\n            doneFlushing = true;\n            startDraining(false);\n            continue DRAINING;\n          } else if (endOfInput) { // (b)\n            doneEncoding = true;\n          } else { // (c)\n            readMoreChars();\n          }\n        } else if (result.isError()) {\n          // Only reach here if a CharsetEncoder with non-REPLACE settings is used.\n          result.throwException();\n          return 0; // Not called.\n        }\n      }\n    }\n  }", "language": "java", "code": "@Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    // Obey InputStream contract.\n    checkPositionIndexes(off, off + len, b.length);\n    if (len == 0) {\n      return 0;\n    }\n\n    // The rest of this method implements the process described by the CharsetEncoder javadoc.\n    int totalBytesRead = 0;\n    boolean doneEncoding = endOfInput;\n\n    DRAINING:\n    while (true) {\n      // We stay in draining mode until there are no bytes left in the output buffer. Then we go\n      // back to encoding/flushing.\n      if (draining) {\n        totalBytesRead += drain(b, off + totalBytesRead, len - totalBytesRead);\n        if (totalBytesRead == len || doneFlushing) {\n          return (totalBytesRead > 0) ? totalBytesRead : -1;\n        }\n        draining = false;\n        byteBuffer.clear();\n      }\n\n      while (true) {\n        // We call encode until there is no more input. The last call to encode will have endOfInput\n        // == true. Then there is a final call to flush.\n        CoderResult result;\n        if (doneFlushing) {\n          result = CoderResult.UNDERFLOW;\n        } else if (doneEncoding) {\n          result = encoder.flush(byteBuffer);\n        } else {\n          result = encoder.encode(charBuffer, byteBuffer, endOfInput);\n        }\n\n        if (result.isOverflow()) {\n          // Not enough room in output buffer--drain it, creating a bigger buffer if necessary.\n          startDraining(true);\n          continue DRAINING;\n        } else if (result.isUnderflow()) {\n          // If encoder underflows, it means either:\n          // a) the final flush() succeeded; next drain (then done)\n          // b) we encoded all of the input; next flush\n          // c) we ran of out input to encode; next read more input\n          if (doneEncoding) { // (a)\n            doneFlushing = true;\n            startDraining(false);\n            continue DRAINING;\n          } else if (endOfInput) { // (b)\n            doneEncoding = true;\n          } else { // (c)\n            readMoreChars();\n          }\n        } else if (result.isError()) {\n          // Only reach here if a CharsetEncoder with non-REPLACE settings is used.\n          result.throwException();\n          return 0; // Not called.\n        }\n      }\n    }\n  }", "code_tokens": ["@", "Override", "public", "int", "read", "(", "byte", "[", "]", "b", ",", "int", "off", ",", "int", "len", ")", "throws", "IOException", "{", "// Obey InputStream contract.", "checkPositionIndexes", "(", "off", ",", "off", "+", "len", ",", "b", ".", "length", ")", ";", "if", "(", "len", "==", "0", ")", "{", "return", "0", ";", "}", "// The rest of this method implements the process described by the CharsetEncoder javadoc.", "int", "totalBytesRead", "=", "0", ";", "boolean", "doneEncoding", "=", "endOfInput", ";", "DRAINING", ":", "while", "(", "true", ")", "{", "// We stay in draining mode until there are no bytes left in the output buffer. Then we go", "// back to encoding/flushing.", "if", "(", "draining", ")", "{", "totalBytesRead", "+=", "drain", "(", "b", ",", "off", "+", "totalBytesRead", ",", "len", "-", "totalBytesRead", ")", ";", "if", "(", "totalBytesRead", "==", "len", "||", "doneFlushing", ")", "{", "return", "(", "totalBytesRead", ">", "0", ")", "?", "totalBytesRead", ":", "-", "1", ";", "}", "draining", "=", "false", ";", "byteBuffer", ".", "clear", "(", ")", ";", "}", "while", "(", "true", ")", "{", "// We call encode until there is no more input. The last call to encode will have endOfInput", "// == true. Then there is a final call to flush.", "CoderResult", "result", ";", "if", "(", "doneFlushing", ")", "{", "result", "=", "CoderResult", ".", "UNDERFLOW", ";", "}", "else", "if", "(", "doneEncoding", ")", "{", "result", "=", "encoder", ".", "flush", "(", "byteBuffer", ")", ";", "}", "else", "{", "result", "=", "encoder", ".", "encode", "(", "charBuffer", ",", "byteBuffer", ",", "endOfInput", ")", ";", "}", "if", "(", "result", ".", "isOverflow", "(", ")", ")", "{", "// Not enough room in output buffer--drain it, creating a bigger buffer if necessary.", "startDraining", "(", "true", ")", ";", "continue", "DRAINING", ";", "}", "else", "if", "(", "result", ".", "isUnderflow", "(", ")", ")", "{", "// If encoder underflows, it means either:", "// a) the final flush() succeeded; next drain (then done)", "// b) we encoded all of the input; next flush", "// c) we ran of out input to encode; next read more input", "if", "(", "doneEncoding", ")", "{", "// (a)", "doneFlushing", "=", "true", ";", "startDraining", "(", "false", ")", ";", "continue", "DRAINING", ";", "}", "else", "if", "(", "endOfInput", ")", "{", "// (b)", "doneEncoding", "=", "true", ";", "}", "else", "{", "// (c)", "readMoreChars", "(", ")", ";", "}", "}", "else", "if", "(", "result", ".", "isError", "(", ")", ")", "{", "// Only reach here if a CharsetEncoder with non-REPLACE settings is used.", "result", ".", "throwException", "(", ")", ";", "return", "0", ";", "// Not called.", "}", "}", "}", "}"], "docstring": "buffer when possible.", "docstring_tokens": ["buffer", "when", "possible", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/ReaderInputStream.java#L124-L186", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/ReaderInputStream.java", "func_name": "ReaderInputStream.grow", "original_string": "private static CharBuffer grow(CharBuffer buf) {\n    char[] copy = Arrays.copyOf(buf.array(), buf.capacity() * 2);\n    CharBuffer bigger = CharBuffer.wrap(copy);\n    bigger.position(buf.position());\n    bigger.limit(buf.limit());\n    return bigger;\n  }", "language": "java", "code": "private static CharBuffer grow(CharBuffer buf) {\n    char[] copy = Arrays.copyOf(buf.array(), buf.capacity() * 2);\n    CharBuffer bigger = CharBuffer.wrap(copy);\n    bigger.position(buf.position());\n    bigger.limit(buf.limit());\n    return bigger;\n  }", "code_tokens": ["private", "static", "CharBuffer", "grow", "(", "CharBuffer", "buf", ")", "{", "char", "[", "]", "copy", "=", "Arrays", ".", "copyOf", "(", "buf", ".", "array", "(", ")", ",", "buf", ".", "capacity", "(", ")", "*", "2", ")", ";", "CharBuffer", "bigger", "=", "CharBuffer", ".", "wrap", "(", "copy", ")", ";", "bigger", ".", "position", "(", "buf", ".", "position", "(", ")", ")", ";", "bigger", ".", "limit", "(", "buf", ".", "limit", "(", ")", ")", ";", "return", "bigger", ";", "}"], "docstring": "Returns a new CharBuffer identical to buf, except twice the capacity.", "docstring_tokens": ["Returns", "a", "new", "CharBuffer", "identical", "to", "buf", "except", "twice", "the", "capacity", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/ReaderInputStream.java#L189-L195", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/ReaderInputStream.java", "func_name": "ReaderInputStream.readMoreChars", "original_string": "private void readMoreChars() throws IOException {\n    // Possibilities:\n    // 1) array has space available on right hand side (between limit and capacity)\n    // 2) array has space available on left hand side (before position)\n    // 3) array has no space available\n    //\n    // In case 2 we shift the existing chars to the left, and in case 3 we create a bigger\n    // array, then they both become case 1.\n\n    if (availableCapacity(charBuffer) == 0) {\n      if (charBuffer.position() > 0) {\n        // (2) There is room in the buffer. Move existing bytes to the beginning.\n        charBuffer.compact().flip();\n      } else {\n        // (3) Entire buffer is full, need bigger buffer.\n        charBuffer = grow(charBuffer);\n      }\n    }\n\n    // (1) Read more characters into free space at end of array.\n    int limit = charBuffer.limit();\n    int numChars = reader.read(charBuffer.array(), limit, availableCapacity(charBuffer));\n    if (numChars == -1) {\n      endOfInput = true;\n    } else {\n      charBuffer.limit(limit + numChars);\n    }\n  }", "language": "java", "code": "private void readMoreChars() throws IOException {\n    // Possibilities:\n    // 1) array has space available on right hand side (between limit and capacity)\n    // 2) array has space available on left hand side (before position)\n    // 3) array has no space available\n    //\n    // In case 2 we shift the existing chars to the left, and in case 3 we create a bigger\n    // array, then they both become case 1.\n\n    if (availableCapacity(charBuffer) == 0) {\n      if (charBuffer.position() > 0) {\n        // (2) There is room in the buffer. Move existing bytes to the beginning.\n        charBuffer.compact().flip();\n      } else {\n        // (3) Entire buffer is full, need bigger buffer.\n        charBuffer = grow(charBuffer);\n      }\n    }\n\n    // (1) Read more characters into free space at end of array.\n    int limit = charBuffer.limit();\n    int numChars = reader.read(charBuffer.array(), limit, availableCapacity(charBuffer));\n    if (numChars == -1) {\n      endOfInput = true;\n    } else {\n      charBuffer.limit(limit + numChars);\n    }\n  }", "code_tokens": ["private", "void", "readMoreChars", "(", ")", "throws", "IOException", "{", "// Possibilities:", "// 1) array has space available on right hand side (between limit and capacity)", "// 2) array has space available on left hand side (before position)", "// 3) array has no space available", "//", "// In case 2 we shift the existing chars to the left, and in case 3 we create a bigger", "// array, then they both become case 1.", "if", "(", "availableCapacity", "(", "charBuffer", ")", "==", "0", ")", "{", "if", "(", "charBuffer", ".", "position", "(", ")", ">", "0", ")", "{", "// (2) There is room in the buffer. Move existing bytes to the beginning.", "charBuffer", ".", "compact", "(", ")", ".", "flip", "(", ")", ";", "}", "else", "{", "// (3) Entire buffer is full, need bigger buffer.", "charBuffer", "=", "grow", "(", "charBuffer", ")", ";", "}", "}", "// (1) Read more characters into free space at end of array.", "int", "limit", "=", "charBuffer", ".", "limit", "(", ")", ";", "int", "numChars", "=", "reader", ".", "read", "(", "charBuffer", ".", "array", "(", ")", ",", "limit", ",", "availableCapacity", "(", "charBuffer", ")", ")", ";", "if", "(", "numChars", "==", "-", "1", ")", "{", "endOfInput", "=", "true", ";", "}", "else", "{", "charBuffer", ".", "limit", "(", "limit", "+", "numChars", ")", ";", "}", "}"], "docstring": "Handle the case of underflow caused by needing more input characters.", "docstring_tokens": ["Handle", "the", "case", "of", "underflow", "caused", "by", "needing", "more", "input", "characters", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/ReaderInputStream.java#L198-L225", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/ReaderInputStream.java", "func_name": "ReaderInputStream.startDraining", "original_string": "private void startDraining(boolean overflow) {\n    byteBuffer.flip();\n    if (overflow && byteBuffer.remaining() == 0) {\n      byteBuffer = ByteBuffer.allocate(byteBuffer.capacity() * 2);\n    } else {\n      draining = true;\n    }\n  }", "language": "java", "code": "private void startDraining(boolean overflow) {\n    byteBuffer.flip();\n    if (overflow && byteBuffer.remaining() == 0) {\n      byteBuffer = ByteBuffer.allocate(byteBuffer.capacity() * 2);\n    } else {\n      draining = true;\n    }\n  }", "code_tokens": ["private", "void", "startDraining", "(", "boolean", "overflow", ")", "{", "byteBuffer", ".", "flip", "(", ")", ";", "if", "(", "overflow", "&&", "byteBuffer", ".", "remaining", "(", ")", "==", "0", ")", "{", "byteBuffer", "=", "ByteBuffer", ".", "allocate", "(", "byteBuffer", ".", "capacity", "(", ")", "*", "2", ")", ";", "}", "else", "{", "draining", "=", "true", ";", "}", "}"], "docstring": "Flips the buffer output buffer so we can start reading bytes from it. If we are starting to\ndrain because there was overflow, and there aren't actually any characters to drain, then the\noverflow must be due to a small output buffer.", "docstring_tokens": ["Flips", "the", "buffer", "output", "buffer", "so", "we", "can", "start", "reading", "bytes", "from", "it", ".", "If", "we", "are", "starting", "to", "drain", "because", "there", "was", "overflow", "and", "there", "aren", "t", "actually", "any", "characters", "to", "drain", "then", "the", "overflow", "must", "be", "due", "to", "a", "small", "output", "buffer", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/ReaderInputStream.java#L237-L244", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/ReaderInputStream.java", "func_name": "ReaderInputStream.drain", "original_string": "private int drain(byte[] b, int off, int len) {\n    int remaining = Math.min(len, byteBuffer.remaining());\n    byteBuffer.get(b, off, remaining);\n    return remaining;\n  }", "language": "java", "code": "private int drain(byte[] b, int off, int len) {\n    int remaining = Math.min(len, byteBuffer.remaining());\n    byteBuffer.get(b, off, remaining);\n    return remaining;\n  }", "code_tokens": ["private", "int", "drain", "(", "byte", "[", "]", "b", ",", "int", "off", ",", "int", "len", ")", "{", "int", "remaining", "=", "Math", ".", "min", "(", "len", ",", "byteBuffer", ".", "remaining", "(", ")", ")", ";", "byteBuffer", ".", "get", "(", "b", ",", "off", ",", "remaining", ")", ";", "return", "remaining", ";", "}"], "docstring": "Copy as much of the byte buffer into the output array as possible, returning the (positive)\nnumber of characters copied.", "docstring_tokens": ["Copy", "as", "much", "of", "the", "byte", "buffer", "into", "the", "output", "array", "as", "possible", "returning", "the", "(", "positive", ")", "number", "of", "characters", "copied", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/ReaderInputStream.java#L250-L254", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/ForwardingNavigableMap.java", "func_name": "ForwardingNavigableMap.standardLowerEntry", "original_string": "protected Entry<K, V> standardLowerEntry(K key) {\n    return headMap(key, false).lastEntry();\n  }", "language": "java", "code": "protected Entry<K, V> standardLowerEntry(K key) {\n    return headMap(key, false).lastEntry();\n  }", "code_tokens": ["protected", "Entry", "<", "K", ",", "V", ">", "standardLowerEntry", "(", "K", "key", ")", "{", "return", "headMap", "(", "key", ",", "false", ")", ".", "lastEntry", "(", ")", ";", "}"], "docstring": "A sensible definition of {@link #lowerEntry} in terms of the {@code lastEntry()} of {@link\n#headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override {@code\nlowerEntry} to forward to this implementation.", "docstring_tokens": ["A", "sensible", "definition", "of", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/ForwardingNavigableMap.java#L76-L78", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/ForwardingNavigableMap.java", "func_name": "ForwardingNavigableMap.standardFloorEntry", "original_string": "protected Entry<K, V> standardFloorEntry(K key) {\n    return headMap(key, true).lastEntry();\n  }", "language": "java", "code": "protected Entry<K, V> standardFloorEntry(K key) {\n    return headMap(key, true).lastEntry();\n  }", "code_tokens": ["protected", "Entry", "<", "K", ",", "V", ">", "standardFloorEntry", "(", "K", "key", ")", "{", "return", "headMap", "(", "key", ",", "true", ")", ".", "lastEntry", "(", ")", ";", "}"], "docstring": "A sensible definition of {@link #floorEntry} in terms of the {@code lastEntry()} of {@link\n#headMap(Object, boolean)}. If you override {@code headMap}, you may wish to override {@code\nfloorEntry} to forward to this implementation.", "docstring_tokens": ["A", "sensible", "definition", "of", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/ForwardingNavigableMap.java#L104-L106", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/ForwardingNavigableMap.java", "func_name": "ForwardingNavigableMap.standardCeilingEntry", "original_string": "protected Entry<K, V> standardCeilingEntry(K key) {\n    return tailMap(key, true).firstEntry();\n  }", "language": "java", "code": "protected Entry<K, V> standardCeilingEntry(K key) {\n    return tailMap(key, true).firstEntry();\n  }", "code_tokens": ["protected", "Entry", "<", "K", ",", "V", ">", "standardCeilingEntry", "(", "K", "key", ")", "{", "return", "tailMap", "(", "key", ",", "true", ")", ".", "firstEntry", "(", ")", ";", "}"], "docstring": "A sensible definition of {@link #ceilingEntry} in terms of the {@code firstEntry()} of {@link\n#tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override {@code\nceilingEntry} to forward to this implementation.", "docstring_tokens": ["A", "sensible", "definition", "of", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/ForwardingNavigableMap.java#L132-L134", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/ForwardingNavigableMap.java", "func_name": "ForwardingNavigableMap.standardHigherEntry", "original_string": "protected Entry<K, V> standardHigherEntry(K key) {\n    return tailMap(key, false).firstEntry();\n  }", "language": "java", "code": "protected Entry<K, V> standardHigherEntry(K key) {\n    return tailMap(key, false).firstEntry();\n  }", "code_tokens": ["protected", "Entry", "<", "K", ",", "V", ">", "standardHigherEntry", "(", "K", "key", ")", "{", "return", "tailMap", "(", "key", ",", "false", ")", ".", "firstEntry", "(", ")", ";", "}"], "docstring": "A sensible definition of {@link #higherEntry} in terms of the {@code firstEntry()} of {@link\n#tailMap(Object, boolean)}. If you override {@code tailMap}, you may wish to override {@code\nhigherEntry} to forward to this implementation.", "docstring_tokens": ["A", "sensible", "definition", "of", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/ForwardingNavigableMap.java#L160-L162", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/ForwardingNavigableMap.java", "func_name": "ForwardingNavigableMap.standardFirstKey", "original_string": "protected K standardFirstKey() {\n    Entry<K, V> entry = firstEntry();\n    if (entry == null) {\n      throw new NoSuchElementException();\n    } else {\n      return entry.getKey();\n    }\n  }", "language": "java", "code": "protected K standardFirstKey() {\n    Entry<K, V> entry = firstEntry();\n    if (entry == null) {\n      throw new NoSuchElementException();\n    } else {\n      return entry.getKey();\n    }\n  }", "code_tokens": ["protected", "K", "standardFirstKey", "(", ")", "{", "Entry", "<", "K", ",", "V", ">", "entry", "=", "firstEntry", "(", ")", ";", "if", "(", "entry", "==", "null", ")", "{", "throw", "new", "NoSuchElementException", "(", ")", ";", "}", "else", "{", "return", "entry", ".", "getKey", "(", ")", ";", "}", "}"], "docstring": "A sensible definition of {@link #firstKey} in terms of {@code firstEntry}. If you override\n{@code firstEntry}, you may wish to override {@code firstKey} to forward to this\nimplementation.", "docstring_tokens": ["A", "sensible", "definition", "of", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/ForwardingNavigableMap.java#L197-L204", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/ForwardingNavigableMap.java", "func_name": "ForwardingNavigableMap.standardLastKey", "original_string": "protected K standardLastKey() {\n    Entry<K, V> entry = lastEntry();\n    if (entry == null) {\n      throw new NoSuchElementException();\n    } else {\n      return entry.getKey();\n    }\n  }", "language": "java", "code": "protected K standardLastKey() {\n    Entry<K, V> entry = lastEntry();\n    if (entry == null) {\n      throw new NoSuchElementException();\n    } else {\n      return entry.getKey();\n    }\n  }", "code_tokens": ["protected", "K", "standardLastKey", "(", ")", "{", "Entry", "<", "K", ",", "V", ">", "entry", "=", "lastEntry", "(", ")", ";", "if", "(", "entry", "==", "null", ")", "{", "throw", "new", "NoSuchElementException", "(", ")", ";", "}", "else", "{", "return", "entry", ".", "getKey", "(", ")", ";", "}", "}"], "docstring": "A sensible definition of {@link #lastKey} in terms of {@code lastEntry}. If you override {@code\nlastEntry}, you may wish to override {@code lastKey} to forward to this implementation.", "docstring_tokens": ["A", "sensible", "definition", "of", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/ForwardingNavigableMap.java#L224-L231", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/graph/AbstractBaseGraph.java", "func_name": "AbstractBaseGraph.edgeCount", "original_string": "protected long edgeCount() {\n    long degreeSum = 0L;\n    for (N node : nodes()) {\n      degreeSum += degree(node);\n    }\n    // According to the degree sum formula, this is equal to twice the number of edges.\n    checkState((degreeSum & 1) == 0);\n    return degreeSum >>> 1;\n  }", "language": "java", "code": "protected long edgeCount() {\n    long degreeSum = 0L;\n    for (N node : nodes()) {\n      degreeSum += degree(node);\n    }\n    // According to the degree sum formula, this is equal to twice the number of edges.\n    checkState((degreeSum & 1) == 0);\n    return degreeSum >>> 1;\n  }", "code_tokens": ["protected", "long", "edgeCount", "(", ")", "{", "long", "degreeSum", "=", "0L", ";", "for", "(", "N", "node", ":", "nodes", "(", ")", ")", "{", "degreeSum", "+=", "degree", "(", "node", ")", ";", "}", "// According to the degree sum formula, this is equal to twice the number of edges.", "checkState", "(", "(", "degreeSum", "&", "1", ")", "==", "0", ")", ";", "return", "degreeSum", ">>>", "1", ";", "}"], "docstring": "Returns the number of edges in this graph; used to calculate the size of {@link #edges()}. This\nimplementation requires O(|N|) time. Classes extending this one may manually keep track of the\nnumber of edges as the graph is updated, and override this method for better performance.", "docstring_tokens": ["Returns", "the", "number", "of", "edges", "in", "this", "graph", ";", "used", "to", "calculate", "the", "size", "of", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/graph/AbstractBaseGraph.java#L51-L59", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/graph/AbstractBaseGraph.java", "func_name": "AbstractBaseGraph.edges", "original_string": "@Override\n  public Set<EndpointPair<N>> edges() {\n    return new AbstractSet<EndpointPair<N>>() {\n      @Override\n      public UnmodifiableIterator<EndpointPair<N>> iterator() {\n        return EndpointPairIterator.of(AbstractBaseGraph.this);\n      }\n\n      @Override\n      public int size() {\n        return Ints.saturatedCast(edgeCount());\n      }\n\n      @Override\n      public boolean remove(Object o) {\n        throw new UnsupportedOperationException();\n      }\n\n      // Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n      // operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n      // Graph<LinkedList>.\n      @SuppressWarnings(\"unchecked\")\n      @Override\n      public boolean contains(@NullableDecl Object obj) {\n        if (!(obj instanceof EndpointPair)) {\n          return false;\n        }\n        EndpointPair<?> endpointPair = (EndpointPair<?>) obj;\n        return isOrderingCompatible(endpointPair)\n            && nodes().contains(endpointPair.nodeU())\n            && successors((N) endpointPair.nodeU()).contains(endpointPair.nodeV());\n      }\n    };\n  }", "language": "java", "code": "@Override\n  public Set<EndpointPair<N>> edges() {\n    return new AbstractSet<EndpointPair<N>>() {\n      @Override\n      public UnmodifiableIterator<EndpointPair<N>> iterator() {\n        return EndpointPairIterator.of(AbstractBaseGraph.this);\n      }\n\n      @Override\n      public int size() {\n        return Ints.saturatedCast(edgeCount());\n      }\n\n      @Override\n      public boolean remove(Object o) {\n        throw new UnsupportedOperationException();\n      }\n\n      // Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe\n      // operations only in weird cases like checking for an EndpointPair<ArrayList> in a\n      // Graph<LinkedList>.\n      @SuppressWarnings(\"unchecked\")\n      @Override\n      public boolean contains(@NullableDecl Object obj) {\n        if (!(obj instanceof EndpointPair)) {\n          return false;\n        }\n        EndpointPair<?> endpointPair = (EndpointPair<?>) obj;\n        return isOrderingCompatible(endpointPair)\n            && nodes().contains(endpointPair.nodeU())\n            && successors((N) endpointPair.nodeU()).contains(endpointPair.nodeV());\n      }\n    };\n  }", "code_tokens": ["@", "Override", "public", "Set", "<", "EndpointPair", "<", "N", ">", ">", "edges", "(", ")", "{", "return", "new", "AbstractSet", "<", "EndpointPair", "<", "N", ">", ">", "(", ")", "{", "@", "Override", "public", "UnmodifiableIterator", "<", "EndpointPair", "<", "N", ">", ">", "iterator", "(", ")", "{", "return", "EndpointPairIterator", ".", "of", "(", "AbstractBaseGraph", ".", "this", ")", ";", "}", "@", "Override", "public", "int", "size", "(", ")", "{", "return", "Ints", ".", "saturatedCast", "(", "edgeCount", "(", ")", ")", ";", "}", "@", "Override", "public", "boolean", "remove", "(", "Object", "o", ")", "{", "throw", "new", "UnsupportedOperationException", "(", ")", ";", "}", "// Mostly safe: We check contains(u) before calling successors(u), so we perform unsafe", "// operations only in weird cases like checking for an EndpointPair<ArrayList> in a", "// Graph<LinkedList>.", "@", "SuppressWarnings", "(", "\"unchecked\"", ")", "@", "Override", "public", "boolean", "contains", "(", "@", "NullableDecl", "Object", "obj", ")", "{", "if", "(", "!", "(", "obj", "instanceof", "EndpointPair", ")", ")", "{", "return", "false", ";", "}", "EndpointPair", "<", "?", ">", "endpointPair", "=", "(", "EndpointPair", "<", "?", ">", ")", "obj", ";", "return", "isOrderingCompatible", "(", "endpointPair", ")", "&&", "nodes", "(", ")", ".", "contains", "(", "endpointPair", ".", "nodeU", "(", ")", ")", "&&", "successors", "(", "(", "N", ")", "endpointPair", ".", "nodeU", "(", ")", ")", ".", "contains", "(", "endpointPair", ".", "nodeV", "(", ")", ")", ";", "}", "}", ";", "}"], "docstring": "An implementation of {@link BaseGraph#edges()} defined in terms of {@link #nodes()} and {@link\n#successors(Object)}.", "docstring_tokens": ["An", "implementation", "of", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/graph/AbstractBaseGraph.java#L65-L98", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/ImmutableCollection.java", "func_name": "ImmutableCollection.copyIntoArray", "original_string": "@CanIgnoreReturnValue\n  int copyIntoArray(Object[] dst, int offset) {\n    for (E e : this) {\n      dst[offset++] = e;\n    }\n    return offset;\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  int copyIntoArray(Object[] dst, int offset) {\n    for (E e : this) {\n      dst[offset++] = e;\n    }\n    return offset;\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "int", "copyIntoArray", "(", "Object", "[", "]", "dst", ",", "int", "offset", ")", "{", "for", "(", "E", "e", ":", "this", ")", "{", "dst", "[", "offset", "++", "]", "=", "e", ";", "}", "return", "offset", ";", "}"], "docstring": "Copies the contents of this immutable collection into the specified array at the specified\noffset. Returns {@code offset + size()}.", "docstring_tokens": ["Copies", "the", "contents", "of", "this", "immutable", "collection", "into", "the", "specified", "array", "at", "the", "specified", "offset", ".", "Returns", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/ImmutableCollection.java#L356-L362", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.unmodifiableIterable", "original_string": "public static <T> Iterable<T> unmodifiableIterable(final Iterable<? extends T> iterable) {\n    checkNotNull(iterable);\n    if (iterable instanceof UnmodifiableIterable || iterable instanceof ImmutableCollection) {\n      @SuppressWarnings(\"unchecked\") // Since it's unmodifiable, the covariant cast is safe\n      Iterable<T> result = (Iterable<T>) iterable;\n      return result;\n    }\n    return new UnmodifiableIterable<>(iterable);\n  }", "language": "java", "code": "public static <T> Iterable<T> unmodifiableIterable(final Iterable<? extends T> iterable) {\n    checkNotNull(iterable);\n    if (iterable instanceof UnmodifiableIterable || iterable instanceof ImmutableCollection) {\n      @SuppressWarnings(\"unchecked\") // Since it's unmodifiable, the covariant cast is safe\n      Iterable<T> result = (Iterable<T>) iterable;\n      return result;\n    }\n    return new UnmodifiableIterable<>(iterable);\n  }", "code_tokens": ["public", "static", "<", "T", ">", "Iterable", "<", "T", ">", "unmodifiableIterable", "(", "final", "Iterable", "<", "?", "extends", "T", ">", "iterable", ")", "{", "checkNotNull", "(", "iterable", ")", ";", "if", "(", "iterable", "instanceof", "UnmodifiableIterable", "||", "iterable", "instanceof", "ImmutableCollection", ")", "{", "@", "SuppressWarnings", "(", "\"unchecked\"", ")", "// Since it's unmodifiable, the covariant cast is safe", "Iterable", "<", "T", ">", "result", "=", "(", "Iterable", "<", "T", ">", ")", "iterable", ";", "return", "result", ";", "}", "return", "new", "UnmodifiableIterable", "<>", "(", "iterable", ")", ";", "}"], "docstring": "Returns an unmodifiable view of {@code iterable}.", "docstring_tokens": ["Returns", "an", "unmodifiable", "view", "of", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L68-L76", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.unmodifiableIterable", "original_string": "@Deprecated\n  public static <E> Iterable<E> unmodifiableIterable(ImmutableCollection<E> iterable) {\n    return checkNotNull(iterable);\n  }", "language": "java", "code": "@Deprecated\n  public static <E> Iterable<E> unmodifiableIterable(ImmutableCollection<E> iterable) {\n    return checkNotNull(iterable);\n  }", "code_tokens": ["@", "Deprecated", "public", "static", "<", "E", ">", "Iterable", "<", "E", ">", "unmodifiableIterable", "(", "ImmutableCollection", "<", "E", ">", "iterable", ")", "{", "return", "checkNotNull", "(", "iterable", ")", ";", "}"], "docstring": "Simply returns its argument.\n\n@deprecated no need to use this\n@since 10.0", "docstring_tokens": ["Simply", "returns", "its", "argument", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L84-L87", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.size", "original_string": "public static int size(Iterable<?> iterable) {\n    return (iterable instanceof Collection)\n        ? ((Collection<?>) iterable).size()\n        : Iterators.size(iterable.iterator());\n  }", "language": "java", "code": "public static int size(Iterable<?> iterable) {\n    return (iterable instanceof Collection)\n        ? ((Collection<?>) iterable).size()\n        : Iterators.size(iterable.iterator());\n  }", "code_tokens": ["public", "static", "int", "size", "(", "Iterable", "<", "?", ">", "iterable", ")", "{", "return", "(", "iterable", "instanceof", "Collection", ")", "?", "(", "(", "Collection", "<", "?", ">", ")", "iterable", ")", ".", "size", "(", ")", ":", "Iterators", ".", "size", "(", "iterable", ".", "iterator", "(", ")", ")", ";", "}"], "docstring": "Returns the number of elements in {@code iterable}.", "docstring_tokens": ["Returns", "the", "number", "of", "elements", "in", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L109-L113", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.removeIf", "original_string": "@CanIgnoreReturnValue\n  public static <T> boolean removeIf(Iterable<T> removeFrom, Predicate<? super T> predicate) {\n    if (removeFrom instanceof RandomAccess && removeFrom instanceof List) {\n      return removeIfFromRandomAccessList((List<T>) removeFrom, checkNotNull(predicate));\n    }\n    return Iterators.removeIf(removeFrom.iterator(), predicate);\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  public static <T> boolean removeIf(Iterable<T> removeFrom, Predicate<? super T> predicate) {\n    if (removeFrom instanceof RandomAccess && removeFrom instanceof List) {\n      return removeIfFromRandomAccessList((List<T>) removeFrom, checkNotNull(predicate));\n    }\n    return Iterators.removeIf(removeFrom.iterator(), predicate);\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "public", "static", "<", "T", ">", "boolean", "removeIf", "(", "Iterable", "<", "T", ">", "removeFrom", ",", "Predicate", "<", "?", "super", "T", ">", "predicate", ")", "{", "if", "(", "removeFrom", "instanceof", "RandomAccess", "&&", "removeFrom", "instanceof", "List", ")", "{", "return", "removeIfFromRandomAccessList", "(", "(", "List", "<", "T", ">", ")", "removeFrom", ",", "checkNotNull", "(", "predicate", ")", ")", ";", "}", "return", "Iterators", ".", "removeIf", "(", "removeFrom", ".", "iterator", "(", ")", ",", "predicate", ")", ";", "}"], "docstring": "Removes, from an iterable, every element that satisfies the provided predicate.\n\n<p>Removals may or may not happen immediately as each element is tested against the predicate.\nThe behavior of this method is not specified if {@code predicate} is dependent on {@code\nremoveFrom}.\n\n@param removeFrom the iterable to (potentially) remove elements from\n@param predicate a predicate that determines whether an element should be removed\n@return {@code true} if any elements were removed from the iterable\n@throws UnsupportedOperationException if the iterable does not support {@code remove()}.\n@since 2.0", "docstring_tokens": ["Removes", "from", "an", "iterable", "every", "element", "that", "satisfies", "the", "provided", "predicate", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L176-L182", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.elementsEqual", "original_string": "public static boolean elementsEqual(Iterable<?> iterable1, Iterable<?> iterable2) {\n    if (iterable1 instanceof Collection && iterable2 instanceof Collection) {\n      Collection<?> collection1 = (Collection<?>) iterable1;\n      Collection<?> collection2 = (Collection<?>) iterable2;\n      if (collection1.size() != collection2.size()) {\n        return false;\n      }\n    }\n    return Iterators.elementsEqual(iterable1.iterator(), iterable2.iterator());\n  }", "language": "java", "code": "public static boolean elementsEqual(Iterable<?> iterable1, Iterable<?> iterable2) {\n    if (iterable1 instanceof Collection && iterable2 instanceof Collection) {\n      Collection<?> collection1 = (Collection<?>) iterable1;\n      Collection<?> collection2 = (Collection<?>) iterable2;\n      if (collection1.size() != collection2.size()) {\n        return false;\n      }\n    }\n    return Iterators.elementsEqual(iterable1.iterator(), iterable2.iterator());\n  }", "code_tokens": ["public", "static", "boolean", "elementsEqual", "(", "Iterable", "<", "?", ">", "iterable1", ",", "Iterable", "<", "?", ">", "iterable2", ")", "{", "if", "(", "iterable1", "instanceof", "Collection", "&&", "iterable2", "instanceof", "Collection", ")", "{", "Collection", "<", "?", ">", "collection1", "=", "(", "Collection", "<", "?", ">", ")", "iterable1", ";", "Collection", "<", "?", ">", "collection2", "=", "(", "Collection", "<", "?", ">", ")", "iterable2", ";", "if", "(", "collection1", ".", "size", "(", ")", "!=", "collection2", ".", "size", "(", ")", ")", "{", "return", "false", ";", "}", "}", "return", "Iterators", ".", "elementsEqual", "(", "iterable1", ".", "iterator", "(", ")", ",", "iterable2", ".", "iterator", "(", ")", ")", ";", "}"], "docstring": "Determines whether two iterables contain equal elements in the same order. More specifically,\nthis method returns {@code true} if {@code iterable1} and {@code iterable2} contain the same\nnumber of elements and every element of {@code iterable1} is equal to the corresponding element\nof {@code iterable2}.", "docstring_tokens": ["Determines", "whether", "two", "iterables", "contain", "equal", "elements", "in", "the", "same", "order", ".", "More", "specifically", "this", "method", "returns", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L260-L269", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.getOnlyElement", "original_string": "public static <T> T getOnlyElement(Iterable<T> iterable) {\n    return Iterators.getOnlyElement(iterable.iterator());\n  }", "language": "java", "code": "public static <T> T getOnlyElement(Iterable<T> iterable) {\n    return Iterators.getOnlyElement(iterable.iterator());\n  }", "code_tokens": ["public", "static", "<", "T", ">", "T", "getOnlyElement", "(", "Iterable", "<", "T", ">", "iterable", ")", "{", "return", "Iterators", ".", "getOnlyElement", "(", "iterable", ".", "iterator", "(", ")", ")", ";", "}"], "docstring": "Returns the single element contained in {@code iterable}.\n\n<p><b>Java 8 users:</b> the {@code Stream} equivalent to this method is {@code\nstream.collect(MoreCollectors.onlyElement())}.\n\n@throws NoSuchElementException if the iterable is empty\n@throws IllegalArgumentException if the iterable contains multiple elements", "docstring_tokens": ["Returns", "the", "single", "element", "contained", "in", "{", "@code", "iterable", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L291-L293", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.getOnlyElement", "original_string": "@NullableDecl\n  public static <T> T getOnlyElement(Iterable<? extends T> iterable, @NullableDecl T defaultValue) {\n    return Iterators.getOnlyElement(iterable.iterator(), defaultValue);\n  }", "language": "java", "code": "@NullableDecl\n  public static <T> T getOnlyElement(Iterable<? extends T> iterable, @NullableDecl T defaultValue) {\n    return Iterators.getOnlyElement(iterable.iterator(), defaultValue);\n  }", "code_tokens": ["@", "NullableDecl", "public", "static", "<", "T", ">", "T", "getOnlyElement", "(", "Iterable", "<", "?", "extends", "T", ">", "iterable", ",", "@", "NullableDecl", "T", "defaultValue", ")", "{", "return", "Iterators", ".", "getOnlyElement", "(", "iterable", ".", "iterator", "(", ")", ",", "defaultValue", ")", ";", "}"], "docstring": "Returns the single element contained in {@code iterable}, or {@code defaultValue} if the\niterable is empty.\n\n<p><b>Java 8 users:</b> the {@code Stream} equivalent to this method is {@code\nstream.collect(MoreCollectors.toOptional()).orElse(defaultValue)}.\n\n@throws IllegalArgumentException if the iterator contains multiple elements", "docstring_tokens": ["Returns", "the", "single", "element", "contained", "in", "{", "@code", "iterable", "}", "or", "{", "@code", "defaultValue", "}", "if", "the", "iterable", "is", "empty", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L304-L307", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.toArray", "original_string": "@GwtIncompatible // Array.newInstance(Class, int)\n  public static <T> T[] toArray(Iterable<? extends T> iterable, Class<T> type) {\n    return toArray(iterable, ObjectArrays.newArray(type, 0));\n  }", "language": "java", "code": "@GwtIncompatible // Array.newInstance(Class, int)\n  public static <T> T[] toArray(Iterable<? extends T> iterable, Class<T> type) {\n    return toArray(iterable, ObjectArrays.newArray(type, 0));\n  }", "code_tokens": ["@", "GwtIncompatible", "// Array.newInstance(Class, int)", "public", "static", "<", "T", ">", "T", "[", "]", "toArray", "(", "Iterable", "<", "?", "extends", "T", ">", "iterable", ",", "Class", "<", "T", ">", "type", ")", "{", "return", "toArray", "(", "iterable", ",", "ObjectArrays", ".", "newArray", "(", "type", ",", "0", ")", ")", ";", "}"], "docstring": "Copies an iterable's elements into an array.\n\n@param iterable the iterable to copy\n@param type the type of the elements\n@return a newly-allocated array into which all the elements of the iterable have been copied", "docstring_tokens": ["Copies", "an", "iterable", "s", "elements", "into", "an", "array", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L316-L319", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.castOrCopyToCollection", "original_string": "private static <E> Collection<E> castOrCopyToCollection(Iterable<E> iterable) {\n    return (iterable instanceof Collection)\n        ? (Collection<E>) iterable\n        : Lists.newArrayList(iterable.iterator());\n  }", "language": "java", "code": "private static <E> Collection<E> castOrCopyToCollection(Iterable<E> iterable) {\n    return (iterable instanceof Collection)\n        ? (Collection<E>) iterable\n        : Lists.newArrayList(iterable.iterator());\n  }", "code_tokens": ["private", "static", "<", "E", ">", "Collection", "<", "E", ">", "castOrCopyToCollection", "(", "Iterable", "<", "E", ">", "iterable", ")", "{", "return", "(", "iterable", "instanceof", "Collection", ")", "?", "(", "Collection", "<", "E", ">", ")", "iterable", ":", "Lists", ".", "newArrayList", "(", "iterable", ".", "iterator", "(", ")", ")", ";", "}"], "docstring": "Converts an iterable into a collection. If the iterable is already a collection, it is\nreturned. Otherwise, an {@link java.util.ArrayList} is created with the contents of the\niterable in the same iteration order.", "docstring_tokens": ["Converts", "an", "iterable", "into", "a", "collection", ".", "If", "the", "iterable", "is", "already", "a", "collection", "it", "is", "returned", ".", "Otherwise", "an", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L341-L345", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.addAll", "original_string": "@CanIgnoreReturnValue\n  public static <T> boolean addAll(Collection<T> addTo, Iterable<? extends T> elementsToAdd) {\n    if (elementsToAdd instanceof Collection) {\n      Collection<? extends T> c = Collections2.cast(elementsToAdd);\n      return addTo.addAll(c);\n    }\n    return Iterators.addAll(addTo, checkNotNull(elementsToAdd).iterator());\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  public static <T> boolean addAll(Collection<T> addTo, Iterable<? extends T> elementsToAdd) {\n    if (elementsToAdd instanceof Collection) {\n      Collection<? extends T> c = Collections2.cast(elementsToAdd);\n      return addTo.addAll(c);\n    }\n    return Iterators.addAll(addTo, checkNotNull(elementsToAdd).iterator());\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "public", "static", "<", "T", ">", "boolean", "addAll", "(", "Collection", "<", "T", ">", "addTo", ",", "Iterable", "<", "?", "extends", "T", ">", "elementsToAdd", ")", "{", "if", "(", "elementsToAdd", "instanceof", "Collection", ")", "{", "Collection", "<", "?", "extends", "T", ">", "c", "=", "Collections2", ".", "cast", "(", "elementsToAdd", ")", ";", "return", "addTo", ".", "addAll", "(", "c", ")", ";", "}", "return", "Iterators", ".", "addAll", "(", "addTo", ",", "checkNotNull", "(", "elementsToAdd", ")", ".", "iterator", "(", ")", ")", ";", "}"], "docstring": "Adds all elements in {@code iterable} to {@code collection}.\n\n@return {@code true} if {@code collection} was modified as a result of this operation.", "docstring_tokens": ["Adds", "all", "elements", "in", "{", "@code", "iterable", "}", "to", "{", "@code", "collection", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L352-L359", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.frequency", "original_string": "public static int frequency(Iterable<?> iterable, @NullableDecl Object element) {\n    if ((iterable instanceof Multiset)) {\n      return ((Multiset<?>) iterable).count(element);\n    } else if ((iterable instanceof Set)) {\n      return ((Set<?>) iterable).contains(element) ? 1 : 0;\n    }\n    return Iterators.frequency(iterable.iterator(), element);\n  }", "language": "java", "code": "public static int frequency(Iterable<?> iterable, @NullableDecl Object element) {\n    if ((iterable instanceof Multiset)) {\n      return ((Multiset<?>) iterable).count(element);\n    } else if ((iterable instanceof Set)) {\n      return ((Set<?>) iterable).contains(element) ? 1 : 0;\n    }\n    return Iterators.frequency(iterable.iterator(), element);\n  }", "code_tokens": ["public", "static", "int", "frequency", "(", "Iterable", "<", "?", ">", "iterable", ",", "@", "NullableDecl", "Object", "element", ")", "{", "if", "(", "(", "iterable", "instanceof", "Multiset", ")", ")", "{", "return", "(", "(", "Multiset", "<", "?", ">", ")", "iterable", ")", ".", "count", "(", "element", ")", ";", "}", "else", "if", "(", "(", "iterable", "instanceof", "Set", ")", ")", "{", "return", "(", "(", "Set", "<", "?", ">", ")", "iterable", ")", ".", "contains", "(", "element", ")", "?", "1", ":", "0", ";", "}", "return", "Iterators", ".", "frequency", "(", "iterable", ".", "iterator", "(", ")", ",", "element", ")", ";", "}"], "docstring": "Returns the number of elements in the specified iterable that equal the specified object. This\nimplementation avoids a full iteration when the iterable is a {@link Multiset} or {@link Set}.\n\n<p><b>Java 8 users:</b> In most cases, the {@code Stream} equivalent of this method is {@code\nstream.filter(element::equals).count()}. If {@code element} might be null, use {@code\nstream.filter(Predicate.isEqual(element)).count()} instead.\n\n@see java.util.Collections#frequency(Collection, Object) Collections.frequency(Collection,\nObject)", "docstring_tokens": ["Returns", "the", "number", "of", "elements", "in", "the", "specified", "iterable", "that", "equal", "the", "specified", "object", ".", "This", "implementation", "avoids", "a", "full", "iteration", "when", "the", "iterable", "is", "a", "{", "@link", "Multiset", "}", "or", "{", "@link", "Set", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L372-L379", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.cycle", "original_string": "public static <T> Iterable<T> cycle(final Iterable<T> iterable) {\n    checkNotNull(iterable);\n    return new FluentIterable<T>() {\n      @Override\n      public Iterator<T> iterator() {\n        return Iterators.cycle(iterable);\n      }\n\n      @Override\n      public String toString() {\n        return iterable.toString() + \" (cycled)\";\n      }\n    };\n  }", "language": "java", "code": "public static <T> Iterable<T> cycle(final Iterable<T> iterable) {\n    checkNotNull(iterable);\n    return new FluentIterable<T>() {\n      @Override\n      public Iterator<T> iterator() {\n        return Iterators.cycle(iterable);\n      }\n\n      @Override\n      public String toString() {\n        return iterable.toString() + \" (cycled)\";\n      }\n    };\n  }", "code_tokens": ["public", "static", "<", "T", ">", "Iterable", "<", "T", ">", "cycle", "(", "final", "Iterable", "<", "T", ">", "iterable", ")", "{", "checkNotNull", "(", "iterable", ")", ";", "return", "new", "FluentIterable", "<", "T", ">", "(", ")", "{", "@", "Override", "public", "Iterator", "<", "T", ">", "iterator", "(", ")", "{", "return", "Iterators", ".", "cycle", "(", "iterable", ")", ";", "}", "@", "Override", "public", "String", "toString", "(", ")", "{", "return", "iterable", ".", "toString", "(", ")", "+", "\" (cycled)\"", ";", "}", "}", ";", "}"], "docstring": "Returns an iterable whose iterators cycle indefinitely over the elements of {@code iterable}.\n\n<p>That iterator supports {@code remove()} if {@code iterable.iterator()} does. After {@code\nremove()} is called, subsequent cycles omit the removed element, which is no longer in {@code\niterable}. The iterator's {@code hasNext()} method returns {@code true} until {@code iterable}\nis empty.\n\n<p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You\nshould use an explicit {@code break} or be certain that you will eventually remove all the\nelements.\n\n<p>To cycle over the iterable {@code n} times, use the following: {@code\nIterables.concat(Collections.nCopies(n, iterable))}\n\n<p><b>Java 8 users:</b> The {@code Stream} equivalent of this method is {@code\nStream.generate(() -> iterable).flatMap(Streams::stream)}.", "docstring_tokens": ["Returns", "an", "iterable", "whose", "iterators", "cycle", "indefinitely", "over", "the", "elements", "of", "{", "@code", "iterable", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L399-L412", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.concat", "original_string": "public static <T> Iterable<T> concat(\n      Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c) {\n    return FluentIterable.concat(a, b, c);\n  }", "language": "java", "code": "public static <T> Iterable<T> concat(\n      Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c) {\n    return FluentIterable.concat(a, b, c);\n  }", "code_tokens": ["public", "static", "<", "T", ">", "Iterable", "<", "T", ">", "concat", "(", "Iterable", "<", "?", "extends", "T", ">", "a", ",", "Iterable", "<", "?", "extends", "T", ">", "b", ",", "Iterable", "<", "?", "extends", "T", ">", "c", ")", "{", "return", "FluentIterable", ".", "concat", "(", "a", ",", "b", ",", "c", ")", ";", "}"], "docstring": "Combines three iterables into a single iterable. The returned iterable has an iterator that\ntraverses the elements in {@code a}, followed by the elements in {@code b}, followed by the\nelements in {@code c}. The source iterators are not polled until necessary.\n\n<p>The returned iterable's iterator supports {@code remove()} when the corresponding input\niterator supports it.\n\n<p><b>Java 8 users:</b> The {@code Stream} equivalent of this method is {@code\nStreams.concat(a, b, c)}.", "docstring_tokens": ["Combines", "three", "iterables", "into", "a", "single", "iterable", ".", "The", "returned", "iterable", "has", "an", "iterator", "that", "traverses", "the", "elements", "in", "{", "@code", "a", "}", "followed", "by", "the", "elements", "in", "{", "@code", "b", "}", "followed", "by", "the", "elements", "in", "{", "@code", "c", "}", ".", "The", "source", "iterators", "are", "not", "polled", "until", "necessary", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L465-L468", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.concat", "original_string": "@SafeVarargs\n  public static <T> Iterable<T> concat(Iterable<? extends T>... inputs) {\n    return FluentIterable.concat(inputs);\n  }", "language": "java", "code": "@SafeVarargs\n  public static <T> Iterable<T> concat(Iterable<? extends T>... inputs) {\n    return FluentIterable.concat(inputs);\n  }", "code_tokens": ["@", "SafeVarargs", "public", "static", "<", "T", ">", "Iterable", "<", "T", ">", "concat", "(", "Iterable", "<", "?", "extends", "T", ">", "...", "inputs", ")", "{", "return", "FluentIterable", ".", "concat", "(", "inputs", ")", ";", "}"], "docstring": "Combines multiple iterables into a single iterable. The returned iterable has an iterator that\ntraverses the elements of each iterable in {@code inputs}. The input iterators are not polled\nuntil necessary.\n\n<p>The returned iterable's iterator supports {@code remove()} when the corresponding input\niterator supports it.\n\n<p><b>Java 8 users:</b> The {@code Stream} equivalent of this method is {@code\nStreams.concat(...)}.\n\n@throws NullPointerException if any of the provided iterables is null", "docstring_tokens": ["Combines", "multiple", "iterables", "into", "a", "single", "iterable", ".", "The", "returned", "iterable", "has", "an", "iterator", "that", "traverses", "the", "elements", "of", "each", "iterable", "in", "{", "@code", "inputs", "}", ".", "The", "input", "iterators", "are", "not", "polled", "until", "necessary", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L503-L506", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.partition", "original_string": "public static <T> Iterable<List<T>> partition(final Iterable<T> iterable, final int size) {\n    checkNotNull(iterable);\n    checkArgument(size > 0);\n    return new FluentIterable<List<T>>() {\n      @Override\n      public Iterator<List<T>> iterator() {\n        return Iterators.partition(iterable.iterator(), size);\n      }\n    };\n  }", "language": "java", "code": "public static <T> Iterable<List<T>> partition(final Iterable<T> iterable, final int size) {\n    checkNotNull(iterable);\n    checkArgument(size > 0);\n    return new FluentIterable<List<T>>() {\n      @Override\n      public Iterator<List<T>> iterator() {\n        return Iterators.partition(iterable.iterator(), size);\n      }\n    };\n  }", "code_tokens": ["public", "static", "<", "T", ">", "Iterable", "<", "List", "<", "T", ">", ">", "partition", "(", "final", "Iterable", "<", "T", ">", "iterable", ",", "final", "int", "size", ")", "{", "checkNotNull", "(", "iterable", ")", ";", "checkArgument", "(", "size", ">", "0", ")", ";", "return", "new", "FluentIterable", "<", "List", "<", "T", ">", ">", "(", ")", "{", "@", "Override", "public", "Iterator", "<", "List", "<", "T", ">", ">", "iterator", "(", ")", "{", "return", "Iterators", ".", "partition", "(", "iterable", ".", "iterator", "(", ")", ",", "size", ")", ";", "}", "}", ";", "}"], "docstring": "Divides an iterable into unmodifiable sublists of the given size (the final iterable may be\nsmaller). For example, partitioning an iterable containing {@code [a, b, c, d, e]} with a\npartition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer iterable containing two\ninner lists of three and two elements, all in the original order.\n\n<p>Iterators returned by the returned iterable do not support the {@link Iterator#remove()}\nmethod. The returned lists implement {@link RandomAccess}, whether or not the input list does.\n\n<p><b>Note:</b> if {@code iterable} is a {@link List}, use {@link Lists#partition(List, int)}\ninstead.\n\n@param iterable the iterable to return a partitioned view of\n@param size the desired size of each partition (the last may be smaller)\n@return an iterable of unmodifiable lists containing the elements of {@code iterable} divided\ninto partitions\n@throws IllegalArgumentException if {@code size} is nonpositive", "docstring_tokens": ["Divides", "an", "iterable", "into", "unmodifiable", "sublists", "of", "the", "given", "size", "(", "the", "final", "iterable", "may", "be", "smaller", ")", ".", "For", "example", "partitioning", "an", "iterable", "containing", "{", "@code", "[", "a", "b", "c", "d", "e", "]", "}", "with", "a", "partition", "size", "of", "3", "yields", "{", "@code", "[[", "a", "b", "c", "]", "[", "d", "e", "]]", "}", "--", "an", "outer", "iterable", "containing", "two", "inner", "lists", "of", "three", "and", "two", "elements", "all", "in", "the", "original", "order", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L542-L551", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.filter", "original_string": "@SuppressWarnings(\"unchecked\")\n  @GwtIncompatible // Class.isInstance\n  public static <T> Iterable<T> filter(final Iterable<?> unfiltered, final Class<T> desiredType) {\n    checkNotNull(unfiltered);\n    checkNotNull(desiredType);\n    return (Iterable<T>) filter(unfiltered, Predicates.instanceOf(desiredType));\n  }", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n  @GwtIncompatible // Class.isInstance\n  public static <T> Iterable<T> filter(final Iterable<?> unfiltered, final Class<T> desiredType) {\n    checkNotNull(unfiltered);\n    checkNotNull(desiredType);\n    return (Iterable<T>) filter(unfiltered, Predicates.instanceOf(desiredType));\n  }", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "@", "GwtIncompatible", "// Class.isInstance", "public", "static", "<", "T", ">", "Iterable", "<", "T", ">", "filter", "(", "final", "Iterable", "<", "?", ">", "unfiltered", ",", "final", "Class", "<", "T", ">", "desiredType", ")", "{", "checkNotNull", "(", "unfiltered", ")", ";", "checkNotNull", "(", "desiredType", ")", ";", "return", "(", "Iterable", "<", "T", ">", ")", "filter", "(", "unfiltered", ",", "Predicates", ".", "instanceOf", "(", "desiredType", ")", ")", ";", "}"], "docstring": "Returns a view of {@code unfiltered} containing all elements that are of the type {@code\ndesiredType}. The returned iterable's iterator does not support {@code remove()}.\n\n<p><b>{@code Stream} equivalent:</b> {@code stream.filter(type::isInstance).map(type::cast)}.\nThis does perform a little more work than necessary, so another option is to insert an\nunchecked cast at some later point:\n\n<pre>\n{@code @SuppressWarnings(\"unchecked\") // safe because of ::isInstance check\nImmutableList<NewType> result =\n(ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());}\n</pre>", "docstring_tokens": ["Returns", "a", "view", "of", "{", "@code", "unfiltered", "}", "containing", "all", "elements", "that", "are", "of", "the", "type", "{", "@code", "desiredType", "}", ".", "The", "returned", "iterable", "s", "iterator", "does", "not", "support", "{", "@code", "remove", "()", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L611-L617", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.any", "original_string": "public static <T> boolean any(Iterable<T> iterable, Predicate<? super T> predicate) {\n    return Iterators.any(iterable.iterator(), predicate);\n  }", "language": "java", "code": "public static <T> boolean any(Iterable<T> iterable, Predicate<? super T> predicate) {\n    return Iterators.any(iterable.iterator(), predicate);\n  }", "code_tokens": ["public", "static", "<", "T", ">", "boolean", "any", "(", "Iterable", "<", "T", ">", "iterable", ",", "Predicate", "<", "?", "super", "T", ">", "predicate", ")", "{", "return", "Iterators", ".", "any", "(", "iterable", ".", "iterator", "(", ")", ",", "predicate", ")", ";", "}"], "docstring": "Returns {@code true} if any element in {@code iterable} satisfies the predicate.\n\n<p><b>{@code Stream} equivalent:</b> {@link Stream#anyMatch}.", "docstring_tokens": ["Returns", "{", "@code", "true", "}", "if", "any", "element", "in", "{", "@code", "iterable", "}", "satisfies", "the", "predicate", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L624-L626", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.all", "original_string": "public static <T> boolean all(Iterable<T> iterable, Predicate<? super T> predicate) {\n    return Iterators.all(iterable.iterator(), predicate);\n  }", "language": "java", "code": "public static <T> boolean all(Iterable<T> iterable, Predicate<? super T> predicate) {\n    return Iterators.all(iterable.iterator(), predicate);\n  }", "code_tokens": ["public", "static", "<", "T", ">", "boolean", "all", "(", "Iterable", "<", "T", ">", "iterable", ",", "Predicate", "<", "?", "super", "T", ">", "predicate", ")", "{", "return", "Iterators", ".", "all", "(", "iterable", ".", "iterator", "(", ")", ",", "predicate", ")", ";", "}"], "docstring": "Returns {@code true} if every element in {@code iterable} satisfies the predicate. If {@code\niterable} is empty, {@code true} is returned.\n\n<p><b>{@code Stream} equivalent:</b> {@link Stream#allMatch}.", "docstring_tokens": ["Returns", "{", "@code", "true", "}", "if", "every", "element", "in", "{", "@code", "iterable", "}", "satisfies", "the", "predicate", ".", "If", "{", "@code", "iterable", "}", "is", "empty", "{", "@code", "true", "}", "is", "returned", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L634-L636", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.tryFind", "original_string": "public static <T> Optional<T> tryFind(Iterable<T> iterable, Predicate<? super T> predicate) {\n    return Iterators.tryFind(iterable.iterator(), predicate);\n  }", "language": "java", "code": "public static <T> Optional<T> tryFind(Iterable<T> iterable, Predicate<? super T> predicate) {\n    return Iterators.tryFind(iterable.iterator(), predicate);\n  }", "code_tokens": ["public", "static", "<", "T", ">", "Optional", "<", "T", ">", "tryFind", "(", "Iterable", "<", "T", ">", "iterable", ",", "Predicate", "<", "?", "super", "T", ">", "predicate", ")", "{", "return", "Iterators", ".", "tryFind", "(", "iterable", ".", "iterator", "(", ")", ",", "predicate", ")", ";", "}"], "docstring": "Returns an {@link Optional} containing the first element in {@code iterable} that satisfies the\ngiven predicate, if such an element exists.\n\n<p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}\nis matched in {@code iterable}, a NullPointerException will be thrown.\n\n<p><b>{@code Stream} equivalent:</b> {@code stream.filter(predicate).findFirst()}\n\n@since 11.0", "docstring_tokens": ["Returns", "an", "{", "@link", "Optional", "}", "containing", "the", "first", "element", "in", "{", "@code", "iterable", "}", "that", "satisfies", "the", "given", "predicate", "if", "such", "an", "element", "exists", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L680-L682", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.indexOf", "original_string": "public static <T> int indexOf(Iterable<T> iterable, Predicate<? super T> predicate) {\n    return Iterators.indexOf(iterable.iterator(), predicate);\n  }", "language": "java", "code": "public static <T> int indexOf(Iterable<T> iterable, Predicate<? super T> predicate) {\n    return Iterators.indexOf(iterable.iterator(), predicate);\n  }", "code_tokens": ["public", "static", "<", "T", ">", "int", "indexOf", "(", "Iterable", "<", "T", ">", "iterable", ",", "Predicate", "<", "?", "super", "T", ">", "predicate", ")", "{", "return", "Iterators", ".", "indexOf", "(", "iterable", ".", "iterator", "(", ")", ",", "predicate", ")", ";", "}"], "docstring": "Returns the index in {@code iterable} of the first element that satisfies the provided {@code\npredicate}, or {@code -1} if the Iterable has no such elements.\n\n<p>More formally, returns the lowest index {@code i} such that {@code\npredicate.apply(Iterables.get(iterable, i))} returns {@code true}, or {@code -1} if there is no\nsuch index.\n\n@since 2.0", "docstring_tokens": ["Returns", "the", "index", "in", "{", "@code", "iterable", "}", "of", "the", "first", "element", "that", "satisfies", "the", "provided", "{", "@code", "predicate", "}", "or", "{", "@code", "-", "1", "}", "if", "the", "Iterable", "has", "no", "such", "elements", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L694-L696", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.get", "original_string": "public static <T> T get(Iterable<T> iterable, int position) {\n    checkNotNull(iterable);\n    return (iterable instanceof List)\n        ? ((List<T>) iterable).get(position)\n        : Iterators.get(iterable.iterator(), position);\n  }", "language": "java", "code": "public static <T> T get(Iterable<T> iterable, int position) {\n    checkNotNull(iterable);\n    return (iterable instanceof List)\n        ? ((List<T>) iterable).get(position)\n        : Iterators.get(iterable.iterator(), position);\n  }", "code_tokens": ["public", "static", "<", "T", ">", "T", "get", "(", "Iterable", "<", "T", ">", "iterable", ",", "int", "position", ")", "{", "checkNotNull", "(", "iterable", ")", ";", "return", "(", "iterable", "instanceof", "List", ")", "?", "(", "(", "List", "<", "T", ">", ")", "iterable", ")", ".", "get", "(", "position", ")", ":", "Iterators", ".", "get", "(", "iterable", ".", "iterator", "(", ")", ",", "position", ")", ";", "}"], "docstring": "Returns the element at the specified position in an iterable.\n\n<p><b>{@code Stream} equivalent:</b> {@code stream.skip(position).findFirst().get()} (throws\n{@code NoSuchElementException} if out of bounds)\n\n@param position position of the element to return\n@return the element at the specified position in {@code iterable}\n@throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to\nthe size of {@code iterable}", "docstring_tokens": ["Returns", "the", "element", "at", "the", "specified", "position", "in", "an", "iterable", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L734-L739", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.get", "original_string": "@NullableDecl\n  public static <T> T get(\n      Iterable<? extends T> iterable, int position, @NullableDecl T defaultValue) {\n    checkNotNull(iterable);\n    Iterators.checkNonnegative(position);\n    if (iterable instanceof List) {\n      List<? extends T> list = Lists.cast(iterable);\n      return (position < list.size()) ? list.get(position) : defaultValue;\n    } else {\n      Iterator<? extends T> iterator = iterable.iterator();\n      Iterators.advance(iterator, position);\n      return Iterators.getNext(iterator, defaultValue);\n    }\n  }", "language": "java", "code": "@NullableDecl\n  public static <T> T get(\n      Iterable<? extends T> iterable, int position, @NullableDecl T defaultValue) {\n    checkNotNull(iterable);\n    Iterators.checkNonnegative(position);\n    if (iterable instanceof List) {\n      List<? extends T> list = Lists.cast(iterable);\n      return (position < list.size()) ? list.get(position) : defaultValue;\n    } else {\n      Iterator<? extends T> iterator = iterable.iterator();\n      Iterators.advance(iterator, position);\n      return Iterators.getNext(iterator, defaultValue);\n    }\n  }", "code_tokens": ["@", "NullableDecl", "public", "static", "<", "T", ">", "T", "get", "(", "Iterable", "<", "?", "extends", "T", ">", "iterable", ",", "int", "position", ",", "@", "NullableDecl", "T", "defaultValue", ")", "{", "checkNotNull", "(", "iterable", ")", ";", "Iterators", ".", "checkNonnegative", "(", "position", ")", ";", "if", "(", "iterable", "instanceof", "List", ")", "{", "List", "<", "?", "extends", "T", ">", "list", "=", "Lists", ".", "cast", "(", "iterable", ")", ";", "return", "(", "position", "<", "list", ".", "size", "(", ")", ")", "?", "list", ".", "get", "(", "position", ")", ":", "defaultValue", ";", "}", "else", "{", "Iterator", "<", "?", "extends", "T", ">", "iterator", "=", "iterable", ".", "iterator", "(", ")", ";", "Iterators", ".", "advance", "(", "iterator", ",", "position", ")", ";", "return", "Iterators", ".", "getNext", "(", "iterator", ",", "defaultValue", ")", ";", "}", "}"], "docstring": "Returns the element at the specified position in an iterable or a default value otherwise.\n\n<p><b>{@code Stream} equivalent:</b> {@code\nstream.skip(position).findFirst().orElse(defaultValue)} (returns the default value if the index\nis out of bounds)\n\n@param position position of the element to return\n@param defaultValue the default value to return if {@code position} is greater than or equal to\nthe size of the iterable\n@return the element at the specified position in {@code iterable} or {@code defaultValue} if\n{@code iterable} contains fewer than {@code position + 1} elements.\n@throws IndexOutOfBoundsException if {@code position} is negative\n@since 4.0", "docstring_tokens": ["Returns", "the", "element", "at", "the", "specified", "position", "in", "an", "iterable", "or", "a", "default", "value", "otherwise", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L756-L769", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.getFirst", "original_string": "@NullableDecl\n  public static <T> T getFirst(Iterable<? extends T> iterable, @NullableDecl T defaultValue) {\n    return Iterators.getNext(iterable.iterator(), defaultValue);\n  }", "language": "java", "code": "@NullableDecl\n  public static <T> T getFirst(Iterable<? extends T> iterable, @NullableDecl T defaultValue) {\n    return Iterators.getNext(iterable.iterator(), defaultValue);\n  }", "code_tokens": ["@", "NullableDecl", "public", "static", "<", "T", ">", "T", "getFirst", "(", "Iterable", "<", "?", "extends", "T", ">", "iterable", ",", "@", "NullableDecl", "T", "defaultValue", ")", "{", "return", "Iterators", ".", "getNext", "(", "iterable", ".", "iterator", "(", ")", ",", "defaultValue", ")", ";", "}"], "docstring": "Returns the first element in {@code iterable} or {@code defaultValue} if the iterable is empty.\nThe {@link Iterators} analog to this method is {@link Iterators#getNext}.\n\n<p>If no default value is desired (and the caller instead wants a {@link\nNoSuchElementException} to be thrown), it is recommended that {@code\niterable.iterator().next()} is used instead.\n\n<p>To get the only element in a single-element {@code Iterable}, consider using {@link\n#getOnlyElement(Iterable)} or {@link #getOnlyElement(Iterable, Object)} instead.\n\n<p><b>{@code Stream} equivalent:</b> {@code stream.findFirst().orElse(defaultValue)}\n\n@param defaultValue the default value to return if the iterable is empty\n@return the first element of {@code iterable} or the default value\n@since 7.0", "docstring_tokens": ["Returns", "the", "first", "element", "in", "{", "@code", "iterable", "}", "or", "{", "@code", "defaultValue", "}", "if", "the", "iterable", "is", "empty", ".", "The", "{", "@link", "Iterators", "}", "analog", "to", "this", "method", "is", "{", "@link", "Iterators#getNext", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L788-L791", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.getLast", "original_string": "public static <T> T getLast(Iterable<T> iterable) {\n    // TODO(kevinb): Support a concurrently modified collection?\n    if (iterable instanceof List) {\n      List<T> list = (List<T>) iterable;\n      if (list.isEmpty()) {\n        throw new NoSuchElementException();\n      }\n      return getLastInNonemptyList(list);\n    }\n\n    return Iterators.getLast(iterable.iterator());\n  }", "language": "java", "code": "public static <T> T getLast(Iterable<T> iterable) {\n    // TODO(kevinb): Support a concurrently modified collection?\n    if (iterable instanceof List) {\n      List<T> list = (List<T>) iterable;\n      if (list.isEmpty()) {\n        throw new NoSuchElementException();\n      }\n      return getLastInNonemptyList(list);\n    }\n\n    return Iterators.getLast(iterable.iterator());\n  }", "code_tokens": ["public", "static", "<", "T", ">", "T", "getLast", "(", "Iterable", "<", "T", ">", "iterable", ")", "{", "// TODO(kevinb): Support a concurrently modified collection?", "if", "(", "iterable", "instanceof", "List", ")", "{", "List", "<", "T", ">", "list", "=", "(", "List", "<", "T", ">", ")", "iterable", ";", "if", "(", "list", ".", "isEmpty", "(", ")", ")", "{", "throw", "new", "NoSuchElementException", "(", ")", ";", "}", "return", "getLastInNonemptyList", "(", "list", ")", ";", "}", "return", "Iterators", ".", "getLast", "(", "iterable", ".", "iterator", "(", ")", ")", ";", "}"], "docstring": "Returns the last element of {@code iterable}. If {@code iterable} is a {@link List} with {@link\nRandomAccess} support, then this operation is guaranteed to be {@code O(1)}.\n\n<p><b>{@code Stream} equivalent:</b> {@link Streams#findLast Streams.findLast(stream).get()}\n\n@return the last element of {@code iterable}\n@throws NoSuchElementException if the iterable is empty", "docstring_tokens": ["Returns", "the", "last", "element", "of", "{", "@code", "iterable", "}", ".", "If", "{", "@code", "iterable", "}", "is", "a", "{", "@link", "List", "}", "with", "{", "@link", "RandomAccess", "}", "support", "then", "this", "operation", "is", "guaranteed", "to", "be", "{", "@code", "O", "(", "1", ")", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L802-L813", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.isEmpty", "original_string": "public static boolean isEmpty(Iterable<?> iterable) {\n    if (iterable instanceof Collection) {\n      return ((Collection<?>) iterable).isEmpty();\n    }\n    return !iterable.iterator().hasNext();\n  }", "language": "java", "code": "public static boolean isEmpty(Iterable<?> iterable) {\n    if (iterable instanceof Collection) {\n      return ((Collection<?>) iterable).isEmpty();\n    }\n    return !iterable.iterator().hasNext();\n  }", "code_tokens": ["public", "static", "boolean", "isEmpty", "(", "Iterable", "<", "?", ">", "iterable", ")", "{", "if", "(", "iterable", "instanceof", "Collection", ")", "{", "return", "(", "(", "Collection", "<", "?", ">", ")", "iterable", ")", ".", "isEmpty", "(", ")", ";", "}", "return", "!", "iterable", ".", "iterator", "(", ")", ".", "hasNext", "(", ")", ";", "}"], "docstring": "Determines if the given iterable contains no elements.\n\n<p>There is no precise {@link Iterator} equivalent to this method, since one can only ask an\niterator whether it has any elements <i>remaining</i> (which one does using {@link\nIterator#hasNext}).\n\n<p><b>{@code Stream} equivalent:</b> {@code !stream.findAny().isPresent()}\n\n@return {@code true} if the iterable contains no elements", "docstring_tokens": ["Determines", "if", "the", "given", "iterable", "contains", "no", "elements", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L980-L985", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.mergeSorted", "original_string": "@Beta\n  public static <T> Iterable<T> mergeSorted(\n      final Iterable<? extends Iterable<? extends T>> iterables,\n      final Comparator<? super T> comparator) {\n    checkNotNull(iterables, \"iterables\");\n    checkNotNull(comparator, \"comparator\");\n    Iterable<T> iterable =\n        new FluentIterable<T>() {\n          @Override\n          public Iterator<T> iterator() {\n            return Iterators.mergeSorted(\n                Iterables.transform(iterables, Iterables.<T>toIterator()), comparator);\n          }\n        };\n    return new UnmodifiableIterable<>(iterable);\n  }", "language": "java", "code": "@Beta\n  public static <T> Iterable<T> mergeSorted(\n      final Iterable<? extends Iterable<? extends T>> iterables,\n      final Comparator<? super T> comparator) {\n    checkNotNull(iterables, \"iterables\");\n    checkNotNull(comparator, \"comparator\");\n    Iterable<T> iterable =\n        new FluentIterable<T>() {\n          @Override\n          public Iterator<T> iterator() {\n            return Iterators.mergeSorted(\n                Iterables.transform(iterables, Iterables.<T>toIterator()), comparator);\n          }\n        };\n    return new UnmodifiableIterable<>(iterable);\n  }", "code_tokens": ["@", "Beta", "public", "static", "<", "T", ">", "Iterable", "<", "T", ">", "mergeSorted", "(", "final", "Iterable", "<", "?", "extends", "Iterable", "<", "?", "extends", "T", ">", ">", "iterables", ",", "final", "Comparator", "<", "?", "super", "T", ">", "comparator", ")", "{", "checkNotNull", "(", "iterables", ",", "\"iterables\"", ")", ";", "checkNotNull", "(", "comparator", ",", "\"comparator\"", ")", ";", "Iterable", "<", "T", ">", "iterable", "=", "new", "FluentIterable", "<", "T", ">", "(", ")", "{", "@", "Override", "public", "Iterator", "<", "T", ">", "iterator", "(", ")", "{", "return", "Iterators", ".", "mergeSorted", "(", "Iterables", ".", "transform", "(", "iterables", ",", "Iterables", ".", "<", "T", ">", "toIterator", "(", ")", ")", ",", "comparator", ")", ";", "}", "}", ";", "return", "new", "UnmodifiableIterable", "<>", "(", "iterable", ")", ";", "}"], "docstring": "Returns an iterable over the merged contents of all given {@code iterables}. Equivalent entries\nwill not be de-duplicated.\n\n<p>Callers must ensure that the source {@code iterables} are in non-descending order as this\nmethod does not sort its input.\n\n<p>For any equivalent elements across all {@code iterables}, it is undefined which element is\nreturned first.\n\n@since 11.0", "docstring_tokens": ["Returns", "an", "iterable", "over", "the", "merged", "contents", "of", "all", "given", "{", "@code", "iterables", "}", ".", "Equivalent", "entries", "will", "not", "be", "de", "-", "duplicated", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L999-L1014", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterables.java", "func_name": "Iterables.toIterator", "original_string": "static <T> Function<Iterable<? extends T>, Iterator<? extends T>> toIterator() {\n    return new Function<Iterable<? extends T>, Iterator<? extends T>>() {\n      @Override\n      public Iterator<? extends T> apply(Iterable<? extends T> iterable) {\n        return iterable.iterator();\n      }\n    };\n  }", "language": "java", "code": "static <T> Function<Iterable<? extends T>, Iterator<? extends T>> toIterator() {\n    return new Function<Iterable<? extends T>, Iterator<? extends T>>() {\n      @Override\n      public Iterator<? extends T> apply(Iterable<? extends T> iterable) {\n        return iterable.iterator();\n      }\n    };\n  }", "code_tokens": ["static", "<", "T", ">", "Function", "<", "Iterable", "<", "?", "extends", "T", ">", ",", "Iterator", "<", "?", "extends", "T", ">", ">", "toIterator", "(", ")", "{", "return", "new", "Function", "<", "Iterable", "<", "?", "extends", "T", ">", ",", "Iterator", "<", "?", "extends", "T", ">", ">", "(", ")", "{", "@", "Override", "public", "Iterator", "<", "?", "extends", "T", ">", "apply", "(", "Iterable", "<", "?", "extends", "T", ">", "iterable", ")", "{", "return", "iterable", ".", "iterator", "(", ")", ";", "}", "}", ";", "}"], "docstring": "Useful as a public method?", "docstring_tokens": ["Useful", "as", "a", "public", "method?"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterables.java#L1018-L1025", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.unmodifiableIterator", "original_string": "@Deprecated\n  public static <T> UnmodifiableIterator<T> unmodifiableIterator(UnmodifiableIterator<T> iterator) {\n    return checkNotNull(iterator);\n  }", "language": "java", "code": "@Deprecated\n  public static <T> UnmodifiableIterator<T> unmodifiableIterator(UnmodifiableIterator<T> iterator) {\n    return checkNotNull(iterator);\n  }", "code_tokens": ["@", "Deprecated", "public", "static", "<", "T", ">", "UnmodifiableIterator", "<", "T", ">", "unmodifiableIterator", "(", "UnmodifiableIterator", "<", "T", ">", "iterator", ")", "{", "return", "checkNotNull", "(", "iterator", ")", ";", "}"], "docstring": "Simply returns its argument.\n\n@deprecated no need to use this\n@since 10.0", "docstring_tokens": ["Simply", "returns", "its", "argument", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L152-L155", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.size", "original_string": "public static int size(Iterator<?> iterator) {\n    long count = 0L;\n    while (iterator.hasNext()) {\n      iterator.next();\n      count++;\n    }\n    return Ints.saturatedCast(count);\n  }", "language": "java", "code": "public static int size(Iterator<?> iterator) {\n    long count = 0L;\n    while (iterator.hasNext()) {\n      iterator.next();\n      count++;\n    }\n    return Ints.saturatedCast(count);\n  }", "code_tokens": ["public", "static", "int", "size", "(", "Iterator", "<", "?", ">", "iterator", ")", "{", "long", "count", "=", "0L", ";", "while", "(", "iterator", ".", "hasNext", "(", ")", ")", "{", "iterator", ".", "next", "(", ")", ";", "count", "++", ";", "}", "return", "Ints", ".", "saturatedCast", "(", "count", ")", ";", "}"], "docstring": "Returns the number of elements remaining in {@code iterator}. The iterator will be left\nexhausted: its {@code hasNext()} method will return {@code false}.", "docstring_tokens": ["Returns", "the", "number", "of", "elements", "remaining", "in", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L161-L168", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.contains", "original_string": "public static boolean contains(Iterator<?> iterator, @NullableDecl Object element) {\n    if (element == null) {\n      while (iterator.hasNext()) {\n        if (iterator.next() == null) {\n          return true;\n        }\n      }\n    } else {\n      while (iterator.hasNext()) {\n        if (element.equals(iterator.next())) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }", "language": "java", "code": "public static boolean contains(Iterator<?> iterator, @NullableDecl Object element) {\n    if (element == null) {\n      while (iterator.hasNext()) {\n        if (iterator.next() == null) {\n          return true;\n        }\n      }\n    } else {\n      while (iterator.hasNext()) {\n        if (element.equals(iterator.next())) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }", "code_tokens": ["public", "static", "boolean", "contains", "(", "Iterator", "<", "?", ">", "iterator", ",", "@", "NullableDecl", "Object", "element", ")", "{", "if", "(", "element", "==", "null", ")", "{", "while", "(", "iterator", ".", "hasNext", "(", ")", ")", "{", "if", "(", "iterator", ".", "next", "(", ")", "==", "null", ")", "{", "return", "true", ";", "}", "}", "}", "else", "{", "while", "(", "iterator", ".", "hasNext", "(", ")", ")", "{", "if", "(", "element", ".", "equals", "(", "iterator", ".", "next", "(", ")", ")", ")", "{", "return", "true", ";", "}", "}", "}", "return", "false", ";", "}"], "docstring": "Returns {@code true} if {@code iterator} contains {@code element}.", "docstring_tokens": ["Returns", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L171-L186", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.removeAll", "original_string": "@CanIgnoreReturnValue\n  public static boolean removeAll(Iterator<?> removeFrom, Collection<?> elementsToRemove) {\n    checkNotNull(elementsToRemove);\n    boolean result = false;\n    while (removeFrom.hasNext()) {\n      if (elementsToRemove.contains(removeFrom.next())) {\n        removeFrom.remove();\n        result = true;\n      }\n    }\n    return result;\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  public static boolean removeAll(Iterator<?> removeFrom, Collection<?> elementsToRemove) {\n    checkNotNull(elementsToRemove);\n    boolean result = false;\n    while (removeFrom.hasNext()) {\n      if (elementsToRemove.contains(removeFrom.next())) {\n        removeFrom.remove();\n        result = true;\n      }\n    }\n    return result;\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "public", "static", "boolean", "removeAll", "(", "Iterator", "<", "?", ">", "removeFrom", ",", "Collection", "<", "?", ">", "elementsToRemove", ")", "{", "checkNotNull", "(", "elementsToRemove", ")", ";", "boolean", "result", "=", "false", ";", "while", "(", "removeFrom", ".", "hasNext", "(", ")", ")", "{", "if", "(", "elementsToRemove", ".", "contains", "(", "removeFrom", ".", "next", "(", ")", ")", ")", "{", "removeFrom", ".", "remove", "(", ")", ";", "result", "=", "true", ";", "}", "}", "return", "result", ";", "}"], "docstring": "Traverses an iterator and removes every element that belongs to the provided collection. The\niterator will be left exhausted: its {@code hasNext()} method will return {@code false}.\n\n@param removeFrom the iterator to (potentially) remove elements from\n@param elementsToRemove the elements to remove\n@return {@code true} if any element was removed from {@code iterator}", "docstring_tokens": ["Traverses", "an", "iterator", "and", "removes", "every", "element", "that", "belongs", "to", "the", "provided", "collection", ".", "The", "iterator", "will", "be", "left", "exhausted", ":", "its", "{", "@code", "hasNext", "()", "}", "method", "will", "return", "{", "@code", "false", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L196-L207", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.removeIf", "original_string": "@CanIgnoreReturnValue\n  public static <T> boolean removeIf(Iterator<T> removeFrom, Predicate<? super T> predicate) {\n    checkNotNull(predicate);\n    boolean modified = false;\n    while (removeFrom.hasNext()) {\n      if (predicate.apply(removeFrom.next())) {\n        removeFrom.remove();\n        modified = true;\n      }\n    }\n    return modified;\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  public static <T> boolean removeIf(Iterator<T> removeFrom, Predicate<? super T> predicate) {\n    checkNotNull(predicate);\n    boolean modified = false;\n    while (removeFrom.hasNext()) {\n      if (predicate.apply(removeFrom.next())) {\n        removeFrom.remove();\n        modified = true;\n      }\n    }\n    return modified;\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "public", "static", "<", "T", ">", "boolean", "removeIf", "(", "Iterator", "<", "T", ">", "removeFrom", ",", "Predicate", "<", "?", "super", "T", ">", "predicate", ")", "{", "checkNotNull", "(", "predicate", ")", ";", "boolean", "modified", "=", "false", ";", "while", "(", "removeFrom", ".", "hasNext", "(", ")", ")", "{", "if", "(", "predicate", ".", "apply", "(", "removeFrom", ".", "next", "(", ")", ")", ")", "{", "removeFrom", ".", "remove", "(", ")", ";", "modified", "=", "true", ";", "}", "}", "return", "modified", ";", "}"], "docstring": "Removes every element that satisfies the provided predicate from the iterator. The iterator\nwill be left exhausted: its {@code hasNext()} method will return {@code false}.\n\n@param removeFrom the iterator to (potentially) remove elements from\n@param predicate a predicate that determines whether an element should be removed\n@return {@code true} if any elements were removed from the iterator\n@since 2.0", "docstring_tokens": ["Removes", "every", "element", "that", "satisfies", "the", "provided", "predicate", "from", "the", "iterator", ".", "The", "iterator", "will", "be", "left", "exhausted", ":", "its", "{", "@code", "hasNext", "()", "}", "method", "will", "return", "{", "@code", "false", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L218-L229", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.retainAll", "original_string": "@CanIgnoreReturnValue\n  public static boolean retainAll(Iterator<?> removeFrom, Collection<?> elementsToRetain) {\n    checkNotNull(elementsToRetain);\n    boolean result = false;\n    while (removeFrom.hasNext()) {\n      if (!elementsToRetain.contains(removeFrom.next())) {\n        removeFrom.remove();\n        result = true;\n      }\n    }\n    return result;\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  public static boolean retainAll(Iterator<?> removeFrom, Collection<?> elementsToRetain) {\n    checkNotNull(elementsToRetain);\n    boolean result = false;\n    while (removeFrom.hasNext()) {\n      if (!elementsToRetain.contains(removeFrom.next())) {\n        removeFrom.remove();\n        result = true;\n      }\n    }\n    return result;\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "public", "static", "boolean", "retainAll", "(", "Iterator", "<", "?", ">", "removeFrom", ",", "Collection", "<", "?", ">", "elementsToRetain", ")", "{", "checkNotNull", "(", "elementsToRetain", ")", ";", "boolean", "result", "=", "false", ";", "while", "(", "removeFrom", ".", "hasNext", "(", ")", ")", "{", "if", "(", "!", "elementsToRetain", ".", "contains", "(", "removeFrom", ".", "next", "(", ")", ")", ")", "{", "removeFrom", ".", "remove", "(", ")", ";", "result", "=", "true", ";", "}", "}", "return", "result", ";", "}"], "docstring": "Traverses an iterator and removes every element that does not belong to the provided\ncollection. The iterator will be left exhausted: its {@code hasNext()} method will return\n{@code false}.\n\n@param removeFrom the iterator to (potentially) remove elements from\n@param elementsToRetain the elements to retain\n@return {@code true} if any element was removed from {@code iterator}", "docstring_tokens": ["Traverses", "an", "iterator", "and", "removes", "every", "element", "that", "does", "not", "belong", "to", "the", "provided", "collection", ".", "The", "iterator", "will", "be", "left", "exhausted", ":", "its", "{", "@code", "hasNext", "()", "}", "method", "will", "return", "{", "@code", "false", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L240-L251", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.elementsEqual", "original_string": "public static boolean elementsEqual(Iterator<?> iterator1, Iterator<?> iterator2) {\n    while (iterator1.hasNext()) {\n      if (!iterator2.hasNext()) {\n        return false;\n      }\n      Object o1 = iterator1.next();\n      Object o2 = iterator2.next();\n      if (!Objects.equal(o1, o2)) {\n        return false;\n      }\n    }\n    return !iterator2.hasNext();\n  }", "language": "java", "code": "public static boolean elementsEqual(Iterator<?> iterator1, Iterator<?> iterator2) {\n    while (iterator1.hasNext()) {\n      if (!iterator2.hasNext()) {\n        return false;\n      }\n      Object o1 = iterator1.next();\n      Object o2 = iterator2.next();\n      if (!Objects.equal(o1, o2)) {\n        return false;\n      }\n    }\n    return !iterator2.hasNext();\n  }", "code_tokens": ["public", "static", "boolean", "elementsEqual", "(", "Iterator", "<", "?", ">", "iterator1", ",", "Iterator", "<", "?", ">", "iterator2", ")", "{", "while", "(", "iterator1", ".", "hasNext", "(", ")", ")", "{", "if", "(", "!", "iterator2", ".", "hasNext", "(", ")", ")", "{", "return", "false", ";", "}", "Object", "o1", "=", "iterator1", ".", "next", "(", ")", ";", "Object", "o2", "=", "iterator2", ".", "next", "(", ")", ";", "if", "(", "!", "Objects", ".", "equal", "(", "o1", ",", "o2", ")", ")", "{", "return", "false", ";", "}", "}", "return", "!", "iterator2", ".", "hasNext", "(", ")", ";", "}"], "docstring": "Determines whether two iterators contain equal elements in the same order. More specifically,\nthis method returns {@code true} if {@code iterator1} and {@code iterator2} contain the same\nnumber of elements and every element of {@code iterator1} is equal to the corresponding element\nof {@code iterator2}.\n\n<p>Note that this will modify the supplied iterators, since they will have been advanced some\nnumber of elements forward.", "docstring_tokens": ["Determines", "whether", "two", "iterators", "contain", "equal", "elements", "in", "the", "same", "order", ".", "More", "specifically", "this", "method", "returns", "{", "@code", "true", "}", "if", "{", "@code", "iterator1", "}", "and", "{", "@code", "iterator2", "}", "contain", "the", "same", "number", "of", "elements", "and", "every", "element", "of", "{", "@code", "iterator1", "}", "is", "equal", "to", "the", "corresponding", "element", "of", "{", "@code", "iterator2", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L262-L274", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.getOnlyElement", "original_string": "@NullableDecl\n  public static <T> T getOnlyElement(Iterator<? extends T> iterator, @NullableDecl T defaultValue) {\n    return iterator.hasNext() ? getOnlyElement(iterator) : defaultValue;\n  }", "language": "java", "code": "@NullableDecl\n  public static <T> T getOnlyElement(Iterator<? extends T> iterator, @NullableDecl T defaultValue) {\n    return iterator.hasNext() ? getOnlyElement(iterator) : defaultValue;\n  }", "code_tokens": ["@", "NullableDecl", "public", "static", "<", "T", ">", "T", "getOnlyElement", "(", "Iterator", "<", "?", "extends", "T", ">", "iterator", ",", "@", "NullableDecl", "T", "defaultValue", ")", "{", "return", "iterator", ".", "hasNext", "(", ")", "?", "getOnlyElement", "(", "iterator", ")", ":", "defaultValue", ";", "}"], "docstring": "Returns the single element contained in {@code iterator}, or {@code defaultValue} if the\niterator is empty.\n\n@throws IllegalArgumentException if the iterator contains multiple elements. The state of the\niterator is unspecified.", "docstring_tokens": ["Returns", "the", "single", "element", "contained", "in", "{", "@code", "iterator", "}", "or", "{", "@code", "defaultValue", "}", "if", "the", "iterator", "is", "empty", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L325-L328", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.toArray", "original_string": "@GwtIncompatible // Array.newInstance(Class, int)\n  public static <T> T[] toArray(Iterator<? extends T> iterator, Class<T> type) {\n    List<T> list = Lists.newArrayList(iterator);\n    return Iterables.toArray(list, type);\n  }", "language": "java", "code": "@GwtIncompatible // Array.newInstance(Class, int)\n  public static <T> T[] toArray(Iterator<? extends T> iterator, Class<T> type) {\n    List<T> list = Lists.newArrayList(iterator);\n    return Iterables.toArray(list, type);\n  }", "code_tokens": ["@", "GwtIncompatible", "// Array.newInstance(Class, int)", "public", "static", "<", "T", ">", "T", "[", "]", "toArray", "(", "Iterator", "<", "?", "extends", "T", ">", "iterator", ",", "Class", "<", "T", ">", "type", ")", "{", "List", "<", "T", ">", "list", "=", "Lists", ".", "newArrayList", "(", "iterator", ")", ";", "return", "Iterables", ".", "toArray", "(", "list", ",", "type", ")", ";", "}"], "docstring": "Copies an iterator's elements into an array. The iterator will be left exhausted: its {@code\nhasNext()} method will return {@code false}.\n\n@param iterator the iterator to copy\n@param type the type of the elements\n@return a newly-allocated array into which all the elements of the iterator have been copied", "docstring_tokens": ["Copies", "an", "iterator", "s", "elements", "into", "an", "array", ".", "The", "iterator", "will", "be", "left", "exhausted", ":", "its", "{", "@code", "hasNext", "()", "}", "method", "will", "return", "{", "@code", "false", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L338-L342", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.frequency", "original_string": "public static int frequency(Iterator<?> iterator, @NullableDecl Object element) {\n    int count = 0;\n    while (contains(iterator, element)) {\n      // Since it lives in the same class, we know contains gets to the element and then stops,\n      // though that isn't currently publicly documented.\n      count++;\n    }\n    return count;\n  }", "language": "java", "code": "public static int frequency(Iterator<?> iterator, @NullableDecl Object element) {\n    int count = 0;\n    while (contains(iterator, element)) {\n      // Since it lives in the same class, we know contains gets to the element and then stops,\n      // though that isn't currently publicly documented.\n      count++;\n    }\n    return count;\n  }", "code_tokens": ["public", "static", "int", "frequency", "(", "Iterator", "<", "?", ">", "iterator", ",", "@", "NullableDecl", "Object", "element", ")", "{", "int", "count", "=", "0", ";", "while", "(", "contains", "(", "iterator", ",", "element", ")", ")", "{", "// Since it lives in the same class, we know contains gets to the element and then stops,", "// though that isn't currently publicly documented.", "count", "++", ";", "}", "return", "count", ";", "}"], "docstring": "Returns the number of elements in the specified iterator that equal the specified object. The\niterator will be left exhausted: its {@code hasNext()} method will return {@code false}.\n\n@see Collections#frequency", "docstring_tokens": ["Returns", "the", "number", "of", "elements", "in", "the", "specified", "iterator", "that", "equal", "the", "specified", "object", ".", "The", "iterator", "will", "be", "left", "exhausted", ":", "its", "{", "@code", "hasNext", "()", "}", "method", "will", "return", "{", "@code", "false", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L367-L375", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.cycle", "original_string": "public static <T> Iterator<T> cycle(final Iterable<T> iterable) {\n    checkNotNull(iterable);\n    return new Iterator<T>() {\n      Iterator<T> iterator = emptyModifiableIterator();\n\n      @Override\n      public boolean hasNext() {\n        /*\n         * Don't store a new Iterator until we know the user can't remove() the last returned\n         * element anymore. Otherwise, when we remove from the old iterator, we may be invalidating\n         * the new one. The result is a ConcurrentModificationException or other bad behavior.\n         *\n         * (If we decide that we really, really hate allocating two Iterators per cycle instead of\n         * one, we can optimistically store the new Iterator and then be willing to throw it out if\n         * the user calls remove().)\n         */\n        return iterator.hasNext() || iterable.iterator().hasNext();\n      }\n\n      @Override\n      public T next() {\n        if (!iterator.hasNext()) {\n          iterator = iterable.iterator();\n          if (!iterator.hasNext()) {\n            throw new NoSuchElementException();\n          }\n        }\n        return iterator.next();\n      }\n\n      @Override\n      public void remove() {\n        iterator.remove();\n      }\n    };\n  }", "language": "java", "code": "public static <T> Iterator<T> cycle(final Iterable<T> iterable) {\n    checkNotNull(iterable);\n    return new Iterator<T>() {\n      Iterator<T> iterator = emptyModifiableIterator();\n\n      @Override\n      public boolean hasNext() {\n        /*\n         * Don't store a new Iterator until we know the user can't remove() the last returned\n         * element anymore. Otherwise, when we remove from the old iterator, we may be invalidating\n         * the new one. The result is a ConcurrentModificationException or other bad behavior.\n         *\n         * (If we decide that we really, really hate allocating two Iterators per cycle instead of\n         * one, we can optimistically store the new Iterator and then be willing to throw it out if\n         * the user calls remove().)\n         */\n        return iterator.hasNext() || iterable.iterator().hasNext();\n      }\n\n      @Override\n      public T next() {\n        if (!iterator.hasNext()) {\n          iterator = iterable.iterator();\n          if (!iterator.hasNext()) {\n            throw new NoSuchElementException();\n          }\n        }\n        return iterator.next();\n      }\n\n      @Override\n      public void remove() {\n        iterator.remove();\n      }\n    };\n  }", "code_tokens": ["public", "static", "<", "T", ">", "Iterator", "<", "T", ">", "cycle", "(", "final", "Iterable", "<", "T", ">", "iterable", ")", "{", "checkNotNull", "(", "iterable", ")", ";", "return", "new", "Iterator", "<", "T", ">", "(", ")", "{", "Iterator", "<", "T", ">", "iterator", "=", "emptyModifiableIterator", "(", ")", ";", "@", "Override", "public", "boolean", "hasNext", "(", ")", "{", "/*\n         * Don't store a new Iterator until we know the user can't remove() the last returned\n         * element anymore. Otherwise, when we remove from the old iterator, we may be invalidating\n         * the new one. The result is a ConcurrentModificationException or other bad behavior.\n         *\n         * (If we decide that we really, really hate allocating two Iterators per cycle instead of\n         * one, we can optimistically store the new Iterator and then be willing to throw it out if\n         * the user calls remove().)\n         */", "return", "iterator", ".", "hasNext", "(", ")", "||", "iterable", ".", "iterator", "(", ")", ".", "hasNext", "(", ")", ";", "}", "@", "Override", "public", "T", "next", "(", ")", "{", "if", "(", "!", "iterator", ".", "hasNext", "(", ")", ")", "{", "iterator", "=", "iterable", ".", "iterator", "(", ")", ";", "if", "(", "!", "iterator", ".", "hasNext", "(", ")", ")", "{", "throw", "new", "NoSuchElementException", "(", ")", ";", "}", "}", "return", "iterator", ".", "next", "(", ")", ";", "}", "@", "Override", "public", "void", "remove", "(", ")", "{", "iterator", ".", "remove", "(", ")", ";", "}", "}", ";", "}"], "docstring": "Returns an iterator that cycles indefinitely over the elements of {@code iterable}.\n\n<p>The returned iterator supports {@code remove()} if the provided iterator does. After {@code\nremove()} is called, subsequent cycles omit the removed element, which is no longer in {@code\niterable}. The iterator's {@code hasNext()} method returns {@code true} until {@code iterable}\nis empty.\n\n<p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You\nshould use an explicit {@code break} or be certain that you will eventually remove all the\nelements.", "docstring_tokens": ["Returns", "an", "iterator", "that", "cycles", "indefinitely", "over", "the", "elements", "of", "{", "@code", "iterable", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L389-L424", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.consumingForArray", "original_string": "private static <T> Iterator<T> consumingForArray(final T... elements) {\n    return new UnmodifiableIterator<T>() {\n      int index = 0;\n\n      @Override\n      public boolean hasNext() {\n        return index < elements.length;\n      }\n\n      @Override\n      public T next() {\n        if (!hasNext()) {\n          throw new NoSuchElementException();\n        }\n        T result = elements[index];\n        elements[index] = null;\n        index++;\n        return result;\n      }\n    };\n  }", "language": "java", "code": "private static <T> Iterator<T> consumingForArray(final T... elements) {\n    return new UnmodifiableIterator<T>() {\n      int index = 0;\n\n      @Override\n      public boolean hasNext() {\n        return index < elements.length;\n      }\n\n      @Override\n      public T next() {\n        if (!hasNext()) {\n          throw new NoSuchElementException();\n        }\n        T result = elements[index];\n        elements[index] = null;\n        index++;\n        return result;\n      }\n    };\n  }", "code_tokens": ["private", "static", "<", "T", ">", "Iterator", "<", "T", ">", "consumingForArray", "(", "final", "T", "...", "elements", ")", "{", "return", "new", "UnmodifiableIterator", "<", "T", ">", "(", ")", "{", "int", "index", "=", "0", ";", "@", "Override", "public", "boolean", "hasNext", "(", ")", "{", "return", "index", "<", "elements", ".", "length", ";", "}", "@", "Override", "public", "T", "next", "(", ")", "{", "if", "(", "!", "hasNext", "(", ")", ")", "{", "throw", "new", "NoSuchElementException", "(", ")", ";", "}", "T", "result", "=", "elements", "[", "index", "]", ";", "elements", "[", "index", "]", "=", "null", ";", "index", "++", ";", "return", "result", ";", "}", "}", ";", "}"], "docstring": "Returns an Iterator that walks the specified array, nulling out elements behind it. This can\navoid memory leaks when an element is no longer necessary.\n\n<p>This is mainly just to avoid the intermediate ArrayDeque in ConsumingQueueIterator.", "docstring_tokens": ["Returns", "an", "Iterator", "that", "walks", "the", "specified", "array", "nulling", "out", "elements", "behind", "it", ".", "This", "can", "avoid", "memory", "leaks", "when", "an", "element", "is", "no", "longer", "necessary", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L449-L469", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.concat", "original_string": "public static <T> Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b) {\n    checkNotNull(a);\n    checkNotNull(b);\n    return concat(consumingForArray(a, b));\n  }", "language": "java", "code": "public static <T> Iterator<T> concat(Iterator<? extends T> a, Iterator<? extends T> b) {\n    checkNotNull(a);\n    checkNotNull(b);\n    return concat(consumingForArray(a, b));\n  }", "code_tokens": ["public", "static", "<", "T", ">", "Iterator", "<", "T", ">", "concat", "(", "Iterator", "<", "?", "extends", "T", ">", "a", ",", "Iterator", "<", "?", "extends", "T", ">", "b", ")", "{", "checkNotNull", "(", "a", ")", ";", "checkNotNull", "(", "b", ")", ";", "return", "concat", "(", "consumingForArray", "(", "a", ",", "b", ")", ")", ";", "}"], "docstring": "Combines two iterators into a single iterator. The returned iterator iterates across the\nelements in {@code a}, followed by the elements in {@code b}. The source iterators are not\npolled until necessary.\n\n<p>The returned iterator supports {@code remove()} when the corresponding input iterator\nsupports it.", "docstring_tokens": ["Combines", "two", "iterators", "into", "a", "single", "iterator", ".", "The", "returned", "iterator", "iterates", "across", "the", "elements", "in", "{", "@code", "a", "}", "followed", "by", "the", "elements", "in", "{", "@code", "b", "}", ".", "The", "source", "iterators", "are", "not", "polled", "until", "necessary", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L479-L483", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.concat", "original_string": "public static <T> Iterator<T> concat(Iterator<? extends T>... inputs) {\n    return concatNoDefensiveCopy(Arrays.copyOf(inputs, inputs.length));\n  }", "language": "java", "code": "public static <T> Iterator<T> concat(Iterator<? extends T>... inputs) {\n    return concatNoDefensiveCopy(Arrays.copyOf(inputs, inputs.length));\n  }", "code_tokens": ["public", "static", "<", "T", ">", "Iterator", "<", "T", ">", "concat", "(", "Iterator", "<", "?", "extends", "T", ">", "...", "inputs", ")", "{", "return", "concatNoDefensiveCopy", "(", "Arrays", ".", "copyOf", "(", "inputs", ",", "inputs", ".", "length", ")", ")", ";", "}"], "docstring": "Combines multiple iterators into a single iterator. The returned iterator iterates across the\nelements of each iterator in {@code inputs}. The input iterators are not polled until\nnecessary.\n\n<p>The returned iterator supports {@code remove()} when the corresponding input iterator\nsupports it.\n\n@throws NullPointerException if any of the provided iterators is null", "docstring_tokens": ["Combines", "multiple", "iterators", "into", "a", "single", "iterator", ".", "The", "returned", "iterator", "iterates", "across", "the", "elements", "of", "each", "iterator", "in", "{", "@code", "inputs", "}", ".", "The", "input", "iterators", "are", "not", "polled", "until", "necessary", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L532-L534", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.concat", "original_string": "public static <T> Iterator<T> concat(Iterator<? extends Iterator<? extends T>> inputs) {\n    return new ConcatenatedIterator<T>(inputs);\n  }", "language": "java", "code": "public static <T> Iterator<T> concat(Iterator<? extends Iterator<? extends T>> inputs) {\n    return new ConcatenatedIterator<T>(inputs);\n  }", "code_tokens": ["public", "static", "<", "T", ">", "Iterator", "<", "T", ">", "concat", "(", "Iterator", "<", "?", "extends", "Iterator", "<", "?", "extends", "T", ">", ">", "inputs", ")", "{", "return", "new", "ConcatenatedIterator", "<", "T", ">", "(", "inputs", ")", ";", "}"], "docstring": "Combines multiple iterators into a single iterator. The returned iterator iterates across the\nelements of each iterator in {@code inputs}. The input iterators are not polled until\nnecessary.\n\n<p>The returned iterator supports {@code remove()} when the corresponding input iterator\nsupports it. The methods of the returned iterator may throw {@code NullPointerException} if any\nof the input iterators is null.", "docstring_tokens": ["Combines", "multiple", "iterators", "into", "a", "single", "iterator", ".", "The", "returned", "iterator", "iterates", "across", "the", "elements", "of", "each", "iterator", "in", "{", "@code", "inputs", "}", ".", "The", "input", "iterators", "are", "not", "polled", "until", "necessary", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L545-L547", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.concatNoDefensiveCopy", "original_string": "static <T> Iterator<T> concatNoDefensiveCopy(Iterator<? extends T>... inputs) {\n    for (Iterator<? extends T> input : checkNotNull(inputs)) {\n      checkNotNull(input);\n    }\n    return concat(consumingForArray(inputs));\n  }", "language": "java", "code": "static <T> Iterator<T> concatNoDefensiveCopy(Iterator<? extends T>... inputs) {\n    for (Iterator<? extends T> input : checkNotNull(inputs)) {\n      checkNotNull(input);\n    }\n    return concat(consumingForArray(inputs));\n  }", "code_tokens": ["static", "<", "T", ">", "Iterator", "<", "T", ">", "concatNoDefensiveCopy", "(", "Iterator", "<", "?", "extends", "T", ">", "...", "inputs", ")", "{", "for", "(", "Iterator", "<", "?", "extends", "T", ">", "input", ":", "checkNotNull", "(", "inputs", ")", ")", "{", "checkNotNull", "(", "input", ")", ";", "}", "return", "concat", "(", "consumingForArray", "(", "inputs", ")", ")", ";", "}"], "docstring": "Concats a varargs array of iterators without making a defensive copy of the array.", "docstring_tokens": ["Concats", "a", "varargs", "array", "of", "iterators", "without", "making", "a", "defensive", "copy", "of", "the", "array", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L550-L555", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.partition", "original_string": "public static <T> UnmodifiableIterator<List<T>> partition(Iterator<T> iterator, int size) {\n    return partitionImpl(iterator, size, false);\n  }", "language": "java", "code": "public static <T> UnmodifiableIterator<List<T>> partition(Iterator<T> iterator, int size) {\n    return partitionImpl(iterator, size, false);\n  }", "code_tokens": ["public", "static", "<", "T", ">", "UnmodifiableIterator", "<", "List", "<", "T", ">", ">", "partition", "(", "Iterator", "<", "T", ">", "iterator", ",", "int", "size", ")", "{", "return", "partitionImpl", "(", "iterator", ",", "size", ",", "false", ")", ";", "}"], "docstring": "Divides an iterator into unmodifiable sublists of the given size (the final list may be\nsmaller). For example, partitioning an iterator containing {@code [a, b, c, d, e]} with a\npartition size of 3 yields {@code [[a, b, c], [d, e]]} -- an outer iterator containing two\ninner lists of three and two elements, all in the original order.\n\n<p>The returned lists implement {@link java.util.RandomAccess}.\n\n@param iterator the iterator to return a partitioned view of\n@param size the desired size of each partition (the last may be smaller)\n@return an iterator of immutable lists containing the elements of {@code iterator} divided into\npartitions\n@throws IllegalArgumentException if {@code size} is nonpositive", "docstring_tokens": ["Divides", "an", "iterator", "into", "unmodifiable", "sublists", "of", "the", "given", "size", "(", "the", "final", "list", "may", "be", "smaller", ")", ".", "For", "example", "partitioning", "an", "iterator", "containing", "{", "@code", "[", "a", "b", "c", "d", "e", "]", "}", "with", "a", "partition", "size", "of", "3", "yields", "{", "@code", "[[", "a", "b", "c", "]", "[", "d", "e", "]]", "}", "--", "an", "outer", "iterator", "containing", "two", "inner", "lists", "of", "three", "and", "two", "elements", "all", "in", "the", "original", "order", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L571-L573", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.paddedPartition", "original_string": "public static <T> UnmodifiableIterator<List<T>> paddedPartition(Iterator<T> iterator, int size) {\n    return partitionImpl(iterator, size, true);\n  }", "language": "java", "code": "public static <T> UnmodifiableIterator<List<T>> paddedPartition(Iterator<T> iterator, int size) {\n    return partitionImpl(iterator, size, true);\n  }", "code_tokens": ["public", "static", "<", "T", ">", "UnmodifiableIterator", "<", "List", "<", "T", ">", ">", "paddedPartition", "(", "Iterator", "<", "T", ">", "iterator", ",", "int", "size", ")", "{", "return", "partitionImpl", "(", "iterator", ",", "size", ",", "true", ")", ";", "}"], "docstring": "Divides an iterator into unmodifiable sublists of the given size, padding the final iterator\nwith null values if necessary. For example, partitioning an iterator containing {@code [a, b,\nc, d, e]} with a partition size of 3 yields {@code [[a, b, c], [d, e, null]]} -- an outer\niterator containing two inner lists of three elements each, all in the original order.\n\n<p>The returned lists implement {@link java.util.RandomAccess}.\n\n@param iterator the iterator to return a partitioned view of\n@param size the desired size of each partition\n@return an iterator of immutable lists containing the elements of {@code iterator} divided into\npartitions (the final iterable may have trailing null elements)\n@throws IllegalArgumentException if {@code size} is nonpositive", "docstring_tokens": ["Divides", "an", "iterator", "into", "unmodifiable", "sublists", "of", "the", "given", "size", "padding", "the", "final", "iterator", "with", "null", "values", "if", "necessary", ".", "For", "example", "partitioning", "an", "iterator", "containing", "{", "@code", "[", "a", "b", "c", "d", "e", "]", "}", "with", "a", "partition", "size", "of", "3", "yields", "{", "@code", "[[", "a", "b", "c", "]", "[", "d", "e", "null", "]]", "}", "--", "an", "outer", "iterator", "containing", "two", "inner", "lists", "of", "three", "elements", "each", "all", "in", "the", "original", "order", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L589-L591", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.filter", "original_string": "@SuppressWarnings(\"unchecked\") // can cast to <T> because non-Ts are removed\n  @GwtIncompatible // Class.isInstance\n  public static <T> UnmodifiableIterator<T> filter(Iterator<?> unfiltered, Class<T> desiredType) {\n    return (UnmodifiableIterator<T>) filter(unfiltered, instanceOf(desiredType));\n  }", "language": "java", "code": "@SuppressWarnings(\"unchecked\") // can cast to <T> because non-Ts are removed\n  @GwtIncompatible // Class.isInstance\n  public static <T> UnmodifiableIterator<T> filter(Iterator<?> unfiltered, Class<T> desiredType) {\n    return (UnmodifiableIterator<T>) filter(unfiltered, instanceOf(desiredType));\n  }", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "// can cast to <T> because non-Ts are removed", "@", "GwtIncompatible", "// Class.isInstance", "public", "static", "<", "T", ">", "UnmodifiableIterator", "<", "T", ">", "filter", "(", "Iterator", "<", "?", ">", "unfiltered", ",", "Class", "<", "T", ">", "desiredType", ")", "{", "return", "(", "UnmodifiableIterator", "<", "T", ">", ")", "filter", "(", "unfiltered", ",", "instanceOf", "(", "desiredType", ")", ")", ";", "}"], "docstring": "Returns a view of {@code unfiltered} containing all elements that are of the type {@code\ndesiredType}.", "docstring_tokens": ["Returns", "a", "view", "of", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L650-L654", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.any", "original_string": "public static <T> boolean any(Iterator<T> iterator, Predicate<? super T> predicate) {\n    return indexOf(iterator, predicate) != -1;\n  }", "language": "java", "code": "public static <T> boolean any(Iterator<T> iterator, Predicate<? super T> predicate) {\n    return indexOf(iterator, predicate) != -1;\n  }", "code_tokens": ["public", "static", "<", "T", ">", "boolean", "any", "(", "Iterator", "<", "T", ">", "iterator", ",", "Predicate", "<", "?", "super", "T", ">", "predicate", ")", "{", "return", "indexOf", "(", "iterator", ",", "predicate", ")", "!=", "-", "1", ";", "}"], "docstring": "Returns {@code true} if one or more elements returned by {@code iterator} satisfy the given\npredicate.", "docstring_tokens": ["Returns", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L660-L662", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.all", "original_string": "public static <T> boolean all(Iterator<T> iterator, Predicate<? super T> predicate) {\n    checkNotNull(predicate);\n    while (iterator.hasNext()) {\n      T element = iterator.next();\n      if (!predicate.apply(element)) {\n        return false;\n      }\n    }\n    return true;\n  }", "language": "java", "code": "public static <T> boolean all(Iterator<T> iterator, Predicate<? super T> predicate) {\n    checkNotNull(predicate);\n    while (iterator.hasNext()) {\n      T element = iterator.next();\n      if (!predicate.apply(element)) {\n        return false;\n      }\n    }\n    return true;\n  }", "code_tokens": ["public", "static", "<", "T", ">", "boolean", "all", "(", "Iterator", "<", "T", ">", "iterator", ",", "Predicate", "<", "?", "super", "T", ">", "predicate", ")", "{", "checkNotNull", "(", "predicate", ")", ";", "while", "(", "iterator", ".", "hasNext", "(", ")", ")", "{", "T", "element", "=", "iterator", ".", "next", "(", ")", ";", "if", "(", "!", "predicate", ".", "apply", "(", "element", ")", ")", "{", "return", "false", ";", "}", "}", "return", "true", ";", "}"], "docstring": "Returns {@code true} if every element returned by {@code iterator} satisfies the given\npredicate. If {@code iterator} is empty, {@code true} is returned.", "docstring_tokens": ["Returns", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L668-L677", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.find", "original_string": "public static <T> T find(Iterator<T> iterator, Predicate<? super T> predicate) {\n    checkNotNull(iterator);\n    checkNotNull(predicate);\n    while (iterator.hasNext()) {\n      T t = iterator.next();\n      if (predicate.apply(t)) {\n        return t;\n      }\n    }\n    throw new NoSuchElementException();\n  }", "language": "java", "code": "public static <T> T find(Iterator<T> iterator, Predicate<? super T> predicate) {\n    checkNotNull(iterator);\n    checkNotNull(predicate);\n    while (iterator.hasNext()) {\n      T t = iterator.next();\n      if (predicate.apply(t)) {\n        return t;\n      }\n    }\n    throw new NoSuchElementException();\n  }", "code_tokens": ["public", "static", "<", "T", ">", "T", "find", "(", "Iterator", "<", "T", ">", "iterator", ",", "Predicate", "<", "?", "super", "T", ">", "predicate", ")", "{", "checkNotNull", "(", "iterator", ")", ";", "checkNotNull", "(", "predicate", ")", ";", "while", "(", "iterator", ".", "hasNext", "(", ")", ")", "{", "T", "t", "=", "iterator", ".", "next", "(", ")", ";", "if", "(", "predicate", ".", "apply", "(", "t", ")", ")", "{", "return", "t", ";", "}", "}", "throw", "new", "NoSuchElementException", "(", ")", ";", "}"], "docstring": "Returns the first element in {@code iterator} that satisfies the given predicate; use this\nmethod only when such an element is known to exist. If no such element is found, the iterator\nwill be left exhausted: its {@code hasNext()} method will return {@code false}. If it is\npossible that <i>no</i> element will match, use {@link #tryFind} or {@link #find(Iterator,\nPredicate, Object)} instead.\n\n@throws NoSuchElementException if no element in {@code iterator} matches the given predicate", "docstring_tokens": ["Returns", "the", "first", "element", "in", "{", "@code", "iterator", "}", "that", "satisfies", "the", "given", "predicate", ";", "use", "this", "method", "only", "when", "such", "an", "element", "is", "known", "to", "exist", ".", "If", "no", "such", "element", "is", "found", "the", "iterator", "will", "be", "left", "exhausted", ":", "its", "{", "@code", "hasNext", "()", "}", "method", "will", "return", "{", "@code", "false", "}", ".", "If", "it", "is", "possible", "that", "<i", ">", "no<", "/", "i", ">", "element", "will", "match", "use", "{", "@link", "#tryFind", "}", "or", "{", "@link", "#find", "(", "Iterator", "Predicate", "Object", ")", "}", "instead", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L688-L698", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.find", "original_string": "@NullableDecl\n  public static <T> T find(\n      Iterator<? extends T> iterator,\n      Predicate<? super T> predicate,\n      @NullableDecl T defaultValue) {\n    checkNotNull(iterator);\n    checkNotNull(predicate);\n    while (iterator.hasNext()) {\n      T t = iterator.next();\n      if (predicate.apply(t)) {\n        return t;\n      }\n    }\n    return defaultValue;\n  }", "language": "java", "code": "@NullableDecl\n  public static <T> T find(\n      Iterator<? extends T> iterator,\n      Predicate<? super T> predicate,\n      @NullableDecl T defaultValue) {\n    checkNotNull(iterator);\n    checkNotNull(predicate);\n    while (iterator.hasNext()) {\n      T t = iterator.next();\n      if (predicate.apply(t)) {\n        return t;\n      }\n    }\n    return defaultValue;\n  }", "code_tokens": ["@", "NullableDecl", "public", "static", "<", "T", ">", "T", "find", "(", "Iterator", "<", "?", "extends", "T", ">", "iterator", ",", "Predicate", "<", "?", "super", "T", ">", "predicate", ",", "@", "NullableDecl", "T", "defaultValue", ")", "{", "checkNotNull", "(", "iterator", ")", ";", "checkNotNull", "(", "predicate", ")", ";", "while", "(", "iterator", ".", "hasNext", "(", ")", ")", "{", "T", "t", "=", "iterator", ".", "next", "(", ")", ";", "if", "(", "predicate", ".", "apply", "(", "t", ")", ")", "{", "return", "t", ";", "}", "}", "return", "defaultValue", ";", "}"], "docstring": "Returns the first element in {@code iterator} that satisfies the given predicate. If no such\nelement is found, {@code defaultValue} will be returned from this method and the iterator will\nbe left exhausted: its {@code hasNext()} method will return {@code false}. Note that this can\nusually be handled more naturally using {@code tryFind(iterator, predicate).or(defaultValue)}.\n\n@since 7.0", "docstring_tokens": ["Returns", "the", "first", "element", "in", "{", "@code", "iterator", "}", "that", "satisfies", "the", "given", "predicate", ".", "If", "no", "such", "element", "is", "found", "{", "@code", "defaultValue", "}", "will", "be", "returned", "from", "this", "method", "and", "the", "iterator", "will", "be", "left", "exhausted", ":", "its", "{", "@code", "hasNext", "()", "}", "method", "will", "return", "{", "@code", "false", "}", ".", "Note", "that", "this", "can", "usually", "be", "handled", "more", "naturally", "using", "{", "@code", "tryFind", "(", "iterator", "predicate", ")", ".", "or", "(", "defaultValue", ")", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L708-L722", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.tryFind", "original_string": "public static <T> Optional<T> tryFind(Iterator<T> iterator, Predicate<? super T> predicate) {\n    checkNotNull(iterator);\n    checkNotNull(predicate);\n    while (iterator.hasNext()) {\n      T t = iterator.next();\n      if (predicate.apply(t)) {\n        return Optional.of(t);\n      }\n    }\n    return Optional.absent();\n  }", "language": "java", "code": "public static <T> Optional<T> tryFind(Iterator<T> iterator, Predicate<? super T> predicate) {\n    checkNotNull(iterator);\n    checkNotNull(predicate);\n    while (iterator.hasNext()) {\n      T t = iterator.next();\n      if (predicate.apply(t)) {\n        return Optional.of(t);\n      }\n    }\n    return Optional.absent();\n  }", "code_tokens": ["public", "static", "<", "T", ">", "Optional", "<", "T", ">", "tryFind", "(", "Iterator", "<", "T", ">", "iterator", ",", "Predicate", "<", "?", "super", "T", ">", "predicate", ")", "{", "checkNotNull", "(", "iterator", ")", ";", "checkNotNull", "(", "predicate", ")", ";", "while", "(", "iterator", ".", "hasNext", "(", ")", ")", "{", "T", "t", "=", "iterator", ".", "next", "(", ")", ";", "if", "(", "predicate", ".", "apply", "(", "t", ")", ")", "{", "return", "Optional", ".", "of", "(", "t", ")", ";", "}", "}", "return", "Optional", ".", "absent", "(", ")", ";", "}"], "docstring": "Returns an {@link Optional} containing the first element in {@code iterator} that satisfies the\ngiven predicate, if such an element exists. If no such element is found, an empty {@link\nOptional} will be returned from this method and the iterator will be left exhausted: its {@code\nhasNext()} method will return {@code false}.\n\n<p><b>Warning:</b> avoid using a {@code predicate} that matches {@code null}. If {@code null}\nis matched in {@code iterator}, a NullPointerException will be thrown.\n\n@since 11.0", "docstring_tokens": ["Returns", "an", "{", "@link", "Optional", "}", "containing", "the", "first", "element", "in", "{", "@code", "iterator", "}", "that", "satisfies", "the", "given", "predicate", "if", "such", "an", "element", "exists", ".", "If", "no", "such", "element", "is", "found", "an", "empty", "{", "@link", "Optional", "}", "will", "be", "returned", "from", "this", "method", "and", "the", "iterator", "will", "be", "left", "exhausted", ":", "its", "{", "@code", "hasNext", "()", "}", "method", "will", "return", "{", "@code", "false", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L735-L745", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.get", "original_string": "public static <T> T get(Iterator<T> iterator, int position) {\n    checkNonnegative(position);\n    int skipped = advance(iterator, position);\n    if (!iterator.hasNext()) {\n      throw new IndexOutOfBoundsException(\n          \"position (\"\n              + position\n              + \") must be less than the number of elements that remained (\"\n              + skipped\n              + \")\");\n    }\n    return iterator.next();\n  }", "language": "java", "code": "public static <T> T get(Iterator<T> iterator, int position) {\n    checkNonnegative(position);\n    int skipped = advance(iterator, position);\n    if (!iterator.hasNext()) {\n      throw new IndexOutOfBoundsException(\n          \"position (\"\n              + position\n              + \") must be less than the number of elements that remained (\"\n              + skipped\n              + \")\");\n    }\n    return iterator.next();\n  }", "code_tokens": ["public", "static", "<", "T", ">", "T", "get", "(", "Iterator", "<", "T", ">", "iterator", ",", "int", "position", ")", "{", "checkNonnegative", "(", "position", ")", ";", "int", "skipped", "=", "advance", "(", "iterator", ",", "position", ")", ";", "if", "(", "!", "iterator", ".", "hasNext", "(", ")", ")", "{", "throw", "new", "IndexOutOfBoundsException", "(", "\"position (\"", "+", "position", "+", "\") must be less than the number of elements that remained (\"", "+", "skipped", "+", "\")\"", ")", ";", "}", "return", "iterator", ".", "next", "(", ")", ";", "}"], "docstring": "Advances {@code iterator} {@code position + 1} times, returning the element at the {@code\nposition}th position.\n\n@param position position of the element to return\n@return the element at the specified position in {@code iterator}\n@throws IndexOutOfBoundsException if {@code position} is negative or greater than or equal to\nthe number of elements remaining in {@code iterator}", "docstring_tokens": ["Advances", "{", "@code", "iterator", "}", "{", "@code", "position", "+", "1", "}", "times", "returning", "the", "element", "at", "the", "{", "@code", "position", "}", "th", "position", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L800-L812", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.getNext", "original_string": "@NullableDecl\n  public static <T> T getNext(Iterator<? extends T> iterator, @NullableDecl T defaultValue) {\n    return iterator.hasNext() ? iterator.next() : defaultValue;\n  }", "language": "java", "code": "@NullableDecl\n  public static <T> T getNext(Iterator<? extends T> iterator, @NullableDecl T defaultValue) {\n    return iterator.hasNext() ? iterator.next() : defaultValue;\n  }", "code_tokens": ["@", "NullableDecl", "public", "static", "<", "T", ">", "T", "getNext", "(", "Iterator", "<", "?", "extends", "T", ">", "iterator", ",", "@", "NullableDecl", "T", "defaultValue", ")", "{", "return", "iterator", ".", "hasNext", "(", ")", "?", "iterator", ".", "next", "(", ")", ":", "defaultValue", ";", "}"], "docstring": "Returns the next element in {@code iterator} or {@code defaultValue} if the iterator is empty.\nThe {@link Iterables} analog to this method is {@link Iterables#getFirst}.\n\n@param defaultValue the default value to return if the iterator is empty\n@return the next element of {@code iterator} or the default value\n@since 7.0", "docstring_tokens": ["Returns", "the", "next", "element", "in", "{", "@code", "iterator", "}", "or", "{", "@code", "defaultValue", "}", "if", "the", "iterator", "is", "empty", ".", "The", "{", "@link", "Iterables", "}", "analog", "to", "this", "method", "is", "{", "@link", "Iterables#getFirst", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L848-L851", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.getLast", "original_string": "public static <T> T getLast(Iterator<T> iterator) {\n    while (true) {\n      T current = iterator.next();\n      if (!iterator.hasNext()) {\n        return current;\n      }\n    }\n  }", "language": "java", "code": "public static <T> T getLast(Iterator<T> iterator) {\n    while (true) {\n      T current = iterator.next();\n      if (!iterator.hasNext()) {\n        return current;\n      }\n    }\n  }", "code_tokens": ["public", "static", "<", "T", ">", "T", "getLast", "(", "Iterator", "<", "T", ">", "iterator", ")", "{", "while", "(", "true", ")", "{", "T", "current", "=", "iterator", ".", "next", "(", ")", ";", "if", "(", "!", "iterator", ".", "hasNext", "(", ")", ")", "{", "return", "current", ";", "}", "}", "}"], "docstring": "Advances {@code iterator} to the end, returning the last element.\n\n@return the last element of {@code iterator}\n@throws NoSuchElementException if the iterator is empty", "docstring_tokens": ["Advances", "{", "@code", "iterator", "}", "to", "the", "end", "returning", "the", "last", "element", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L859-L866", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.getLast", "original_string": "@NullableDecl\n  public static <T> T getLast(Iterator<? extends T> iterator, @NullableDecl T defaultValue) {\n    return iterator.hasNext() ? getLast(iterator) : defaultValue;\n  }", "language": "java", "code": "@NullableDecl\n  public static <T> T getLast(Iterator<? extends T> iterator, @NullableDecl T defaultValue) {\n    return iterator.hasNext() ? getLast(iterator) : defaultValue;\n  }", "code_tokens": ["@", "NullableDecl", "public", "static", "<", "T", ">", "T", "getLast", "(", "Iterator", "<", "?", "extends", "T", ">", "iterator", ",", "@", "NullableDecl", "T", "defaultValue", ")", "{", "return", "iterator", ".", "hasNext", "(", ")", "?", "getLast", "(", "iterator", ")", ":", "defaultValue", ";", "}"], "docstring": "Advances {@code iterator} to the end, returning the last element or {@code defaultValue} if the\niterator is empty.\n\n@param defaultValue the default value to return if the iterator is empty\n@return the last element of {@code iterator}\n@since 3.0", "docstring_tokens": ["Advances", "{", "@code", "iterator", "}", "to", "the", "end", "returning", "the", "last", "element", "or", "{", "@code", "defaultValue", "}", "if", "the", "iterator", "is", "empty", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L876-L879", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.consumingIterator", "original_string": "public static <T> Iterator<T> consumingIterator(final Iterator<T> iterator) {\n    checkNotNull(iterator);\n    return new UnmodifiableIterator<T>() {\n      @Override\n      public boolean hasNext() {\n        return iterator.hasNext();\n      }\n\n      @Override\n      public T next() {\n        T next = iterator.next();\n        iterator.remove();\n        return next;\n      }\n\n      @Override\n      public String toString() {\n        return \"Iterators.consumingIterator(...)\";\n      }\n    };\n  }", "language": "java", "code": "public static <T> Iterator<T> consumingIterator(final Iterator<T> iterator) {\n    checkNotNull(iterator);\n    return new UnmodifiableIterator<T>() {\n      @Override\n      public boolean hasNext() {\n        return iterator.hasNext();\n      }\n\n      @Override\n      public T next() {\n        T next = iterator.next();\n        iterator.remove();\n        return next;\n      }\n\n      @Override\n      public String toString() {\n        return \"Iterators.consumingIterator(...)\";\n      }\n    };\n  }", "code_tokens": ["public", "static", "<", "T", ">", "Iterator", "<", "T", ">", "consumingIterator", "(", "final", "Iterator", "<", "T", ">", "iterator", ")", "{", "checkNotNull", "(", "iterator", ")", ";", "return", "new", "UnmodifiableIterator", "<", "T", ">", "(", ")", "{", "@", "Override", "public", "boolean", "hasNext", "(", ")", "{", "return", "iterator", ".", "hasNext", "(", ")", ";", "}", "@", "Override", "public", "T", "next", "(", ")", "{", "T", "next", "=", "iterator", ".", "next", "(", ")", ";", "iterator", ".", "remove", "(", ")", ";", "return", "next", ";", "}", "@", "Override", "public", "String", "toString", "(", ")", "{", "return", "\"Iterators.consumingIterator(...)\"", ";", "}", "}", ";", "}"], "docstring": "Returns a view of the supplied {@code iterator} that removes each element from the supplied\n{@code iterator} as it is returned.\n\n<p>The provided iterator must support {@link Iterator#remove()} or else the returned iterator\nwill fail on the first call to {@code next}.\n\n@param iterator the iterator to remove and return elements from\n@return an iterator that removes and returns elements from the supplied iterator\n@since 2.0", "docstring_tokens": ["Returns", "a", "view", "of", "the", "supplied", "{", "@code", "iterator", "}", "that", "removes", "each", "element", "from", "the", "supplied", "{", "@code", "iterator", "}", "as", "it", "is", "returned", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L948-L968", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.pollNext", "original_string": "@NullableDecl\n  static <T> T pollNext(Iterator<T> iterator) {\n    if (iterator.hasNext()) {\n      T result = iterator.next();\n      iterator.remove();\n      return result;\n    } else {\n      return null;\n    }\n  }", "language": "java", "code": "@NullableDecl\n  static <T> T pollNext(Iterator<T> iterator) {\n    if (iterator.hasNext()) {\n      T result = iterator.next();\n      iterator.remove();\n      return result;\n    } else {\n      return null;\n    }\n  }", "code_tokens": ["@", "NullableDecl", "static", "<", "T", ">", "T", "pollNext", "(", "Iterator", "<", "T", ">", "iterator", ")", "{", "if", "(", "iterator", ".", "hasNext", "(", ")", ")", "{", "T", "result", "=", "iterator", ".", "next", "(", ")", ";", "iterator", ".", "remove", "(", ")", ";", "return", "result", ";", "}", "else", "{", "return", "null", ";", "}", "}"], "docstring": "Deletes and returns the next value from the iterator, or returns {@code null} if there is no\nsuch value.", "docstring_tokens": ["Deletes", "and", "returns", "the", "next", "value", "from", "the", "iterator", "or", "returns", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L974-L983", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.clear", "original_string": "static void clear(Iterator<?> iterator) {\n    checkNotNull(iterator);\n    while (iterator.hasNext()) {\n      iterator.next();\n      iterator.remove();\n    }\n  }", "language": "java", "code": "static void clear(Iterator<?> iterator) {\n    checkNotNull(iterator);\n    while (iterator.hasNext()) {\n      iterator.next();\n      iterator.remove();\n    }\n  }", "code_tokens": ["static", "void", "clear", "(", "Iterator", "<", "?", ">", "iterator", ")", "{", "checkNotNull", "(", "iterator", ")", ";", "while", "(", "iterator", ".", "hasNext", "(", ")", ")", "{", "iterator", ".", "next", "(", ")", ";", "iterator", ".", "remove", "(", ")", ";", "}", "}"], "docstring": "Clears the iterator using its remove method.", "docstring_tokens": ["Clears", "the", "iterator", "using", "its", "remove", "method", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L988-L994", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.forArray", "original_string": "@SafeVarargs\n  public static <T> UnmodifiableIterator<T> forArray(final T... array) {\n    return forArray(array, 0, array.length, 0);\n  }", "language": "java", "code": "@SafeVarargs\n  public static <T> UnmodifiableIterator<T> forArray(final T... array) {\n    return forArray(array, 0, array.length, 0);\n  }", "code_tokens": ["@", "SafeVarargs", "public", "static", "<", "T", ">", "UnmodifiableIterator", "<", "T", ">", "forArray", "(", "final", "T", "...", "array", ")", "{", "return", "forArray", "(", "array", ",", "0", ",", "array", ".", "length", ",", "0", ")", ";", "}"], "docstring": "Returns an iterator containing the elements of {@code array} in order. The returned iterator is\na view of the array; subsequent changes to the array will be reflected in the iterator.\n\n<p><b>Note:</b> It is often preferable to represent your data using a collection type, for\nexample using {@link Arrays#asList(Object[])}, making this method unnecessary.\n\n<p>The {@code Iterable} equivalent of this method is either {@link Arrays#asList(Object[])},\n{@link ImmutableList#copyOf(Object[])}}, or {@link ImmutableList#of}.", "docstring_tokens": ["Returns", "an", "iterator", "containing", "the", "elements", "of", "{", "@code", "array", "}", "in", "order", ".", "The", "returned", "iterator", "is", "a", "view", "of", "the", "array", ";", "subsequent", "changes", "to", "the", "array", "will", "be", "reflected", "in", "the", "iterator", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L1006-L1009", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.forArray", "original_string": "static <T> UnmodifiableListIterator<T> forArray(\n      final T[] array, final int offset, int length, int index) {\n    checkArgument(length >= 0);\n    int end = offset + length;\n\n    // Technically we should give a slightly more descriptive error on overflow\n    Preconditions.checkPositionIndexes(offset, end, array.length);\n    Preconditions.checkPositionIndex(index, length);\n    if (length == 0) {\n      return emptyListIterator();\n    }\n    return new ArrayItr<T>(array, offset, length, index);\n  }", "language": "java", "code": "static <T> UnmodifiableListIterator<T> forArray(\n      final T[] array, final int offset, int length, int index) {\n    checkArgument(length >= 0);\n    int end = offset + length;\n\n    // Technically we should give a slightly more descriptive error on overflow\n    Preconditions.checkPositionIndexes(offset, end, array.length);\n    Preconditions.checkPositionIndex(index, length);\n    if (length == 0) {\n      return emptyListIterator();\n    }\n    return new ArrayItr<T>(array, offset, length, index);\n  }", "code_tokens": ["static", "<", "T", ">", "UnmodifiableListIterator", "<", "T", ">", "forArray", "(", "final", "T", "[", "]", "array", ",", "final", "int", "offset", ",", "int", "length", ",", "int", "index", ")", "{", "checkArgument", "(", "length", ">=", "0", ")", ";", "int", "end", "=", "offset", "+", "length", ";", "// Technically we should give a slightly more descriptive error on overflow", "Preconditions", ".", "checkPositionIndexes", "(", "offset", ",", "end", ",", "array", ".", "length", ")", ";", "Preconditions", ".", "checkPositionIndex", "(", "index", ",", "length", ")", ";", "if", "(", "length", "==", "0", ")", "{", "return", "emptyListIterator", "(", ")", ";", "}", "return", "new", "ArrayItr", "<", "T", ">", "(", "array", ",", "offset", ",", "length", ",", "index", ")", ";", "}"], "docstring": "Returns a list iterator containing the elements in the specified range of {@code array} in\norder, starting at the specified index.\n\n<p>The {@code Iterable} equivalent of this method is {@code\nArrays.asList(array).subList(offset, offset + length).listIterator(index)}.", "docstring_tokens": ["Returns", "a", "list", "iterator", "containing", "the", "elements", "in", "the", "specified", "range", "of", "{", "@code", "array", "}", "in", "order", "starting", "at", "the", "specified", "index", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L1018-L1030", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.forEnumeration", "original_string": "public static <T> UnmodifiableIterator<T> forEnumeration(final Enumeration<T> enumeration) {\n    checkNotNull(enumeration);\n    return new UnmodifiableIterator<T>() {\n      @Override\n      public boolean hasNext() {\n        return enumeration.hasMoreElements();\n      }\n\n      @Override\n      public T next() {\n        return enumeration.nextElement();\n      }\n    };\n  }", "language": "java", "code": "public static <T> UnmodifiableIterator<T> forEnumeration(final Enumeration<T> enumeration) {\n    checkNotNull(enumeration);\n    return new UnmodifiableIterator<T>() {\n      @Override\n      public boolean hasNext() {\n        return enumeration.hasMoreElements();\n      }\n\n      @Override\n      public T next() {\n        return enumeration.nextElement();\n      }\n    };\n  }", "code_tokens": ["public", "static", "<", "T", ">", "UnmodifiableIterator", "<", "T", ">", "forEnumeration", "(", "final", "Enumeration", "<", "T", ">", "enumeration", ")", "{", "checkNotNull", "(", "enumeration", ")", ";", "return", "new", "UnmodifiableIterator", "<", "T", ">", "(", ")", "{", "@", "Override", "public", "boolean", "hasNext", "(", ")", "{", "return", "enumeration", ".", "hasMoreElements", "(", ")", ";", "}", "@", "Override", "public", "T", "next", "(", ")", "{", "return", "enumeration", ".", "nextElement", "(", ")", ";", "}", "}", ";", "}"], "docstring": "Adapts an {@code Enumeration} to the {@code Iterator} interface.\n\n<p>This method has no equivalent in {@link Iterables} because viewing an {@code Enumeration} as\nan {@code Iterable} is impossible. However, the contents can be <i>copied</i> into a collection\nusing {@link Collections#list}.", "docstring_tokens": ["Adapts", "an", "{", "@code", "Enumeration", "}", "to", "the", "{", "@code", "Iterator", "}", "interface", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L1082-L1095", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.asEnumeration", "original_string": "public static <T> Enumeration<T> asEnumeration(final Iterator<T> iterator) {\n    checkNotNull(iterator);\n    return new Enumeration<T>() {\n      @Override\n      public boolean hasMoreElements() {\n        return iterator.hasNext();\n      }\n\n      @Override\n      public T nextElement() {\n        return iterator.next();\n      }\n    };\n  }", "language": "java", "code": "public static <T> Enumeration<T> asEnumeration(final Iterator<T> iterator) {\n    checkNotNull(iterator);\n    return new Enumeration<T>() {\n      @Override\n      public boolean hasMoreElements() {\n        return iterator.hasNext();\n      }\n\n      @Override\n      public T nextElement() {\n        return iterator.next();\n      }\n    };\n  }", "code_tokens": ["public", "static", "<", "T", ">", "Enumeration", "<", "T", ">", "asEnumeration", "(", "final", "Iterator", "<", "T", ">", "iterator", ")", "{", "checkNotNull", "(", "iterator", ")", ";", "return", "new", "Enumeration", "<", "T", ">", "(", ")", "{", "@", "Override", "public", "boolean", "hasMoreElements", "(", ")", "{", "return", "iterator", ".", "hasNext", "(", ")", ";", "}", "@", "Override", "public", "T", "nextElement", "(", ")", "{", "return", "iterator", ".", "next", "(", ")", ";", "}", "}", ";", "}"], "docstring": "Adapts an {@code Iterator} to the {@code Enumeration} interface.\n\n<p>The {@code Iterable} equivalent of this method is either {@link Collections#enumeration} (if\nyou have a {@link Collection}), or {@code Iterators.asEnumeration(collection.iterator())}.", "docstring_tokens": ["Adapts", "an", "{", "@code", "Iterator", "}", "to", "the", "{", "@code", "Enumeration", "}", "interface", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L1103-L1116", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.peekingIterator", "original_string": "public static <T> PeekingIterator<T> peekingIterator(Iterator<? extends T> iterator) {\n    if (iterator instanceof PeekingImpl) {\n      // Safe to cast <? extends T> to <T> because PeekingImpl only uses T\n      // covariantly (and cannot be subclassed to add non-covariant uses).\n      @SuppressWarnings(\"unchecked\")\n      PeekingImpl<T> peeking = (PeekingImpl<T>) iterator;\n      return peeking;\n    }\n    return new PeekingImpl<T>(iterator);\n  }", "language": "java", "code": "public static <T> PeekingIterator<T> peekingIterator(Iterator<? extends T> iterator) {\n    if (iterator instanceof PeekingImpl) {\n      // Safe to cast <? extends T> to <T> because PeekingImpl only uses T\n      // covariantly (and cannot be subclassed to add non-covariant uses).\n      @SuppressWarnings(\"unchecked\")\n      PeekingImpl<T> peeking = (PeekingImpl<T>) iterator;\n      return peeking;\n    }\n    return new PeekingImpl<T>(iterator);\n  }", "code_tokens": ["public", "static", "<", "T", ">", "PeekingIterator", "<", "T", ">", "peekingIterator", "(", "Iterator", "<", "?", "extends", "T", ">", "iterator", ")", "{", "if", "(", "iterator", "instanceof", "PeekingImpl", ")", "{", "// Safe to cast <? extends T> to <T> because PeekingImpl only uses T", "// covariantly (and cannot be subclassed to add non-covariant uses).", "@", "SuppressWarnings", "(", "\"unchecked\"", ")", "PeekingImpl", "<", "T", ">", "peeking", "=", "(", "PeekingImpl", "<", "T", ">", ")", "iterator", ";", "return", "peeking", ";", "}", "return", "new", "PeekingImpl", "<", "T", ">", "(", "iterator", ")", ";", "}"], "docstring": "Returns a {@code PeekingIterator} backed by the given iterator.\n\n<p>Calls to the {@code peek} method with no intervening calls to {@code next} do not affect the\niteration, and hence return the same object each time. A subsequent call to {@code next} is\nguaranteed to return the same object again. For example:\n\n<pre>{@code\nPeekingIterator<String> peekingIterator =\nIterators.peekingIterator(Iterators.forArray(\"a\", \"b\"));\nString a1 = peekingIterator.peek(); // returns \"a\"\nString a2 = peekingIterator.peek(); // also returns \"a\"\nString a3 = peekingIterator.next(); // also returns \"a\"\n}</pre>\n\n<p>Any structural changes to the underlying iteration (aside from those performed by the\niterator's own {@link PeekingIterator#remove()} method) will leave the iterator in an undefined\nstate.\n\n<p>The returned iterator does not support removal after peeking, as explained by {@link\nPeekingIterator#remove()}.\n\n<p>Note: If the given iterator is already a {@code PeekingIterator}, it <i>might</i> be\nreturned to the caller, although this is neither guaranteed to occur nor required to be\nconsistent. For example, this method <i>might</i> choose to pass through recognized\nimplementations of {@code PeekingIterator} when the behavior of the implementation is known to\nmeet the contract guaranteed by this method.\n\n<p>There is no {@link Iterable} equivalent to this method, so use this method to wrap each\nindividual iterator as it is generated.\n\n@param iterator the backing iterator. The {@link PeekingIterator} assumes ownership of this\niterator, so users should cease making direct calls to it after calling this method.\n@return a peeking iterator backed by that iterator. Apart from the additional {@link\nPeekingIterator#peek()} method, this iterator behaves exactly the same as {@code iterator}.", "docstring_tokens": ["Returns", "a", "{", "@code", "PeekingIterator", "}", "backed", "by", "the", "given", "iterator", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L1197-L1206", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.peekingIterator", "original_string": "@Deprecated\n  public static <T> PeekingIterator<T> peekingIterator(PeekingIterator<T> iterator) {\n    return checkNotNull(iterator);\n  }", "language": "java", "code": "@Deprecated\n  public static <T> PeekingIterator<T> peekingIterator(PeekingIterator<T> iterator) {\n    return checkNotNull(iterator);\n  }", "code_tokens": ["@", "Deprecated", "public", "static", "<", "T", ">", "PeekingIterator", "<", "T", ">", "peekingIterator", "(", "PeekingIterator", "<", "T", ">", "iterator", ")", "{", "return", "checkNotNull", "(", "iterator", ")", ";", "}"], "docstring": "Simply returns its argument.\n\n@deprecated no need to use this\n@since 10.0", "docstring_tokens": ["Simply", "returns", "its", "argument", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L1214-L1217", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.mergeSorted", "original_string": "@Beta\n  public static <T> UnmodifiableIterator<T> mergeSorted(\n      Iterable<? extends Iterator<? extends T>> iterators, Comparator<? super T> comparator) {\n    checkNotNull(iterators, \"iterators\");\n    checkNotNull(comparator, \"comparator\");\n\n    return new MergingIterator<T>(iterators, comparator);\n  }", "language": "java", "code": "@Beta\n  public static <T> UnmodifiableIterator<T> mergeSorted(\n      Iterable<? extends Iterator<? extends T>> iterators, Comparator<? super T> comparator) {\n    checkNotNull(iterators, \"iterators\");\n    checkNotNull(comparator, \"comparator\");\n\n    return new MergingIterator<T>(iterators, comparator);\n  }", "code_tokens": ["@", "Beta", "public", "static", "<", "T", ">", "UnmodifiableIterator", "<", "T", ">", "mergeSorted", "(", "Iterable", "<", "?", "extends", "Iterator", "<", "?", "extends", "T", ">", ">", "iterators", ",", "Comparator", "<", "?", "super", "T", ">", "comparator", ")", "{", "checkNotNull", "(", "iterators", ",", "\"iterators\"", ")", ";", "checkNotNull", "(", "comparator", ",", "\"comparator\"", ")", ";", "return", "new", "MergingIterator", "<", "T", ">", "(", "iterators", ",", "comparator", ")", ";", "}"], "docstring": "Returns an iterator over the merged contents of all given {@code iterators}, traversing every\nelement of the input iterators. Equivalent entries will not be de-duplicated.\n\n<p>Callers must ensure that the source {@code iterators} are in non-descending order as this\nmethod does not sort its input.\n\n<p>For any equivalent elements across all {@code iterators}, it is undefined which element is\nreturned first.\n\n@since 11.0", "docstring_tokens": ["Returns", "an", "iterator", "over", "the", "merged", "contents", "of", "all", "given", "{", "@code", "iterators", "}", "traversing", "every", "element", "of", "the", "input", "iterators", ".", "Equivalent", "entries", "will", "not", "be", "de", "-", "duplicated", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L1231-L1238", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/Iterators.java", "func_name": "Iterators.cast", "original_string": "static <T> ListIterator<T> cast(Iterator<T> iterator) {\n    return (ListIterator<T>) iterator;\n  }", "language": "java", "code": "static <T> ListIterator<T> cast(Iterator<T> iterator) {\n    return (ListIterator<T>) iterator;\n  }", "code_tokens": ["static", "<", "T", ">", "ListIterator", "<", "T", ">", "cast", "(", "Iterator", "<", "T", ">", "iterator", ")", "{", "return", "(", "ListIterator", "<", "T", ">", ")", "iterator", ";", "}"], "docstring": "Used to avoid http://bugs.sun.com/view_bug.do?bug_id=6558557", "docstring_tokens": ["Used", "to", "avoid", "http", ":", "//", "bugs", ".", "sun", ".", "com", "/", "view_bug", ".", "do?bug_id", "=", "6558557"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/Iterators.java#L1384-L1386", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/graph/ConfigurableMutableNetwork.java", "func_name": "ConfigurableMutableNetwork.addNodeInternal", "original_string": "@CanIgnoreReturnValue\n  private NetworkConnections<N, E> addNodeInternal(N node) {\n    NetworkConnections<N, E> connections = newConnections();\n    checkState(nodeConnections.put(node, connections) == null);\n    return connections;\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  private NetworkConnections<N, E> addNodeInternal(N node) {\n    NetworkConnections<N, E> connections = newConnections();\n    checkState(nodeConnections.put(node, connections) == null);\n    return connections;\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "private", "NetworkConnections", "<", "N", ",", "E", ">", "addNodeInternal", "(", "N", "node", ")", "{", "NetworkConnections", "<", "N", ",", "E", ">", "connections", "=", "newConnections", "(", ")", ";", "checkState", "(", "nodeConnections", ".", "put", "(", "node", ",", "connections", ")", "==", "null", ")", ";", "return", "connections", ";", "}"], "docstring": "Adds {@code node} to the graph and returns the associated {@link NetworkConnections}.\n\n@throws IllegalStateException if {@code node} is already present", "docstring_tokens": ["Adds", "{", "@code", "node", "}", "to", "the", "graph", "and", "returns", "the", "associated", "{", "@link", "NetworkConnections", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/graph/ConfigurableMutableNetwork.java#L68-L73", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/net/HostSpecifier.java", "func_name": "HostSpecifier.fromValid", "original_string": "public static HostSpecifier fromValid(String specifier) {\n    // Verify that no port was specified, and strip optional brackets from\n    // IPv6 literals.\n    final HostAndPort parsedHost = HostAndPort.fromString(specifier);\n    Preconditions.checkArgument(!parsedHost.hasPort());\n    final String host = parsedHost.getHost();\n\n    // Try to interpret the specifier as an IP address. Note we build\n    // the address rather than using the .is* methods because we want to\n    // use InetAddresses.toUriString to convert the result to a string in\n    // canonical form.\n    InetAddress addr = null;\n    try {\n      addr = InetAddresses.forString(host);\n    } catch (IllegalArgumentException e) {\n      // It is not an IPv4 or IPv6 literal\n    }\n\n    if (addr != null) {\n      return new HostSpecifier(InetAddresses.toUriString(addr));\n    }\n\n    // It is not any kind of IP address; must be a domain name or invalid.\n\n    // TODO(user): different versions of this for different factories?\n    final InternetDomainName domain = InternetDomainName.from(host);\n\n    if (domain.hasPublicSuffix()) {\n      return new HostSpecifier(domain.toString());\n    }\n\n    throw new IllegalArgumentException(\n        \"Domain name does not have a recognized public suffix: \" + host);\n  }", "language": "java", "code": "public static HostSpecifier fromValid(String specifier) {\n    // Verify that no port was specified, and strip optional brackets from\n    // IPv6 literals.\n    final HostAndPort parsedHost = HostAndPort.fromString(specifier);\n    Preconditions.checkArgument(!parsedHost.hasPort());\n    final String host = parsedHost.getHost();\n\n    // Try to interpret the specifier as an IP address. Note we build\n    // the address rather than using the .is* methods because we want to\n    // use InetAddresses.toUriString to convert the result to a string in\n    // canonical form.\n    InetAddress addr = null;\n    try {\n      addr = InetAddresses.forString(host);\n    } catch (IllegalArgumentException e) {\n      // It is not an IPv4 or IPv6 literal\n    }\n\n    if (addr != null) {\n      return new HostSpecifier(InetAddresses.toUriString(addr));\n    }\n\n    // It is not any kind of IP address; must be a domain name or invalid.\n\n    // TODO(user): different versions of this for different factories?\n    final InternetDomainName domain = InternetDomainName.from(host);\n\n    if (domain.hasPublicSuffix()) {\n      return new HostSpecifier(domain.toString());\n    }\n\n    throw new IllegalArgumentException(\n        \"Domain name does not have a recognized public suffix: \" + host);\n  }", "code_tokens": ["public", "static", "HostSpecifier", "fromValid", "(", "String", "specifier", ")", "{", "// Verify that no port was specified, and strip optional brackets from", "// IPv6 literals.", "final", "HostAndPort", "parsedHost", "=", "HostAndPort", ".", "fromString", "(", "specifier", ")", ";", "Preconditions", ".", "checkArgument", "(", "!", "parsedHost", ".", "hasPort", "(", ")", ")", ";", "final", "String", "host", "=", "parsedHost", ".", "getHost", "(", ")", ";", "// Try to interpret the specifier as an IP address. Note we build", "// the address rather than using the .is* methods because we want to", "// use InetAddresses.toUriString to convert the result to a string in", "// canonical form.", "InetAddress", "addr", "=", "null", ";", "try", "{", "addr", "=", "InetAddresses", ".", "forString", "(", "host", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "// It is not an IPv4 or IPv6 literal", "}", "if", "(", "addr", "!=", "null", ")", "{", "return", "new", "HostSpecifier", "(", "InetAddresses", ".", "toUriString", "(", "addr", ")", ")", ";", "}", "// It is not any kind of IP address; must be a domain name or invalid.", "// TODO(user): different versions of this for different factories?", "final", "InternetDomainName", "domain", "=", "InternetDomainName", ".", "from", "(", "host", ")", ";", "if", "(", "domain", ".", "hasPublicSuffix", "(", ")", ")", "{", "return", "new", "HostSpecifier", "(", "domain", ".", "toString", "(", ")", ")", ";", "}", "throw", "new", "IllegalArgumentException", "(", "\"Domain name does not have a recognized public suffix: \"", "+", "host", ")", ";", "}"], "docstring": "Returns a {@code HostSpecifier} built from the provided {@code specifier}, which is already\nknown to be valid. If the {@code specifier} might be invalid, use {@link #from(String)}\ninstead.\n\n<p>The specifier must be in one of these formats:\n\n<ul>\n<li>A domain name, like {@code google.com}\n<li>A IPv4 address string, like {@code 127.0.0.1}\n<li>An IPv6 address string with or without brackets, like {@code [2001:db8::1]} or {@code\n2001:db8::1}\n</ul>\n\n@throws IllegalArgumentException if the specifier is not valid.", "docstring_tokens": ["Returns", "a", "{", "@code", "HostSpecifier", "}", "built", "from", "the", "provided", "{", "@code", "specifier", "}", "which", "is", "already", "known", "to", "be", "valid", ".", "If", "the", "{", "@code", "specifier", "}", "might", "be", "invalid", "use", "{", "@link", "#from", "(", "String", ")", "}", "instead", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/net/HostSpecifier.java#L70-L103", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/net/HostSpecifier.java", "func_name": "HostSpecifier.from", "original_string": "public static HostSpecifier from(String specifier) throws ParseException {\n    try {\n      return fromValid(specifier);\n    } catch (IllegalArgumentException e) {\n      // Since the IAE can originate at several different points inside\n      // fromValid(), we implement this method in terms of that one rather\n      // than the reverse.\n\n      ParseException parseException = new ParseException(\"Invalid host specifier: \" + specifier, 0);\n      parseException.initCause(e);\n      throw parseException;\n    }\n  }", "language": "java", "code": "public static HostSpecifier from(String specifier) throws ParseException {\n    try {\n      return fromValid(specifier);\n    } catch (IllegalArgumentException e) {\n      // Since the IAE can originate at several different points inside\n      // fromValid(), we implement this method in terms of that one rather\n      // than the reverse.\n\n      ParseException parseException = new ParseException(\"Invalid host specifier: \" + specifier, 0);\n      parseException.initCause(e);\n      throw parseException;\n    }\n  }", "code_tokens": ["public", "static", "HostSpecifier", "from", "(", "String", "specifier", ")", "throws", "ParseException", "{", "try", "{", "return", "fromValid", "(", "specifier", ")", ";", "}", "catch", "(", "IllegalArgumentException", "e", ")", "{", "// Since the IAE can originate at several different points inside", "// fromValid(), we implement this method in terms of that one rather", "// than the reverse.", "ParseException", "parseException", "=", "new", "ParseException", "(", "\"Invalid host specifier: \"", "+", "specifier", ",", "0", ")", ";", "parseException", ".", "initCause", "(", "e", ")", ";", "throw", "parseException", ";", "}", "}"], "docstring": "Attempts to return a {@code HostSpecifier} for the given string, throwing an exception if\nparsing fails. Always use this method in preference to {@link #fromValid(String)} for a\nspecifier that is not already known to be valid.\n\n@throws ParseException if the specifier is not valid.", "docstring_tokens": ["Attempts", "to", "return", "a", "{", "@code", "HostSpecifier", "}", "for", "the", "given", "string", "throwing", "an", "exception", "if", "parsing", "fails", ".", "Always", "use", "this", "method", "in", "preference", "to", "{", "@link", "#fromValid", "(", "String", ")", "}", "for", "a", "specifier", "that", "is", "not", "already", "known", "to", "be", "valid", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/net/HostSpecifier.java#L112-L124", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/ByteSink.java", "func_name": "ByteSink.openBufferedStream", "original_string": "public OutputStream openBufferedStream() throws IOException {\n    OutputStream out = openStream();\n    return (out instanceof BufferedOutputStream)\n        ? (BufferedOutputStream) out\n        : new BufferedOutputStream(out);\n  }", "language": "java", "code": "public OutputStream openBufferedStream() throws IOException {\n    OutputStream out = openStream();\n    return (out instanceof BufferedOutputStream)\n        ? (BufferedOutputStream) out\n        : new BufferedOutputStream(out);\n  }", "code_tokens": ["public", "OutputStream", "openBufferedStream", "(", ")", "throws", "IOException", "{", "OutputStream", "out", "=", "openStream", "(", ")", ";", "return", "(", "out", "instanceof", "BufferedOutputStream", ")", "?", "(", "BufferedOutputStream", ")", "out", ":", "new", "BufferedOutputStream", "(", "out", ")", ";", "}"], "docstring": "Opens a new buffered {@link OutputStream} for writing to this sink. The returned stream is not\nrequired to be a {@link BufferedOutputStream} in order to allow implementations to simply\ndelegate to {@link #openStream()} when the stream returned by that method does not benefit from\nadditional buffering (for example, a {@code ByteArrayOutputStream}). This method returns a new,\nindependent stream each time it is called.\n\n<p>The caller is responsible for ensuring that the returned stream is closed.\n\n@throws IOException if an I/O error occurs while opening the stream\n@since 15.0 (in 14.0 with return type {@link BufferedOutputStream})", "docstring_tokens": ["Opens", "a", "new", "buffered", "{", "@link", "OutputStream", "}", "for", "writing", "to", "this", "sink", ".", "The", "returned", "stream", "is", "not", "required", "to", "be", "a", "{", "@link", "BufferedOutputStream", "}", "in", "order", "to", "allow", "implementations", "to", "simply", "delegate", "to", "{", "@link", "#openStream", "()", "}", "when", "the", "stream", "returned", "by", "that", "method", "does", "not", "benefit", "from", "additional", "buffering", "(", "for", "example", "a", "{", "@code", "ByteArrayOutputStream", "}", ")", ".", "This", "method", "returns", "a", "new", "independent", "stream", "each", "time", "it", "is", "called", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/ByteSink.java#L84-L89", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/ByteSink.java", "func_name": "ByteSink.write", "original_string": "public void write(byte[] bytes) throws IOException {\n    checkNotNull(bytes);\n\n    Closer closer = Closer.create();\n    try {\n      OutputStream out = closer.register(openStream());\n      out.write(bytes);\n      out.flush(); // https://code.google.com/p/guava-libraries/issues/detail?id=1330\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "language": "java", "code": "public void write(byte[] bytes) throws IOException {\n    checkNotNull(bytes);\n\n    Closer closer = Closer.create();\n    try {\n      OutputStream out = closer.register(openStream());\n      out.write(bytes);\n      out.flush(); // https://code.google.com/p/guava-libraries/issues/detail?id=1330\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "code_tokens": ["public", "void", "write", "(", "byte", "[", "]", "bytes", ")", "throws", "IOException", "{", "checkNotNull", "(", "bytes", ")", ";", "Closer", "closer", "=", "Closer", ".", "create", "(", ")", ";", "try", "{", "OutputStream", "out", "=", "closer", ".", "register", "(", "openStream", "(", ")", ")", ";", "out", ".", "write", "(", "bytes", ")", ";", "out", ".", "flush", "(", ")", ";", "// https://code.google.com/p/guava-libraries/issues/detail?id=1330", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "closer", ".", "rethrow", "(", "e", ")", ";", "}", "finally", "{", "closer", ".", "close", "(", ")", ";", "}", "}"], "docstring": "Writes all the given bytes to this sink.\n\n@throws IOException if an I/O occurs while writing to this sink", "docstring_tokens": ["Writes", "all", "the", "given", "bytes", "to", "this", "sink", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/ByteSink.java#L96-L109", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/io/ByteSink.java", "func_name": "ByteSink.writeFrom", "original_string": "@CanIgnoreReturnValue\n  public long writeFrom(InputStream input) throws IOException {\n    checkNotNull(input);\n\n    Closer closer = Closer.create();\n    try {\n      OutputStream out = closer.register(openStream());\n      long written = ByteStreams.copy(input, out);\n      out.flush(); // https://code.google.com/p/guava-libraries/issues/detail?id=1330\n      return written;\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  public long writeFrom(InputStream input) throws IOException {\n    checkNotNull(input);\n\n    Closer closer = Closer.create();\n    try {\n      OutputStream out = closer.register(openStream());\n      long written = ByteStreams.copy(input, out);\n      out.flush(); // https://code.google.com/p/guava-libraries/issues/detail?id=1330\n      return written;\n    } catch (Throwable e) {\n      throw closer.rethrow(e);\n    } finally {\n      closer.close();\n    }\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "public", "long", "writeFrom", "(", "InputStream", "input", ")", "throws", "IOException", "{", "checkNotNull", "(", "input", ")", ";", "Closer", "closer", "=", "Closer", ".", "create", "(", ")", ";", "try", "{", "OutputStream", "out", "=", "closer", ".", "register", "(", "openStream", "(", ")", ")", ";", "long", "written", "=", "ByteStreams", ".", "copy", "(", "input", ",", "out", ")", ";", "out", ".", "flush", "(", ")", ";", "// https://code.google.com/p/guava-libraries/issues/detail?id=1330", "return", "written", ";", "}", "catch", "(", "Throwable", "e", ")", "{", "throw", "closer", ".", "rethrow", "(", "e", ")", ";", "}", "finally", "{", "closer", ".", "close", "(", ")", ";", "}", "}"], "docstring": "Writes all the bytes from the given {@code InputStream} to this sink. Does not close {@code\ninput}.\n\n@return the number of bytes written\n@throws IOException if an I/O occurs while reading from {@code input} or writing to this sink", "docstring_tokens": ["Writes", "all", "the", "bytes", "from", "the", "given", "{", "@code", "InputStream", "}", "to", "this", "sink", ".", "Does", "not", "close", "{", "@code", "input", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/io/ByteSink.java#L118-L133", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/AbstractMapBasedMultiset.java", "func_name": "AbstractMapBasedMultiset.setCount", "original_string": "@CanIgnoreReturnValue\n  @Override\n  public int setCount(@Nullable E element, int count) {\n    checkNonnegative(count, \"count\");\n\n    Count existingCounter;\n    int oldCount;\n    if (count == 0) {\n      existingCounter = backingMap.remove(element);\n      oldCount = getAndSet(existingCounter, count);\n    } else {\n      existingCounter = backingMap.get(element);\n      oldCount = getAndSet(existingCounter, count);\n\n      if (existingCounter == null) {\n        backingMap.put(element, new Count(count));\n      }\n    }\n\n    size += (count - oldCount);\n    return oldCount;\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  @Override\n  public int setCount(@Nullable E element, int count) {\n    checkNonnegative(count, \"count\");\n\n    Count existingCounter;\n    int oldCount;\n    if (count == 0) {\n      existingCounter = backingMap.remove(element);\n      oldCount = getAndSet(existingCounter, count);\n    } else {\n      existingCounter = backingMap.get(element);\n      oldCount = getAndSet(existingCounter, count);\n\n      if (existingCounter == null) {\n        backingMap.put(element, new Count(count));\n      }\n    }\n\n    size += (count - oldCount);\n    return oldCount;\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "@", "Override", "public", "int", "setCount", "(", "@", "Nullable", "E", "element", ",", "int", "count", ")", "{", "checkNonnegative", "(", "count", ",", "\"count\"", ")", ";", "Count", "existingCounter", ";", "int", "oldCount", ";", "if", "(", "count", "==", "0", ")", "{", "existingCounter", "=", "backingMap", ".", "remove", "(", "element", ")", ";", "oldCount", "=", "getAndSet", "(", "existingCounter", ",", "count", ")", ";", "}", "else", "{", "existingCounter", "=", "backingMap", ".", "get", "(", "element", ")", ";", "oldCount", "=", "getAndSet", "(", "existingCounter", ",", "count", ")", ";", "if", "(", "existingCounter", "==", "null", ")", "{", "backingMap", ".", "put", "(", "element", ",", "new", "Count", "(", "count", ")", ")", ";", "}", "}", "size", "+=", "(", "count", "-", "oldCount", ")", ";", "return", "oldCount", ";", "}"], "docstring": "Roughly a 33% performance improvement over AbstractMultiset.setCount().", "docstring_tokens": ["Roughly", "a", "33%", "performance", "improvement", "over", "AbstractMultiset", ".", "setCount", "()", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/AbstractMapBasedMultiset.java#L299-L320", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Verify.java", "func_name": "Verify.verify", "original_string": "public static void verify(\n      boolean expression,\n      @Nullable String errorMessageTemplate,\n      @Nullable Object @Nullable ... errorMessageArgs) {\n    if (!expression) {\n      throw new VerifyException(lenientFormat(errorMessageTemplate, errorMessageArgs));\n    }\n  }", "language": "java", "code": "public static void verify(\n      boolean expression,\n      @Nullable String errorMessageTemplate,\n      @Nullable Object @Nullable ... errorMessageArgs) {\n    if (!expression) {\n      throw new VerifyException(lenientFormat(errorMessageTemplate, errorMessageArgs));\n    }\n  }", "code_tokens": ["public", "static", "void", "verify", "(", "boolean", "expression", ",", "@", "Nullable", "String", "errorMessageTemplate", ",", "@", "Nullable", "Object", "@", "Nullable", ".", ".", ".", "errorMessageArgs", ")", "{", "if", "(", "!", "expression", ")", "{", "throw", "new", "VerifyException", "(", "lenientFormat", "(", "errorMessageTemplate", ",", "errorMessageArgs", ")", ")", ";", "}", "}"], "docstring": "Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\ncustom message otherwise.\n\n@param expression a boolean expression\n@param errorMessageTemplate a template for the exception message should the check fail. The\nmessage is formed by replacing each {@code %s} placeholder in the template with an\nargument. These are matched by position - the first {@code %s} gets {@code\nerrorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in\nsquare braces. Unmatched placeholders will be left as-is.\n@param errorMessageArgs the arguments to be substituted into the message template. Arguments\nare converted to strings using {@link String#valueOf(Object)}.\n@throws VerifyException if {@code expression} is {@code false}\n@see Preconditions#checkState Preconditions.checkState()", "docstring_tokens": ["Ensures", "that", "{", "@code", "expression", "}", "is", "{", "@code", "true", "}", "throwing", "a", "{", "@code", "VerifyException", "}", "with", "a", "custom", "message", "otherwise", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Verify.java#L119-L126", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Verify.java", "func_name": "Verify.verify", "original_string": "public static void verify(boolean expression, @Nullable String errorMessageTemplate, char p1) {\n    if (!expression) {\n      throw new VerifyException(lenientFormat(errorMessageTemplate, p1));\n    }\n  }", "language": "java", "code": "public static void verify(boolean expression, @Nullable String errorMessageTemplate, char p1) {\n    if (!expression) {\n      throw new VerifyException(lenientFormat(errorMessageTemplate, p1));\n    }\n  }", "code_tokens": ["public", "static", "void", "verify", "(", "boolean", "expression", ",", "@", "Nullable", "String", "errorMessageTemplate", ",", "char", "p1", ")", "{", "if", "(", "!", "expression", ")", "{", "throw", "new", "VerifyException", "(", "lenientFormat", "(", "errorMessageTemplate", ",", "p1", ")", ")", ";", "}", "}"], "docstring": "Ensures that {@code expression} is {@code true}, throwing a {@code VerifyException} with a\ncustom message otherwise.\n\n<p>See {@link #verify(boolean, String, Object...)} for details.\n\n@since 23.1 (varargs overload since 17.0)", "docstring_tokens": ["Ensures", "that", "{", "@code", "expression", "}", "is", "{", "@code", "true", "}", "throwing", "a", "{", "@code", "VerifyException", "}", "with", "a", "custom", "message", "otherwise", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Verify.java#L136-L140", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Verify.java", "func_name": "Verify.verifyNotNull", "original_string": "@CanIgnoreReturnValue\n  public static <T> T verifyNotNull(\n      @Nullable T reference,\n      @Nullable String errorMessageTemplate,\n      @Nullable Object @Nullable ... errorMessageArgs) {\n    verify(reference != null, errorMessageTemplate, errorMessageArgs);\n    return reference;\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  public static <T> T verifyNotNull(\n      @Nullable T reference,\n      @Nullable String errorMessageTemplate,\n      @Nullable Object @Nullable ... errorMessageArgs) {\n    verify(reference != null, errorMessageTemplate, errorMessageArgs);\n    return reference;\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "public", "static", "<", "T", ">", "T", "verifyNotNull", "(", "@", "Nullable", "T", "reference", ",", "@", "Nullable", "String", "errorMessageTemplate", ",", "@", "Nullable", "Object", "@", "Nullable", ".", ".", ".", "errorMessageArgs", ")", "{", "verify", "(", "reference", "!=", "null", ",", "errorMessageTemplate", ",", "errorMessageArgs", ")", ";", "return", "reference", ";", "}"], "docstring": "Ensures that {@code reference} is non-null, throwing a {@code VerifyException} with a custom\nmessage otherwise.\n\n@param errorMessageTemplate a template for the exception message should the check fail. The\nmessage is formed by replacing each {@code %s} placeholder in the template with an\nargument. These are matched by position - the first {@code %s} gets {@code\nerrorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted message in\nsquare braces. Unmatched placeholders will be left as-is.\n@param errorMessageArgs the arguments to be substituted into the message template. Arguments\nare converted to strings using {@link String#valueOf(Object)}.\n@return {@code reference}, guaranteed to be non-null, for convenience\n@throws VerifyException if {@code reference} is {@code null}\n@see Preconditions#checkNotNull Preconditions.checkNotNull()", "docstring_tokens": ["Ensures", "that", "{", "@code", "reference", "}", "is", "non", "-", "null", "throwing", "a", "{", "@code", "VerifyException", "}", "with", "a", "custom", "message", "otherwise", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Verify.java#L495-L502", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Queues.java", "func_name": "Queues.newArrayDeque", "original_string": "public static <E> ArrayDeque<E> newArrayDeque(Iterable<? extends E> elements) {\n    if (elements instanceof Collection) {\n      return new ArrayDeque<E>(Collections2.cast(elements));\n    }\n    ArrayDeque<E> deque = new ArrayDeque<E>();\n    Iterables.addAll(deque, elements);\n    return deque;\n  }", "language": "java", "code": "public static <E> ArrayDeque<E> newArrayDeque(Iterable<? extends E> elements) {\n    if (elements instanceof Collection) {\n      return new ArrayDeque<E>(Collections2.cast(elements));\n    }\n    ArrayDeque<E> deque = new ArrayDeque<E>();\n    Iterables.addAll(deque, elements);\n    return deque;\n  }", "code_tokens": ["public", "static", "<", "E", ">", "ArrayDeque", "<", "E", ">", "newArrayDeque", "(", "Iterable", "<", "?", "extends", "E", ">", "elements", ")", "{", "if", "(", "elements", "instanceof", "Collection", ")", "{", "return", "new", "ArrayDeque", "<", "E", ">", "(", "Collections2", ".", "cast", "(", "elements", ")", ")", ";", "}", "ArrayDeque", "<", "E", ">", "deque", "=", "new", "ArrayDeque", "<", "E", ">", "(", ")", ";", "Iterables", ".", "addAll", "(", "deque", ",", "elements", ")", ";", "return", "deque", ";", "}"], "docstring": "Creates an {@code ArrayDeque} containing the elements of the specified iterable, in the order\nthey are returned by the iterable's iterator.\n\n@since 12.0", "docstring_tokens": ["Creates", "an", "{", "@code", "ArrayDeque", "}", "containing", "the", "elements", "of", "the", "specified", "iterable", "in", "the", "order", "they", "are", "returned", "by", "the", "iterable", "s", "iterator", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Queues.java#L75-L82", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Queues.java", "func_name": "Queues.newConcurrentLinkedQueue", "original_string": "@GwtIncompatible // ConcurrentLinkedQueue\n  public static <E> ConcurrentLinkedQueue<E> newConcurrentLinkedQueue(\n      Iterable<? extends E> elements) {\n    if (elements instanceof Collection) {\n      return new ConcurrentLinkedQueue<E>(Collections2.cast(elements));\n    }\n    ConcurrentLinkedQueue<E> queue = new ConcurrentLinkedQueue<E>();\n    Iterables.addAll(queue, elements);\n    return queue;\n  }", "language": "java", "code": "@GwtIncompatible // ConcurrentLinkedQueue\n  public static <E> ConcurrentLinkedQueue<E> newConcurrentLinkedQueue(\n      Iterable<? extends E> elements) {\n    if (elements instanceof Collection) {\n      return new ConcurrentLinkedQueue<E>(Collections2.cast(elements));\n    }\n    ConcurrentLinkedQueue<E> queue = new ConcurrentLinkedQueue<E>();\n    Iterables.addAll(queue, elements);\n    return queue;\n  }", "code_tokens": ["@", "GwtIncompatible", "// ConcurrentLinkedQueue", "public", "static", "<", "E", ">", "ConcurrentLinkedQueue", "<", "E", ">", "newConcurrentLinkedQueue", "(", "Iterable", "<", "?", "extends", "E", ">", "elements", ")", "{", "if", "(", "elements", "instanceof", "Collection", ")", "{", "return", "new", "ConcurrentLinkedQueue", "<", "E", ">", "(", "Collections2", ".", "cast", "(", "elements", ")", ")", ";", "}", "ConcurrentLinkedQueue", "<", "E", ">", "queue", "=", "new", "ConcurrentLinkedQueue", "<", "E", ">", "(", ")", ";", "Iterables", ".", "addAll", "(", "queue", ",", "elements", ")", ";", "return", "queue", ";", "}"], "docstring": "Creates a {@code ConcurrentLinkedQueue} containing the elements of the specified iterable, in\nthe order they are returned by the iterable's iterator.", "docstring_tokens": ["Creates", "a", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Queues.java#L96-L105", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Queues.java", "func_name": "Queues.newLinkedBlockingQueue", "original_string": "@GwtIncompatible // LinkedBlockingQueue\n  public static <E> LinkedBlockingQueue<E> newLinkedBlockingQueue(Iterable<? extends E> elements) {\n    if (elements instanceof Collection) {\n      return new LinkedBlockingQueue<E>(Collections2.cast(elements));\n    }\n    LinkedBlockingQueue<E> queue = new LinkedBlockingQueue<E>();\n    Iterables.addAll(queue, elements);\n    return queue;\n  }", "language": "java", "code": "@GwtIncompatible // LinkedBlockingQueue\n  public static <E> LinkedBlockingQueue<E> newLinkedBlockingQueue(Iterable<? extends E> elements) {\n    if (elements instanceof Collection) {\n      return new LinkedBlockingQueue<E>(Collections2.cast(elements));\n    }\n    LinkedBlockingQueue<E> queue = new LinkedBlockingQueue<E>();\n    Iterables.addAll(queue, elements);\n    return queue;\n  }", "code_tokens": ["@", "GwtIncompatible", "// LinkedBlockingQueue", "public", "static", "<", "E", ">", "LinkedBlockingQueue", "<", "E", ">", "newLinkedBlockingQueue", "(", "Iterable", "<", "?", "extends", "E", ">", "elements", ")", "{", "if", "(", "elements", "instanceof", "Collection", ")", "{", "return", "new", "LinkedBlockingQueue", "<", "E", ">", "(", "Collections2", ".", "cast", "(", "elements", ")", ")", ";", "}", "LinkedBlockingQueue", "<", "E", ">", "queue", "=", "new", "LinkedBlockingQueue", "<", "E", ">", "(", ")", ";", "Iterables", ".", "addAll", "(", "queue", ",", "elements", ")", ";", "return", "queue", ";", "}"], "docstring": "Creates a {@code LinkedBlockingQueue} with a capacity of {@link Integer#MAX_VALUE}, containing\nthe elements of the specified iterable, in the order they are returned by the iterable's\niterator.\n\n@param elements the elements that the queue should contain, in order\n@return a new {@code LinkedBlockingQueue} containing those elements", "docstring_tokens": ["Creates", "a", "{", "@code", "LinkedBlockingQueue", "}", "with", "a", "capacity", "of", "{", "@link", "Integer#MAX_VALUE", "}", "containing", "the", "elements", "of", "the", "specified", "iterable", "in", "the", "order", "they", "are", "returned", "by", "the", "iterable", "s", "iterator", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Queues.java#L173-L181", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Queues.java", "func_name": "Queues.newPriorityQueue", "original_string": "public static <E extends Comparable> PriorityQueue<E> newPriorityQueue(\n      Iterable<? extends E> elements) {\n    if (elements instanceof Collection) {\n      return new PriorityQueue<E>(Collections2.cast(elements));\n    }\n    PriorityQueue<E> queue = new PriorityQueue<E>();\n    Iterables.addAll(queue, elements);\n    return queue;\n  }", "language": "java", "code": "public static <E extends Comparable> PriorityQueue<E> newPriorityQueue(\n      Iterable<? extends E> elements) {\n    if (elements instanceof Collection) {\n      return new PriorityQueue<E>(Collections2.cast(elements));\n    }\n    PriorityQueue<E> queue = new PriorityQueue<E>();\n    Iterables.addAll(queue, elements);\n    return queue;\n  }", "code_tokens": ["public", "static", "<", "E", "extends", "Comparable", ">", "PriorityQueue", "<", "E", ">", "newPriorityQueue", "(", "Iterable", "<", "?", "extends", "E", ">", "elements", ")", "{", "if", "(", "elements", "instanceof", "Collection", ")", "{", "return", "new", "PriorityQueue", "<", "E", ">", "(", "Collections2", ".", "cast", "(", "elements", ")", ")", ";", "}", "PriorityQueue", "<", "E", ">", "queue", "=", "new", "PriorityQueue", "<", "E", ">", "(", ")", ";", "Iterables", ".", "addAll", "(", "queue", ",", "elements", ")", ";", "return", "queue", ";", "}"], "docstring": "Creates a {@code PriorityQueue} containing the given elements.\n\n<p><b>Note:</b> If the specified iterable is a {@code SortedSet} or a {@code PriorityQueue},\nthis priority queue will be ordered according to the same ordering.\n\n@since 11.0 (requires that {@code E} be {@code Comparable} since 15.0).", "docstring_tokens": ["Creates", "a", "{", "@code", "PriorityQueue", "}", "containing", "the", "given", "elements", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Queues.java#L237-L245", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Queues.java", "func_name": "Queues.drainUninterruptibly", "original_string": "@Beta\n  @CanIgnoreReturnValue\n  @GwtIncompatible // BlockingQueue\n  @SuppressWarnings(\"GoodTime\") // should accept a java.time.Duration\n  public static <E> int drainUninterruptibly(\n      BlockingQueue<E> q,\n      Collection<? super E> buffer,\n      int numElements,\n      long timeout,\n      TimeUnit unit) {\n    Preconditions.checkNotNull(buffer);\n    long deadline = System.nanoTime() + unit.toNanos(timeout);\n    int added = 0;\n    boolean interrupted = false;\n    try {\n      while (added < numElements) {\n        // we could rely solely on #poll, but #drainTo might be more efficient when there are\n        // multiple elements already available (e.g. LinkedBlockingQueue#drainTo locks only once)\n        added += q.drainTo(buffer, numElements - added);\n        if (added < numElements) { // not enough elements immediately available; will have to poll\n          E e; // written exactly once, by a successful (uninterrupted) invocation of #poll\n          while (true) {\n            try {\n              e = q.poll(deadline - System.nanoTime(), TimeUnit.NANOSECONDS);\n              break;\n            } catch (InterruptedException ex) {\n              interrupted = true; // note interruption and retry\n            }\n          }\n          if (e == null) {\n            break; // we already waited enough, and there are no more elements in sight\n          }\n          buffer.add(e);\n          added++;\n        }\n      }\n    } finally {\n      if (interrupted) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    return added;\n  }", "language": "java", "code": "@Beta\n  @CanIgnoreReturnValue\n  @GwtIncompatible // BlockingQueue\n  @SuppressWarnings(\"GoodTime\") // should accept a java.time.Duration\n  public static <E> int drainUninterruptibly(\n      BlockingQueue<E> q,\n      Collection<? super E> buffer,\n      int numElements,\n      long timeout,\n      TimeUnit unit) {\n    Preconditions.checkNotNull(buffer);\n    long deadline = System.nanoTime() + unit.toNanos(timeout);\n    int added = 0;\n    boolean interrupted = false;\n    try {\n      while (added < numElements) {\n        // we could rely solely on #poll, but #drainTo might be more efficient when there are\n        // multiple elements already available (e.g. LinkedBlockingQueue#drainTo locks only once)\n        added += q.drainTo(buffer, numElements - added);\n        if (added < numElements) { // not enough elements immediately available; will have to poll\n          E e; // written exactly once, by a successful (uninterrupted) invocation of #poll\n          while (true) {\n            try {\n              e = q.poll(deadline - System.nanoTime(), TimeUnit.NANOSECONDS);\n              break;\n            } catch (InterruptedException ex) {\n              interrupted = true; // note interruption and retry\n            }\n          }\n          if (e == null) {\n            break; // we already waited enough, and there are no more elements in sight\n          }\n          buffer.add(e);\n          added++;\n        }\n      }\n    } finally {\n      if (interrupted) {\n        Thread.currentThread().interrupt();\n      }\n    }\n    return added;\n  }", "code_tokens": ["@", "Beta", "@", "CanIgnoreReturnValue", "@", "GwtIncompatible", "// BlockingQueue", "@", "SuppressWarnings", "(", "\"GoodTime\"", ")", "// should accept a java.time.Duration", "public", "static", "<", "E", ">", "int", "drainUninterruptibly", "(", "BlockingQueue", "<", "E", ">", "q", ",", "Collection", "<", "?", "super", "E", ">", "buffer", ",", "int", "numElements", ",", "long", "timeout", ",", "TimeUnit", "unit", ")", "{", "Preconditions", ".", "checkNotNull", "(", "buffer", ")", ";", "long", "deadline", "=", "System", ".", "nanoTime", "(", ")", "+", "unit", ".", "toNanos", "(", "timeout", ")", ";", "int", "added", "=", "0", ";", "boolean", "interrupted", "=", "false", ";", "try", "{", "while", "(", "added", "<", "numElements", ")", "{", "// we could rely solely on #poll, but #drainTo might be more efficient when there are", "// multiple elements already available (e.g. LinkedBlockingQueue#drainTo locks only once)", "added", "+=", "q", ".", "drainTo", "(", "buffer", ",", "numElements", "-", "added", ")", ";", "if", "(", "added", "<", "numElements", ")", "{", "// not enough elements immediately available; will have to poll", "E", "e", ";", "// written exactly once, by a successful (uninterrupted) invocation of #poll", "while", "(", "true", ")", "{", "try", "{", "e", "=", "q", ".", "poll", "(", "deadline", "-", "System", ".", "nanoTime", "(", ")", ",", "TimeUnit", ".", "NANOSECONDS", ")", ";", "break", ";", "}", "catch", "(", "InterruptedException", "ex", ")", "{", "interrupted", "=", "true", ";", "// note interruption and retry", "}", "}", "if", "(", "e", "==", "null", ")", "{", "break", ";", "// we already waited enough, and there are no more elements in sight", "}", "buffer", ".", "add", "(", "e", ")", ";", "added", "++", ";", "}", "}", "}", "finally", "{", "if", "(", "interrupted", ")", "{", "Thread", ".", "currentThread", "(", ")", ".", "interrupt", "(", ")", ";", "}", "}", "return", "added", ";", "}"], "docstring": "Drains the queue as {@linkplain #drain(BlockingQueue, Collection, int, long, TimeUnit)}, but\nwith a different behavior in case it is interrupted while waiting. In that case, the operation\nwill continue as usual, and in the end the thread's interruption status will be set (no {@code\nInterruptedException} is thrown).\n\n@param q the blocking queue to be drained\n@param buffer where to add the transferred elements\n@param numElements the number of elements to be waited for\n@param timeout how long to wait before giving up, in units of {@code unit}\n@param unit a {@code TimeUnit} determining how to interpret the timeout parameter\n@return the number of elements transferred", "docstring_tokens": ["Drains", "the", "queue", "as", "{", "@linkplain", "#drain", "(", "BlockingQueue", "Collection", "int", "long", "TimeUnit", ")", "}", "but", "with", "a", "different", "behavior", "in", "case", "it", "is", "interrupted", "while", "waiting", ".", "In", "that", "case", "the", "operation", "will", "continue", "as", "usual", "and", "in", "the", "end", "the", "thread", "s", "interruption", "status", "will", "be", "set", "(", "no", "{", "@code", "InterruptedException", "}", "is", "thrown", ")", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Queues.java#L315-L357", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Queues.java", "func_name": "Queues.synchronizedQueue", "original_string": "public static <E> Queue<E> synchronizedQueue(Queue<E> queue) {\n    return Synchronized.queue(queue, null);\n  }", "language": "java", "code": "public static <E> Queue<E> synchronizedQueue(Queue<E> queue) {\n    return Synchronized.queue(queue, null);\n  }", "code_tokens": ["public", "static", "<", "E", ">", "Queue", "<", "E", ">", "synchronizedQueue", "(", "Queue", "<", "E", ">", "queue", ")", "{", "return", "Synchronized", ".", "queue", "(", "queue", ",", "null", ")", ";", "}"], "docstring": "Returns a synchronized (thread-safe) queue backed by the specified queue. In order to guarantee\nserial access, it is critical that <b>all</b> access to the backing queue is accomplished\nthrough the returned queue.\n\n<p>It is imperative that the user manually synchronize on the returned queue when accessing the\nqueue's iterator:\n\n<pre>{@code\nQueue<E> queue = Queues.synchronizedQueue(MinMaxPriorityQueue.<E>create());\n...\nqueue.add(element);  // Needn't be in synchronized block\n...\nsynchronized (queue) {  // Must synchronize on queue!\nIterator<E> i = queue.iterator(); // Must be in synchronized block\nwhile (i.hasNext()) {\nfoo(i.next());\n}\n}\n}</pre>\n\n<p>Failure to follow this advice may result in non-deterministic behavior.\n\n<p>The returned queue will be serializable if the specified queue is serializable.\n\n@param queue the queue to be wrapped in a synchronized view\n@return a synchronized view of the specified queue\n@since 14.0", "docstring_tokens": ["Returns", "a", "synchronized", "(", "thread", "-", "safe", ")", "queue", "backed", "by", "the", "specified", "queue", ".", "In", "order", "to", "guarantee", "serial", "access", "it", "is", "critical", "that", "<b", ">", "all<", "/", "b", ">", "access", "to", "the", "backing", "queue", "is", "accomplished", "through", "the", "returned", "queue", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Queues.java#L388-L390", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Queues.java", "func_name": "Queues.synchronizedDeque", "original_string": "public static <E> Deque<E> synchronizedDeque(Deque<E> deque) {\n    return Synchronized.deque(deque, null);\n  }", "language": "java", "code": "public static <E> Deque<E> synchronizedDeque(Deque<E> deque) {\n    return Synchronized.deque(deque, null);\n  }", "code_tokens": ["public", "static", "<", "E", ">", "Deque", "<", "E", ">", "synchronizedDeque", "(", "Deque", "<", "E", ">", "deque", ")", "{", "return", "Synchronized", ".", "deque", "(", "deque", ",", "null", ")", ";", "}"], "docstring": "Returns a synchronized (thread-safe) deque backed by the specified deque. In order to guarantee\nserial access, it is critical that <b>all</b> access to the backing deque is accomplished\nthrough the returned deque.\n\n<p>It is imperative that the user manually synchronize on the returned deque when accessing any\nof the deque's iterators:\n\n<pre>{@code\nDeque<E> deque = Queues.synchronizedDeque(Queues.<E>newArrayDeque());\n...\ndeque.add(element);  // Needn't be in synchronized block\n...\nsynchronized (deque) {  // Must synchronize on deque!\nIterator<E> i = deque.iterator(); // Must be in synchronized block\nwhile (i.hasNext()) {\nfoo(i.next());\n}\n}\n}</pre>\n\n<p>Failure to follow this advice may result in non-deterministic behavior.\n\n<p>The returned deque will be serializable if the specified deque is serializable.\n\n@param deque the deque to be wrapped in a synchronized view\n@return a synchronized view of the specified deque\n@since 15.0", "docstring_tokens": ["Returns", "a", "synchronized", "(", "thread", "-", "safe", ")", "deque", "backed", "by", "the", "specified", "deque", ".", "In", "order", "to", "guarantee", "serial", "access", "it", "is", "critical", "that", "<b", ">", "all<", "/", "b", ">", "access", "to", "the", "backing", "deque", "is", "accomplished", "through", "the", "returned", "deque", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Queues.java#L421-L423", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/StandardTable.java", "func_name": "StandardTable.removeMapping", "original_string": "private boolean removeMapping(Object rowKey, Object columnKey, Object value) {\n    if (containsMapping(rowKey, columnKey, value)) {\n      remove(rowKey, columnKey);\n      return true;\n    }\n    return false;\n  }", "language": "java", "code": "private boolean removeMapping(Object rowKey, Object columnKey, Object value) {\n    if (containsMapping(rowKey, columnKey, value)) {\n      remove(rowKey, columnKey);\n      return true;\n    }\n    return false;\n  }", "code_tokens": ["private", "boolean", "removeMapping", "(", "Object", "rowKey", ",", "Object", "columnKey", ",", "Object", "value", ")", "{", "if", "(", "containsMapping", "(", "rowKey", ",", "columnKey", ",", "value", ")", ")", "{", "remove", "(", "rowKey", ",", "columnKey", ")", ";", "return", "true", ";", "}", "return", "false", ";", "}"], "docstring": "Remove a row key / column key / value mapping, if present.", "docstring_tokens": ["Remove", "a", "row", "key", "/", "column", "key", "/", "value", "mapping", "if", "present", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/StandardTable.java#L188-L194", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/StandardTable.java", "func_name": "StandardTable.columnKeySet", "original_string": "@Override\n  public Set<C> columnKeySet() {\n    Set<C> result = columnKeySet;\n    return (result == null) ? columnKeySet = new ColumnKeySet() : result;\n  }", "language": "java", "code": "@Override\n  public Set<C> columnKeySet() {\n    Set<C> result = columnKeySet;\n    return (result == null) ? columnKeySet = new ColumnKeySet() : result;\n  }", "code_tokens": ["@", "Override", "public", "Set", "<", "C", ">", "columnKeySet", "(", ")", "{", "Set", "<", "C", ">", "result", "=", "columnKeySet", ";", "return", "(", "result", "==", "null", ")", "?", "columnKeySet", "=", "new", "ColumnKeySet", "(", ")", ":", "result", ";", "}"], "docstring": "{@inheritDoc}\n\n<p>The returned set has an iterator that does not support {@code remove()}.\n\n<p>The set's iterator traverses the columns of the first row, the columns of the second row,\netc., skipping any columns that have appeared previously.", "docstring_tokens": ["{", "@inheritDoc", "}"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/StandardTable.java#L607-L611", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/cache/CacheBuilderSpec.java", "func_name": "CacheBuilderSpec.parse", "original_string": "public static CacheBuilderSpec parse(String cacheBuilderSpecification) {\n    CacheBuilderSpec spec = new CacheBuilderSpec(cacheBuilderSpecification);\n    if (!cacheBuilderSpecification.isEmpty()) {\n      for (String keyValuePair : KEYS_SPLITTER.split(cacheBuilderSpecification)) {\n        List<String> keyAndValue = ImmutableList.copyOf(KEY_VALUE_SPLITTER.split(keyValuePair));\n        checkArgument(!keyAndValue.isEmpty(), \"blank key-value pair\");\n        checkArgument(\n            keyAndValue.size() <= 2,\n            \"key-value pair %s with more than one equals sign\",\n            keyValuePair);\n\n        // Find the ValueParser for the current key.\n        String key = keyAndValue.get(0);\n        ValueParser valueParser = VALUE_PARSERS.get(key);\n        checkArgument(valueParser != null, \"unknown key %s\", key);\n\n        String value = keyAndValue.size() == 1 ? null : keyAndValue.get(1);\n        valueParser.parse(spec, key, value);\n      }\n    }\n\n    return spec;\n  }", "language": "java", "code": "public static CacheBuilderSpec parse(String cacheBuilderSpecification) {\n    CacheBuilderSpec spec = new CacheBuilderSpec(cacheBuilderSpecification);\n    if (!cacheBuilderSpecification.isEmpty()) {\n      for (String keyValuePair : KEYS_SPLITTER.split(cacheBuilderSpecification)) {\n        List<String> keyAndValue = ImmutableList.copyOf(KEY_VALUE_SPLITTER.split(keyValuePair));\n        checkArgument(!keyAndValue.isEmpty(), \"blank key-value pair\");\n        checkArgument(\n            keyAndValue.size() <= 2,\n            \"key-value pair %s with more than one equals sign\",\n            keyValuePair);\n\n        // Find the ValueParser for the current key.\n        String key = keyAndValue.get(0);\n        ValueParser valueParser = VALUE_PARSERS.get(key);\n        checkArgument(valueParser != null, \"unknown key %s\", key);\n\n        String value = keyAndValue.size() == 1 ? null : keyAndValue.get(1);\n        valueParser.parse(spec, key, value);\n      }\n    }\n\n    return spec;\n  }", "code_tokens": ["public", "static", "CacheBuilderSpec", "parse", "(", "String", "cacheBuilderSpecification", ")", "{", "CacheBuilderSpec", "spec", "=", "new", "CacheBuilderSpec", "(", "cacheBuilderSpecification", ")", ";", "if", "(", "!", "cacheBuilderSpecification", ".", "isEmpty", "(", ")", ")", "{", "for", "(", "String", "keyValuePair", ":", "KEYS_SPLITTER", ".", "split", "(", "cacheBuilderSpecification", ")", ")", "{", "List", "<", "String", ">", "keyAndValue", "=", "ImmutableList", ".", "copyOf", "(", "KEY_VALUE_SPLITTER", ".", "split", "(", "keyValuePair", ")", ")", ";", "checkArgument", "(", "!", "keyAndValue", ".", "isEmpty", "(", ")", ",", "\"blank key-value pair\"", ")", ";", "checkArgument", "(", "keyAndValue", ".", "size", "(", ")", "<=", "2", ",", "\"key-value pair %s with more than one equals sign\"", ",", "keyValuePair", ")", ";", "// Find the ValueParser for the current key.", "String", "key", "=", "keyAndValue", ".", "get", "(", "0", ")", ";", "ValueParser", "valueParser", "=", "VALUE_PARSERS", ".", "get", "(", "key", ")", ";", "checkArgument", "(", "valueParser", "!=", "null", ",", "\"unknown key %s\"", ",", "key", ")", ";", "String", "value", "=", "keyAndValue", ".", "size", "(", ")", "==", "1", "?", "null", ":", "keyAndValue", ".", "get", "(", "1", ")", ";", "valueParser", ".", "parse", "(", "spec", ",", "key", ",", "value", ")", ";", "}", "}", "return", "spec", ";", "}"], "docstring": "Creates a CacheBuilderSpec from a string.\n\n@param cacheBuilderSpecification the string form", "docstring_tokens": ["Creates", "a", "CacheBuilderSpec", "from", "a", "string", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/cache/CacheBuilderSpec.java#L136-L158", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/cache/CacheBuilderSpec.java", "func_name": "CacheBuilderSpec.toCacheBuilder", "original_string": "CacheBuilder<Object, Object> toCacheBuilder() {\n    CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder();\n    if (initialCapacity != null) {\n      builder.initialCapacity(initialCapacity);\n    }\n    if (maximumSize != null) {\n      builder.maximumSize(maximumSize);\n    }\n    if (maximumWeight != null) {\n      builder.maximumWeight(maximumWeight);\n    }\n    if (concurrencyLevel != null) {\n      builder.concurrencyLevel(concurrencyLevel);\n    }\n    if (keyStrength != null) {\n      switch (keyStrength) {\n        case WEAK:\n          builder.weakKeys();\n          break;\n        default:\n          throw new AssertionError();\n      }\n    }\n    if (valueStrength != null) {\n      switch (valueStrength) {\n        case SOFT:\n          builder.softValues();\n          break;\n        case WEAK:\n          builder.weakValues();\n          break;\n        default:\n          throw new AssertionError();\n      }\n    }\n    if (recordStats != null && recordStats) {\n      builder.recordStats();\n    }\n    if (writeExpirationTimeUnit != null) {\n      builder.expireAfterWrite(writeExpirationDuration, writeExpirationTimeUnit);\n    }\n    if (accessExpirationTimeUnit != null) {\n      builder.expireAfterAccess(accessExpirationDuration, accessExpirationTimeUnit);\n    }\n    if (refreshTimeUnit != null) {\n      builder.refreshAfterWrite(refreshDuration, refreshTimeUnit);\n    }\n\n    return builder;\n  }", "language": "java", "code": "CacheBuilder<Object, Object> toCacheBuilder() {\n    CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder();\n    if (initialCapacity != null) {\n      builder.initialCapacity(initialCapacity);\n    }\n    if (maximumSize != null) {\n      builder.maximumSize(maximumSize);\n    }\n    if (maximumWeight != null) {\n      builder.maximumWeight(maximumWeight);\n    }\n    if (concurrencyLevel != null) {\n      builder.concurrencyLevel(concurrencyLevel);\n    }\n    if (keyStrength != null) {\n      switch (keyStrength) {\n        case WEAK:\n          builder.weakKeys();\n          break;\n        default:\n          throw new AssertionError();\n      }\n    }\n    if (valueStrength != null) {\n      switch (valueStrength) {\n        case SOFT:\n          builder.softValues();\n          break;\n        case WEAK:\n          builder.weakValues();\n          break;\n        default:\n          throw new AssertionError();\n      }\n    }\n    if (recordStats != null && recordStats) {\n      builder.recordStats();\n    }\n    if (writeExpirationTimeUnit != null) {\n      builder.expireAfterWrite(writeExpirationDuration, writeExpirationTimeUnit);\n    }\n    if (accessExpirationTimeUnit != null) {\n      builder.expireAfterAccess(accessExpirationDuration, accessExpirationTimeUnit);\n    }\n    if (refreshTimeUnit != null) {\n      builder.refreshAfterWrite(refreshDuration, refreshTimeUnit);\n    }\n\n    return builder;\n  }", "code_tokens": ["CacheBuilder", "<", "Object", ",", "Object", ">", "toCacheBuilder", "(", ")", "{", "CacheBuilder", "<", "Object", ",", "Object", ">", "builder", "=", "CacheBuilder", ".", "newBuilder", "(", ")", ";", "if", "(", "initialCapacity", "!=", "null", ")", "{", "builder", ".", "initialCapacity", "(", "initialCapacity", ")", ";", "}", "if", "(", "maximumSize", "!=", "null", ")", "{", "builder", ".", "maximumSize", "(", "maximumSize", ")", ";", "}", "if", "(", "maximumWeight", "!=", "null", ")", "{", "builder", ".", "maximumWeight", "(", "maximumWeight", ")", ";", "}", "if", "(", "concurrencyLevel", "!=", "null", ")", "{", "builder", ".", "concurrencyLevel", "(", "concurrencyLevel", ")", ";", "}", "if", "(", "keyStrength", "!=", "null", ")", "{", "switch", "(", "keyStrength", ")", "{", "case", "WEAK", ":", "builder", ".", "weakKeys", "(", ")", ";", "break", ";", "default", ":", "throw", "new", "AssertionError", "(", ")", ";", "}", "}", "if", "(", "valueStrength", "!=", "null", ")", "{", "switch", "(", "valueStrength", ")", "{", "case", "SOFT", ":", "builder", ".", "softValues", "(", ")", ";", "break", ";", "case", "WEAK", ":", "builder", ".", "weakValues", "(", ")", ";", "break", ";", "default", ":", "throw", "new", "AssertionError", "(", ")", ";", "}", "}", "if", "(", "recordStats", "!=", "null", "&&", "recordStats", ")", "{", "builder", ".", "recordStats", "(", ")", ";", "}", "if", "(", "writeExpirationTimeUnit", "!=", "null", ")", "{", "builder", ".", "expireAfterWrite", "(", "writeExpirationDuration", ",", "writeExpirationTimeUnit", ")", ";", "}", "if", "(", "accessExpirationTimeUnit", "!=", "null", ")", "{", "builder", ".", "expireAfterAccess", "(", "accessExpirationDuration", ",", "accessExpirationTimeUnit", ")", ";", "}", "if", "(", "refreshTimeUnit", "!=", "null", ")", "{", "builder", ".", "refreshAfterWrite", "(", "refreshDuration", ",", "refreshTimeUnit", ")", ";", "}", "return", "builder", ";", "}"], "docstring": "Returns a CacheBuilder configured according to this instance's specification.", "docstring_tokens": ["Returns", "a", "CacheBuilder", "configured", "according", "to", "this", "instance", "s", "specification", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/cache/CacheBuilderSpec.java#L167-L216", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/cache/CacheBuilderSpec.java", "func_name": "CacheBuilderSpec.durationInNanos", "original_string": "@NullableDecl\n  private static Long durationInNanos(long duration, @NullableDecl TimeUnit unit) {\n    return (unit == null) ? null : unit.toNanos(duration);\n  }", "language": "java", "code": "@NullableDecl\n  private static Long durationInNanos(long duration, @NullableDecl TimeUnit unit) {\n    return (unit == null) ? null : unit.toNanos(duration);\n  }", "code_tokens": ["@", "NullableDecl", "private", "static", "Long", "durationInNanos", "(", "long", "duration", ",", "@", "NullableDecl", "TimeUnit", "unit", ")", "{", "return", "(", "unit", "==", "null", ")", "?", "null", ":", "unit", ".", "toNanos", "(", "duration", ")", ";", "}"], "docstring": "Converts an expiration duration/unit pair into a single Long for hashing and equality. Uses\nnanos to match CacheBuilder implementation.", "docstring_tokens": ["Converts", "an", "expiration", "duration", "/", "unit", "pair", "into", "a", "single", "Long", "for", "hashing", "and", "equality", ".", "Uses", "nanos", "to", "match", "CacheBuilder", "implementation", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/cache/CacheBuilderSpec.java#L282-L285", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/EnumBiMap.java", "func_name": "EnumBiMap.create", "original_string": "public static <K extends Enum<K>, V extends Enum<V>> EnumBiMap<K, V> create(\n      Class<K> keyType, Class<V> valueType) {\n    return new EnumBiMap<>(keyType, valueType);\n  }", "language": "java", "code": "public static <K extends Enum<K>, V extends Enum<V>> EnumBiMap<K, V> create(\n      Class<K> keyType, Class<V> valueType) {\n    return new EnumBiMap<>(keyType, valueType);\n  }", "code_tokens": ["public", "static", "<", "K", "extends", "Enum", "<", "K", ">", ",", "V", "extends", "Enum", "<", "V", ">", ">", "EnumBiMap", "<", "K", ",", "V", ">", "create", "(", "Class", "<", "K", ">", "keyType", ",", "Class", "<", "V", ">", "valueType", ")", "{", "return", "new", "EnumBiMap", "<>", "(", "keyType", ",", "valueType", ")", ";", "}"], "docstring": "Returns a new, empty {@code EnumBiMap} using the specified key and value types.\n\n@param keyType the key type\n@param valueType the value type", "docstring_tokens": ["Returns", "a", "new", "empty", "{", "@code", "EnumBiMap", "}", "using", "the", "specified", "key", "and", "value", "types", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/EnumBiMap.java#L51-L54", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Comparators.java", "func_name": "Comparators.isInOrder", "original_string": "@Beta\n  public static <T> boolean isInOrder(Iterable<? extends T> iterable, Comparator<T> comparator) {\n    checkNotNull(comparator);\n    Iterator<? extends T> it = iterable.iterator();\n    if (it.hasNext()) {\n      T prev = it.next();\n      while (it.hasNext()) {\n        T next = it.next();\n        if (comparator.compare(prev, next) > 0) {\n          return false;\n        }\n        prev = next;\n      }\n    }\n    return true;\n  }", "language": "java", "code": "@Beta\n  public static <T> boolean isInOrder(Iterable<? extends T> iterable, Comparator<T> comparator) {\n    checkNotNull(comparator);\n    Iterator<? extends T> it = iterable.iterator();\n    if (it.hasNext()) {\n      T prev = it.next();\n      while (it.hasNext()) {\n        T next = it.next();\n        if (comparator.compare(prev, next) > 0) {\n          return false;\n        }\n        prev = next;\n      }\n    }\n    return true;\n  }", "code_tokens": ["@", "Beta", "public", "static", "<", "T", ">", "boolean", "isInOrder", "(", "Iterable", "<", "?", "extends", "T", ">", "iterable", ",", "Comparator", "<", "T", ">", "comparator", ")", "{", "checkNotNull", "(", "comparator", ")", ";", "Iterator", "<", "?", "extends", "T", ">", "it", "=", "iterable", ".", "iterator", "(", ")", ";", "if", "(", "it", ".", "hasNext", "(", ")", ")", "{", "T", "prev", "=", "it", ".", "next", "(", ")", ";", "while", "(", "it", ".", "hasNext", "(", ")", ")", "{", "T", "next", "=", "it", ".", "next", "(", ")", ";", "if", "(", "comparator", ".", "compare", "(", "prev", ",", "next", ")", ">", "0", ")", "{", "return", "false", ";", "}", "prev", "=", "next", ";", "}", "}", "return", "true", ";", "}"], "docstring": "Returns {@code true} if each element in {@code iterable} after the first is greater than or\nequal to the element that preceded it, according to the specified comparator. Note that this is\nalways true when the iterable has fewer than two elements.", "docstring_tokens": ["Returns", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Comparators.java#L73-L88", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Comparators.java", "func_name": "Comparators.least", "original_string": "public static <T> Collector<T, ?, List<T>> least(int k, Comparator<? super T> comparator) {\n    checkNonnegative(k, \"k\");\n    checkNotNull(comparator);\n    return Collector.of(\n        () -> TopKSelector.<T>least(k, comparator),\n        TopKSelector::offer,\n        TopKSelector::combine,\n        TopKSelector::topK,\n        Collector.Characteristics.UNORDERED);\n  }", "language": "java", "code": "public static <T> Collector<T, ?, List<T>> least(int k, Comparator<? super T> comparator) {\n    checkNonnegative(k, \"k\");\n    checkNotNull(comparator);\n    return Collector.of(\n        () -> TopKSelector.<T>least(k, comparator),\n        TopKSelector::offer,\n        TopKSelector::combine,\n        TopKSelector::topK,\n        Collector.Characteristics.UNORDERED);\n  }", "code_tokens": ["public", "static", "<", "T", ">", "Collector", "<", "T", ",", "?", ",", "List", "<", "T", ">", ">", "least", "(", "int", "k", ",", "Comparator", "<", "?", "super", "T", ">", "comparator", ")", "{", "checkNonnegative", "(", "k", ",", "\"k\"", ")", ";", "checkNotNull", "(", "comparator", ")", ";", "return", "Collector", ".", "of", "(", "(", ")", "->", "TopKSelector", ".", "<", "T", ">", "least", "(", "k", ",", "comparator", ")", ",", "TopKSelector", "::", "offer", ",", "TopKSelector", "::", "combine", ",", "TopKSelector", "::", "topK", ",", "Collector", ".", "Characteristics", ".", "UNORDERED", ")", ";", "}"], "docstring": "Returns a {@code Collector} that returns the {@code k} smallest (relative to the specified\n{@code Comparator}) input elements, in ascending order, as an unmodifiable {@code List}. Ties\nare broken arbitrarily.\n\n<p>For example:\n\n<pre>{@code\nStream.of(\"foo\", \"quux\", \"banana\", \"elephant\")\n.collect(least(2, comparingInt(String::length)))\n// returns {\"foo\", \"quux\"}\n}</pre>\n\n<p>This {@code Collector} uses O(k) memory and takes expected time O(n) (worst-case O(n log\nk)), as opposed to e.g. {@code Stream.sorted(comparator).limit(k)}, which currently takes O(n\nlog n) time and O(n) space.\n\n@throws IllegalArgumentException if {@code k < 0}\n@since 22.0", "docstring_tokens": ["Returns", "a", "{", "@code", "Collector", "}", "that", "returns", "the", "{", "@code", "k", "}", "smallest", "(", "relative", "to", "the", "specified", "{", "@code", "Comparator", "}", ")", "input", "elements", "in", "ascending", "order", "as", "an", "unmodifiable", "{", "@code", "List", "}", ".", "Ties", "are", "broken", "arbitrarily", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Comparators.java#L133-L142", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Comparators.java", "func_name": "Comparators.emptiesFirst", "original_string": "@Beta\n  public static <T> Comparator<Optional<T>> emptiesFirst(Comparator<? super T> valueComparator) {\n    checkNotNull(valueComparator);\n    return Comparator.comparing(o -> o.orElse(null), Comparator.nullsFirst(valueComparator));\n  }", "language": "java", "code": "@Beta\n  public static <T> Comparator<Optional<T>> emptiesFirst(Comparator<? super T> valueComparator) {\n    checkNotNull(valueComparator);\n    return Comparator.comparing(o -> o.orElse(null), Comparator.nullsFirst(valueComparator));\n  }", "code_tokens": ["@", "Beta", "public", "static", "<", "T", ">", "Comparator", "<", "Optional", "<", "T", ">", ">", "emptiesFirst", "(", "Comparator", "<", "?", "super", "T", ">", "valueComparator", ")", "{", "checkNotNull", "(", "valueComparator", ")", ";", "return", "Comparator", ".", "comparing", "(", "o", "->", "o", ".", "orElse", "(", "null", ")", ",", "Comparator", ".", "nullsFirst", "(", "valueComparator", ")", ")", ";", "}"], "docstring": "Returns a comparator of {@link Optional} values which treats {@link Optional#empty} as less\nthan all other values, and orders the rest using {@code valueComparator} on the contained\nvalue.\n\n@since 22.0", "docstring_tokens": ["Returns", "a", "comparator", "of", "{", "@link", "Optional", "}", "values", "which", "treats", "{", "@link", "Optional#empty", "}", "as", "less", "than", "all", "other", "values", "and", "orders", "the", "rest", "using", "{", "@code", "valueComparator", "}", "on", "the", "contained", "value", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Comparators.java#L175-L179", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Comparators.java", "func_name": "Comparators.emptiesLast", "original_string": "@Beta\n  public static <T> Comparator<Optional<T>> emptiesLast(Comparator<? super T> valueComparator) {\n    checkNotNull(valueComparator);\n    return Comparator.comparing(o -> o.orElse(null), Comparator.nullsLast(valueComparator));\n  }", "language": "java", "code": "@Beta\n  public static <T> Comparator<Optional<T>> emptiesLast(Comparator<? super T> valueComparator) {\n    checkNotNull(valueComparator);\n    return Comparator.comparing(o -> o.orElse(null), Comparator.nullsLast(valueComparator));\n  }", "code_tokens": ["@", "Beta", "public", "static", "<", "T", ">", "Comparator", "<", "Optional", "<", "T", ">", ">", "emptiesLast", "(", "Comparator", "<", "?", "super", "T", ">", "valueComparator", ")", "{", "checkNotNull", "(", "valueComparator", ")", ";", "return", "Comparator", ".", "comparing", "(", "o", "->", "o", ".", "orElse", "(", "null", ")", ",", "Comparator", ".", "nullsLast", "(", "valueComparator", ")", ")", ";", "}"], "docstring": "Returns a comparator of {@link Optional} values which treats {@link Optional#empty} as greater\nthan all other values, and orders the rest using {@code valueComparator} on the contained\nvalue.\n\n@since 22.0", "docstring_tokens": ["Returns", "a", "comparator", "of", "{", "@link", "Optional", "}", "values", "which", "treats", "{", "@link", "Optional#empty", "}", "as", "greater", "than", "all", "other", "values", "and", "orders", "the", "rest", "using", "{", "@code", "valueComparator", "}", "on", "the", "contained", "value", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Comparators.java#L188-L192", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/io/CharSource.java", "func_name": "CharSource.lines", "original_string": "@Beta\n  @MustBeClosed\n  public Stream<String> lines() throws IOException {\n    BufferedReader reader = openBufferedStream();\n    return reader\n        .lines()\n        .onClose(\n            () -> {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                throw new UncheckedIOException(e);\n              }\n            });\n  }", "language": "java", "code": "@Beta\n  @MustBeClosed\n  public Stream<String> lines() throws IOException {\n    BufferedReader reader = openBufferedStream();\n    return reader\n        .lines()\n        .onClose(\n            () -> {\n              try {\n                reader.close();\n              } catch (IOException e) {\n                throw new UncheckedIOException(e);\n              }\n            });\n  }", "code_tokens": ["@", "Beta", "@", "MustBeClosed", "public", "Stream", "<", "String", ">", "lines", "(", ")", "throws", "IOException", "{", "BufferedReader", "reader", "=", "openBufferedStream", "(", ")", ";", "return", "reader", ".", "lines", "(", ")", ".", "onClose", "(", "(", ")", "->", "{", "try", "{", "reader", ".", "close", "(", ")", ";", "}", "catch", "(", "IOException", "e", ")", "{", "throw", "new", "UncheckedIOException", "(", "e", ")", ";", "}", "}", ")", ";", "}"], "docstring": "Opens a new {@link Stream} for reading text one line at a time from this source. This method\nreturns a new, independent stream each time it is called.\n\n<p>The returned stream is lazy and only reads from the source in the terminal operation. If an\nI/O error occurs while the stream is reading from the source or when the stream is closed, an\n{@link UncheckedIOException} is thrown.\n\n<p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of\ntext that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n\\n}. If the source's content does not end in a line termination sequence, it is treated as if\nit does.\n\n<p>The caller is responsible for ensuring that the returned stream is closed. For example:\n\n<pre>{@code\ntry (Stream<String> lines = source.lines()) {\nlines.map(...)\n.filter(...)\n.forEach(...);\n}\n}</pre>\n\n@throws IOException if an I/O error occurs while opening the stream\n@since 22.0", "docstring_tokens": ["Opens", "a", "new", "{", "@link", "Stream", "}", "for", "reading", "text", "one", "line", "at", "a", "time", "from", "this", "source", ".", "This", "method", "returns", "a", "new", "independent", "stream", "each", "time", "it", "is", "called", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/io/CharSource.java#L144-L158", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/io/CharSource.java", "func_name": "CharSource.forEachLine", "original_string": "@Beta\n  public void forEachLine(Consumer<? super String> action) throws IOException {\n    try (Stream<String> lines = lines()) {\n      // The lines should be ordered regardless in most cases, but use forEachOrdered to be sure\n      lines.forEachOrdered(action);\n    } catch (UncheckedIOException e) {\n      throw e.getCause();\n    }\n  }", "language": "java", "code": "@Beta\n  public void forEachLine(Consumer<? super String> action) throws IOException {\n    try (Stream<String> lines = lines()) {\n      // The lines should be ordered regardless in most cases, but use forEachOrdered to be sure\n      lines.forEachOrdered(action);\n    } catch (UncheckedIOException e) {\n      throw e.getCause();\n    }\n  }", "code_tokens": ["@", "Beta", "public", "void", "forEachLine", "(", "Consumer", "<", "?", "super", "String", ">", "action", ")", "throws", "IOException", "{", "try", "(", "Stream", "<", "String", ">", "lines", "=", "lines", "(", ")", ")", "{", "// The lines should be ordered regardless in most cases, but use forEachOrdered to be sure", "lines", ".", "forEachOrdered", "(", "action", ")", ";", "}", "catch", "(", "UncheckedIOException", "e", ")", "{", "throw", "e", ".", "getCause", "(", ")", ";", "}", "}"], "docstring": "Reads all lines of text from this source, running the given {@code action} for each line as it\nis read.\n\n<p>Like {@link BufferedReader#readLine()}, this method considers a line to be a sequence of\ntext that is terminated by (but does not include) one of {@code \\r\\n}, {@code \\r} or {@code\n\\n}. If the source's content does not end in a line termination sequence, it is treated as if\nit does.\n\n@throws IOException if an I/O error occurs while reading from this source or if {@code action}\nthrows an {@code UncheckedIOException}\n@since 22.0", "docstring_tokens": ["Reads", "all", "lines", "of", "text", "from", "this", "source", "running", "the", "given", "{", "@code", "action", "}", "for", "each", "line", "as", "it", "is", "read", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/io/CharSource.java#L381-L389", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Optional.java", "func_name": "Optional.fromNullable", "original_string": "public static <T> Optional<T> fromNullable(@Nullable T nullableReference) {\n    return (nullableReference == null) ? Optional.<T>absent() : new Present<T>(nullableReference);\n  }", "language": "java", "code": "public static <T> Optional<T> fromNullable(@Nullable T nullableReference) {\n    return (nullableReference == null) ? Optional.<T>absent() : new Present<T>(nullableReference);\n  }", "code_tokens": ["public", "static", "<", "T", ">", "Optional", "<", "T", ">", "fromNullable", "(", "@", "Nullable", "T", "nullableReference", ")", "{", "return", "(", "nullableReference", "==", "null", ")", "?", "Optional", ".", "<", "T", ">", "absent", "(", ")", ":", "new", "Present", "<", "T", ">", "(", "nullableReference", ")", ";", "}"], "docstring": "If {@code nullableReference} is non-null, returns an {@code Optional} instance containing that\nreference; otherwise returns {@link Optional#absent}.\n\n<p><b>Comparison to {@code java.util.Optional}:</b> this method is equivalent to Java 8's\n{@code Optional.ofNullable}.", "docstring_tokens": ["If", "{", "@code", "nullableReference", "}", "is", "non", "-", "null", "returns", "an", "{", "@code", "Optional", "}", "instance", "containing", "that", "reference", ";", "otherwise", "returns", "{", "@link", "Optional#absent", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Optional.java#L113-L115", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Optional.java", "func_name": "Optional.fromJavaUtil", "original_string": "public static <T> @Nullable Optional<T> fromJavaUtil(\n      java.util.@Nullable Optional<T> javaUtilOptional) {\n    return (javaUtilOptional == null) ? null : fromNullable(javaUtilOptional.orElse(null));\n  }", "language": "java", "code": "public static <T> @Nullable Optional<T> fromJavaUtil(\n      java.util.@Nullable Optional<T> javaUtilOptional) {\n    return (javaUtilOptional == null) ? null : fromNullable(javaUtilOptional.orElse(null));\n  }", "code_tokens": ["public", "static", "<", "T", ">", "@", "Nullable", "Optional", "<", "T", ">", "fromJavaUtil", "(", "java", ".", "util", ".", "@", "Nullable", "Optional", "<", "T", ">", "javaUtilOptional", ")", "{", "return", "(", "javaUtilOptional", "==", "null", ")", "?", "null", ":", "fromNullable", "(", "javaUtilOptional", ".", "orElse", "(", "null", ")", ")", ";", "}"], "docstring": "Returns the equivalent {@code com.google.common.base.Optional} value to the given {@code\njava.util.Optional}, or {@code null} if the argument is null.\n\n@since 21.0", "docstring_tokens": ["Returns", "the", "equivalent", "{", "@code", "com", ".", "google", ".", "common", ".", "base", ".", "Optional", "}", "value", "to", "the", "given", "{", "@code", "java", ".", "util", ".", "Optional", "}", "or", "{", "@code", "null", "}", "if", "the", "argument", "is", "null", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Optional.java#L123-L126", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Optional.java", "func_name": "Optional.toJavaUtil", "original_string": "public static <T> java.util.@Nullable Optional<T> toJavaUtil(\n      @Nullable Optional<T> googleOptional) {\n    return googleOptional == null ? null : googleOptional.toJavaUtil();\n  }", "language": "java", "code": "public static <T> java.util.@Nullable Optional<T> toJavaUtil(\n      @Nullable Optional<T> googleOptional) {\n    return googleOptional == null ? null : googleOptional.toJavaUtil();\n  }", "code_tokens": ["public", "static", "<", "T", ">", "java", ".", "util", ".", "@", "Nullable", "Optional", "<", "T", ">", "toJavaUtil", "(", "@", "Nullable", "Optional", "<", "T", ">", "googleOptional", ")", "{", "return", "googleOptional", "==", "null", "?", "null", ":", "googleOptional", ".", "toJavaUtil", "(", ")", ";", "}"], "docstring": "Returns the equivalent {@code java.util.Optional} value to the given {@code\ncom.google.common.base.Optional}, or {@code null} if the argument is null.\n\n<p>If {@code googleOptional} is known to be non-null, use {@code googleOptional.toJavaUtil()}\ninstead.\n\n<p>Unfortunately, the method reference {@code Optional::toJavaUtil} will not work, because it\ncould refer to either the static or instance version of this method. Write out the lambda\nexpression {@code o -> Optional.toJavaUtil(o)} instead.\n\n@since 21.0", "docstring_tokens": ["Returns", "the", "equivalent", "{", "@code", "java", ".", "util", ".", "Optional", "}", "value", "to", "the", "given", "{", "@code", "com", ".", "google", ".", "common", ".", "base", ".", "Optional", "}", "or", "{", "@code", "null", "}", "if", "the", "argument", "is", "null", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Optional.java#L141-L144", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Optional.java", "func_name": "Optional.toJavaUtil", "original_string": "public java.util.Optional<T> toJavaUtil() {\n    return java.util.Optional.ofNullable(orNull());\n  }", "language": "java", "code": "public java.util.Optional<T> toJavaUtil() {\n    return java.util.Optional.ofNullable(orNull());\n  }", "code_tokens": ["public", "java", ".", "util", ".", "Optional", "<", "T", ">", "toJavaUtil", "(", ")", "{", "return", "java", ".", "util", ".", "Optional", ".", "ofNullable", "(", "orNull", "(", ")", ")", ";", "}"], "docstring": "Returns the equivalent {@code java.util.Optional} value to this optional.\n\n<p>Unfortunately, the method reference {@code Optional::toJavaUtil} will not work, because it\ncould refer to either the static or instance version of this method. Write out the lambda\nexpression {@code o -> o.toJavaUtil()} instead.\n\n@since 21.0", "docstring_tokens": ["Returns", "the", "equivalent", "{", "@code", "java", ".", "util", ".", "Optional", "}", "value", "to", "this", "optional", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Optional.java#L155-L157", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Optional.java", "func_name": "Optional.presentInstances", "original_string": "@Beta\n  public static <T> Iterable<T> presentInstances(\n      final Iterable<? extends Optional<? extends T>> optionals) {\n    checkNotNull(optionals);\n    return new Iterable<T>() {\n      @Override\n      public Iterator<T> iterator() {\n        return new AbstractIterator<T>() {\n          private final Iterator<? extends Optional<? extends T>> iterator =\n              checkNotNull(optionals.iterator());\n\n          @Override\n          protected T computeNext() {\n            while (iterator.hasNext()) {\n              Optional<? extends T> optional = iterator.next();\n              if (optional.isPresent()) {\n                return optional.get();\n              }\n            }\n            return endOfData();\n          }\n        };\n      }\n    };\n  }", "language": "java", "code": "@Beta\n  public static <T> Iterable<T> presentInstances(\n      final Iterable<? extends Optional<? extends T>> optionals) {\n    checkNotNull(optionals);\n    return new Iterable<T>() {\n      @Override\n      public Iterator<T> iterator() {\n        return new AbstractIterator<T>() {\n          private final Iterator<? extends Optional<? extends T>> iterator =\n              checkNotNull(optionals.iterator());\n\n          @Override\n          protected T computeNext() {\n            while (iterator.hasNext()) {\n              Optional<? extends T> optional = iterator.next();\n              if (optional.isPresent()) {\n                return optional.get();\n              }\n            }\n            return endOfData();\n          }\n        };\n      }\n    };\n  }", "code_tokens": ["@", "Beta", "public", "static", "<", "T", ">", "Iterable", "<", "T", ">", "presentInstances", "(", "final", "Iterable", "<", "?", "extends", "Optional", "<", "?", "extends", "T", ">", ">", "optionals", ")", "{", "checkNotNull", "(", "optionals", ")", ";", "return", "new", "Iterable", "<", "T", ">", "(", ")", "{", "@", "Override", "public", "Iterator", "<", "T", ">", "iterator", "(", ")", "{", "return", "new", "AbstractIterator", "<", "T", ">", "(", ")", "{", "private", "final", "Iterator", "<", "?", "extends", "Optional", "<", "?", "extends", "T", ">", ">", "iterator", "=", "checkNotNull", "(", "optionals", ".", "iterator", "(", ")", ")", ";", "@", "Override", "protected", "T", "computeNext", "(", ")", "{", "while", "(", "iterator", ".", "hasNext", "(", ")", ")", "{", "Optional", "<", "?", "extends", "T", ">", "optional", "=", "iterator", ".", "next", "(", ")", ";", "if", "(", "optional", ".", "isPresent", "(", ")", ")", "{", "return", "optional", ".", "get", "(", ")", ";", "}", "}", "return", "endOfData", "(", ")", ";", "}", "}", ";", "}", "}", ";", "}"], "docstring": "Returns the value of each present instance from the supplied {@code optionals}, in order,\nskipping over occurrences of {@link Optional#absent}. Iterators are unmodifiable and are\nevaluated lazily.\n\n<p><b>Comparison to {@code java.util.Optional}:</b> this method has no equivalent in Java 8's\n{@code Optional} class; use {@code\noptionals.stream().filter(Optional::isPresent).map(Optional::get)} instead.\n\n@since 11.0 (generics widened in 13.0)", "docstring_tokens": ["Returns", "the", "value", "of", "each", "present", "instance", "from", "the", "supplied", "{", "@code", "optionals", "}", "in", "order", "skipping", "over", "occurrences", "of", "{", "@link", "Optional#absent", "}", ".", "Iterators", "are", "unmodifiable", "and", "are", "evaluated", "lazily", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Optional.java#L326-L350", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/ImmutableSetMultimap.java", "func_name": "ImmutableSetMultimap.of", "original_string": "@SuppressWarnings(\"unchecked\")\n  public static <K, V> ImmutableSetMultimap<K, V> of() {\n    return (ImmutableSetMultimap<K, V>) EmptyImmutableSetMultimap.INSTANCE;\n  }", "language": "java", "code": "@SuppressWarnings(\"unchecked\")\n  public static <K, V> ImmutableSetMultimap<K, V> of() {\n    return (ImmutableSetMultimap<K, V>) EmptyImmutableSetMultimap.INSTANCE;\n  }", "code_tokens": ["@", "SuppressWarnings", "(", "\"unchecked\"", ")", "public", "static", "<", "K", ",", "V", ">", "ImmutableSetMultimap", "<", "K", ",", "V", ">", "of", "(", ")", "{", "return", "(", "ImmutableSetMultimap", "<", "K", ",", "V", ">", ")", "EmptyImmutableSetMultimap", ".", "INSTANCE", ";", "}"], "docstring": "Casting is safe because the multimap will never hold any elements.", "docstring_tokens": ["Casting", "is", "safe", "because", "the", "multimap", "will", "never", "hold", "any", "elements", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/ImmutableSetMultimap.java#L57-L60", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/ImmutableSetMultimap.java", "func_name": "ImmutableSetMultimap.copyOf", "original_string": "public static <K, V> ImmutableSetMultimap<K, V> copyOf(\n      Multimap<? extends K, ? extends V> multimap) {\n    return copyOf(multimap, null);\n  }", "language": "java", "code": "public static <K, V> ImmutableSetMultimap<K, V> copyOf(\n      Multimap<? extends K, ? extends V> multimap) {\n    return copyOf(multimap, null);\n  }", "code_tokens": ["public", "static", "<", "K", ",", "V", ">", "ImmutableSetMultimap", "<", "K", ",", "V", ">", "copyOf", "(", "Multimap", "<", "?", "extends", "K", ",", "?", "extends", "V", ">", "multimap", ")", "{", "return", "copyOf", "(", "multimap", ",", "null", ")", ";", "}"], "docstring": "Returns an immutable set multimap containing the same mappings as {@code multimap}. The\ngenerated multimap's key and value orderings correspond to the iteration ordering of the {@code\nmultimap.asMap()} view. Repeated occurrences of an entry in the multimap after the first are\nignored.\n\n<p>Despite the method name, this method attempts to avoid actually copying the data when it is\nsafe to do so. The exact circumstances under which a copy will or will not be performed are\nundocumented and subject to change.\n\n@throws NullPointerException if any key or value in {@code multimap} is null", "docstring_tokens": ["Returns", "an", "immutable", "set", "multimap", "containing", "the", "same", "mappings", "as", "{", "@code", "multimap", "}", ".", "The", "generated", "multimap", "s", "key", "and", "value", "orderings", "correspond", "to", "the", "iteration", "ordering", "of", "the", "{", "@code", "multimap", ".", "asMap", "()", "}", "view", ".", "Repeated", "occurrences", "of", "an", "entry", "in", "the", "multimap", "after", "the", "first", "are", "ignored", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/ImmutableSetMultimap.java#L270-L273", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/collect/ImmutableSetMultimap.java", "func_name": "ImmutableSetMultimap.inverse", "original_string": "@Override\n  public ImmutableSetMultimap<V, K> inverse() {\n    ImmutableSetMultimap<V, K> result = inverse;\n    return (result == null) ? (inverse = invert()) : result;\n  }", "language": "java", "code": "@Override\n  public ImmutableSetMultimap<V, K> inverse() {\n    ImmutableSetMultimap<V, K> result = inverse;\n    return (result == null) ? (inverse = invert()) : result;\n  }", "code_tokens": ["@", "Override", "public", "ImmutableSetMultimap", "<", "V", ",", "K", ">", "inverse", "(", ")", "{", "ImmutableSetMultimap", "<", "V", ",", "K", ">", "result", "=", "inverse", ";", "return", "(", "result", "==", "null", ")", "?", "(", "inverse", "=", "invert", "(", ")", ")", ":", "result", ";", "}"], "docstring": "{@inheritDoc}\n\n<p>Because an inverse of a set multimap cannot contain multiple pairs with the same key and\nvalue, this method returns an {@code ImmutableSetMultimap} rather than the {@code\nImmutableMultimap} specified in the {@code ImmutableMultimap} class.", "docstring_tokens": ["{", "@inheritDoc", "}"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/collect/ImmutableSetMultimap.java#L370-L374", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Joiner.java", "func_name": "Joiner.appendTo", "original_string": "@CanIgnoreReturnValue\n  public <A extends Appendable> A appendTo(A appendable, Iterator<?> parts) throws IOException {\n    checkNotNull(appendable);\n    if (parts.hasNext()) {\n      appendable.append(toString(parts.next()));\n      while (parts.hasNext()) {\n        appendable.append(separator);\n        appendable.append(toString(parts.next()));\n      }\n    }\n    return appendable;\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  public <A extends Appendable> A appendTo(A appendable, Iterator<?> parts) throws IOException {\n    checkNotNull(appendable);\n    if (parts.hasNext()) {\n      appendable.append(toString(parts.next()));\n      while (parts.hasNext()) {\n        appendable.append(separator);\n        appendable.append(toString(parts.next()));\n      }\n    }\n    return appendable;\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "public", "<", "A", "extends", "Appendable", ">", "A", "appendTo", "(", "A", "appendable", ",", "Iterator", "<", "?", ">", "parts", ")", "throws", "IOException", "{", "checkNotNull", "(", "appendable", ")", ";", "if", "(", "parts", ".", "hasNext", "(", ")", ")", "{", "appendable", ".", "append", "(", "toString", "(", "parts", ".", "next", "(", ")", ")", ")", ";", "while", "(", "parts", ".", "hasNext", "(", ")", ")", "{", "appendable", ".", "append", "(", "separator", ")", ";", "appendable", ".", "append", "(", "toString", "(", "parts", ".", "next", "(", ")", ")", ")", ";", "}", "}", "return", "appendable", ";", "}"], "docstring": "Appends the string representation of each of {@code parts}, using the previously configured\nseparator between each, to {@code appendable}.\n\n@since 11.0", "docstring_tokens": ["Appends", "the", "string", "representation", "of", "each", "of", "{", "@code", "parts", "}", "using", "the", "previously", "configured", "separator", "between", "each", "to", "{", "@code", "appendable", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Joiner.java#L102-L113", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Joiner.java", "func_name": "Joiner.appendTo", "original_string": "@CanIgnoreReturnValue\n  public final StringBuilder appendTo(StringBuilder builder, Iterable<?> parts) {\n    return appendTo(builder, parts.iterator());\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  public final StringBuilder appendTo(StringBuilder builder, Iterable<?> parts) {\n    return appendTo(builder, parts.iterator());\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "public", "final", "StringBuilder", "appendTo", "(", "StringBuilder", "builder", ",", "Iterable", "<", "?", ">", "parts", ")", "{", "return", "appendTo", "(", "builder", ",", "parts", ".", "iterator", "(", ")", ")", ";", "}"], "docstring": "Appends the string representation of each of {@code parts}, using the previously configured\nseparator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,\nIterable)}, except that it does not throw {@link IOException}.", "docstring_tokens": ["Appends", "the", "string", "representation", "of", "each", "of", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Joiner.java#L137-L140", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Joiner.java", "func_name": "Joiner.appendTo", "original_string": "@CanIgnoreReturnValue\n  public final StringBuilder appendTo(StringBuilder builder, Object[] parts) {\n    return appendTo(builder, Arrays.asList(parts));\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  public final StringBuilder appendTo(StringBuilder builder, Object[] parts) {\n    return appendTo(builder, Arrays.asList(parts));\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "public", "final", "StringBuilder", "appendTo", "(", "StringBuilder", "builder", ",", "Object", "[", "]", "parts", ")", "{", "return", "appendTo", "(", "builder", ",", "Arrays", ".", "asList", "(", "parts", ")", ")", ";", "}"], "docstring": "Appends the string representation of each of {@code parts}, using the previously configured\nseparator between each, to {@code builder}. Identical to {@link #appendTo(Appendable,\nIterable)}, except that it does not throw {@link IOException}.", "docstring_tokens": ["Appends", "the", "string", "representation", "of", "each", "of", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Joiner.java#L164-L167", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Joiner.java", "func_name": "Joiner.appendTo", "original_string": "@CanIgnoreReturnValue\n  public final StringBuilder appendTo(\n      StringBuilder builder, @Nullable Object first, @Nullable Object second, Object... rest) {\n    return appendTo(builder, iterable(first, second, rest));\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  public final StringBuilder appendTo(\n      StringBuilder builder, @Nullable Object first, @Nullable Object second, Object... rest) {\n    return appendTo(builder, iterable(first, second, rest));\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "public", "final", "StringBuilder", "appendTo", "(", "StringBuilder", "builder", ",", "@", "Nullable", "Object", "first", ",", "@", "Nullable", "Object", "second", ",", "Object", "...", "rest", ")", "{", "return", "appendTo", "(", "builder", ",", "iterable", "(", "first", ",", "second", ",", "rest", ")", ")", ";", "}"], "docstring": "Appends to {@code builder} the string representation of each of the remaining arguments.\nIdentical to {@link #appendTo(Appendable, Object, Object, Object...)}, except that it does not\nthrow {@link IOException}.", "docstring_tokens": ["Appends", "to", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Joiner.java#L174-L178", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Joiner.java", "func_name": "Joiner.join", "original_string": "public final String join(@Nullable Object first, @Nullable Object second, Object... rest) {\n    return join(iterable(first, second, rest));\n  }", "language": "java", "code": "public final String join(@Nullable Object first, @Nullable Object second, Object... rest) {\n    return join(iterable(first, second, rest));\n  }", "code_tokens": ["public", "final", "String", "join", "(", "@", "Nullable", "Object", "first", ",", "@", "Nullable", "Object", "second", ",", "Object", "...", "rest", ")", "{", "return", "join", "(", "iterable", "(", "first", ",", "second", ",", "rest", ")", ")", ";", "}"], "docstring": "Returns a string containing the string representation of each argument, using the previously\nconfigured separator between each.", "docstring_tokens": ["Returns", "a", "string", "containing", "the", "string", "representation", "of", "each", "argument", "using", "the", "previously", "configured", "separator", "between", "each", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Joiner.java#L210-L212", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Joiner.java", "func_name": "Joiner.skipNulls", "original_string": "public Joiner skipNulls() {\n    return new Joiner(this) {\n      @Override\n      public <A extends Appendable> A appendTo(A appendable, Iterator<?> parts) throws IOException {\n        checkNotNull(appendable, \"appendable\");\n        checkNotNull(parts, \"parts\");\n        while (parts.hasNext()) {\n          Object part = parts.next();\n          if (part != null) {\n            appendable.append(Joiner.this.toString(part));\n            break;\n          }\n        }\n        while (parts.hasNext()) {\n          Object part = parts.next();\n          if (part != null) {\n            appendable.append(separator);\n            appendable.append(Joiner.this.toString(part));\n          }\n        }\n        return appendable;\n      }\n\n      @Override\n      public Joiner useForNull(String nullText) {\n        throw new UnsupportedOperationException(\"already specified skipNulls\");\n      }\n\n      @Override\n      public MapJoiner withKeyValueSeparator(String kvs) {\n        throw new UnsupportedOperationException(\"can't use .skipNulls() with maps\");\n      }\n    };\n  }", "language": "java", "code": "public Joiner skipNulls() {\n    return new Joiner(this) {\n      @Override\n      public <A extends Appendable> A appendTo(A appendable, Iterator<?> parts) throws IOException {\n        checkNotNull(appendable, \"appendable\");\n        checkNotNull(parts, \"parts\");\n        while (parts.hasNext()) {\n          Object part = parts.next();\n          if (part != null) {\n            appendable.append(Joiner.this.toString(part));\n            break;\n          }\n        }\n        while (parts.hasNext()) {\n          Object part = parts.next();\n          if (part != null) {\n            appendable.append(separator);\n            appendable.append(Joiner.this.toString(part));\n          }\n        }\n        return appendable;\n      }\n\n      @Override\n      public Joiner useForNull(String nullText) {\n        throw new UnsupportedOperationException(\"already specified skipNulls\");\n      }\n\n      @Override\n      public MapJoiner withKeyValueSeparator(String kvs) {\n        throw new UnsupportedOperationException(\"can't use .skipNulls() with maps\");\n      }\n    };\n  }", "code_tokens": ["public", "Joiner", "skipNulls", "(", ")", "{", "return", "new", "Joiner", "(", "this", ")", "{", "@", "Override", "public", "<", "A", "extends", "Appendable", ">", "A", "appendTo", "(", "A", "appendable", ",", "Iterator", "<", "?", ">", "parts", ")", "throws", "IOException", "{", "checkNotNull", "(", "appendable", ",", "\"appendable\"", ")", ";", "checkNotNull", "(", "parts", ",", "\"parts\"", ")", ";", "while", "(", "parts", ".", "hasNext", "(", ")", ")", "{", "Object", "part", "=", "parts", ".", "next", "(", ")", ";", "if", "(", "part", "!=", "null", ")", "{", "appendable", ".", "append", "(", "Joiner", ".", "this", ".", "toString", "(", "part", ")", ")", ";", "break", ";", "}", "}", "while", "(", "parts", ".", "hasNext", "(", ")", ")", "{", "Object", "part", "=", "parts", ".", "next", "(", ")", ";", "if", "(", "part", "!=", "null", ")", "{", "appendable", ".", "append", "(", "separator", ")", ";", "appendable", ".", "append", "(", "Joiner", ".", "this", ".", "toString", "(", "part", ")", ")", ";", "}", "}", "return", "appendable", ";", "}", "@", "Override", "public", "Joiner", "useForNull", "(", "String", "nullText", ")", "{", "throw", "new", "UnsupportedOperationException", "(", "\"already specified skipNulls\"", ")", ";", "}", "@", "Override", "public", "MapJoiner", "withKeyValueSeparator", "(", "String", "kvs", ")", "{", "throw", "new", "UnsupportedOperationException", "(", "\"can't use .skipNulls() with maps\"", ")", ";", "}", "}", ";", "}"], "docstring": "Returns a joiner with the same behavior as this joiner, except automatically skipping over any\nprovided null elements.", "docstring_tokens": ["Returns", "a", "joiner", "with", "the", "same", "behavior", "as", "this", "joiner", "except", "automatically", "skipping", "over", "any", "provided", "null", "elements", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Joiner.java#L242-L275", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/primitives/ImmutableIntArray.java", "func_name": "ImmutableIntArray.of", "original_string": "public static ImmutableIntArray of(int e0, int e1, int e2, int e3) {\n    return new ImmutableIntArray(new int[] {e0, e1, e2, e3});\n  }", "language": "java", "code": "public static ImmutableIntArray of(int e0, int e1, int e2, int e3) {\n    return new ImmutableIntArray(new int[] {e0, e1, e2, e3});\n  }", "code_tokens": ["public", "static", "ImmutableIntArray", "of", "(", "int", "e0", ",", "int", "e1", ",", "int", "e2", ",", "int", "e3", ")", "{", "return", "new", "ImmutableIntArray", "(", "new", "int", "[", "]", "{", "e0", ",", "e1", ",", "e2", ",", "e3", "}", ")", ";", "}"], "docstring": "Returns an immutable array containing the given values, in order.", "docstring_tokens": ["Returns", "an", "immutable", "array", "containing", "the", "given", "values", "in", "order", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/primitives/ImmutableIntArray.java#L115-L117", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/primitives/ImmutableIntArray.java", "func_name": "ImmutableIntArray.of", "original_string": "public static ImmutableIntArray of(int first, int... rest) {\n    checkArgument(\n        rest.length <= Integer.MAX_VALUE - 1, \"the total number of elements must fit in an int\");\n    int[] array = new int[rest.length + 1];\n    array[0] = first;\n    System.arraycopy(rest, 0, array, 1, rest.length);\n    return new ImmutableIntArray(array);\n  }", "language": "java", "code": "public static ImmutableIntArray of(int first, int... rest) {\n    checkArgument(\n        rest.length <= Integer.MAX_VALUE - 1, \"the total number of elements must fit in an int\");\n    int[] array = new int[rest.length + 1];\n    array[0] = first;\n    System.arraycopy(rest, 0, array, 1, rest.length);\n    return new ImmutableIntArray(array);\n  }", "code_tokens": ["public", "static", "ImmutableIntArray", "of", "(", "int", "first", ",", "int", "...", "rest", ")", "{", "checkArgument", "(", "rest", ".", "length", "<=", "Integer", ".", "MAX_VALUE", "-", "1", ",", "\"the total number of elements must fit in an int\"", ")", ";", "int", "[", "]", "array", "=", "new", "int", "[", "rest", ".", "length", "+", "1", "]", ";", "array", "[", "0", "]", "=", "first", ";", "System", ".", "arraycopy", "(", "rest", ",", "0", ",", "array", ",", "1", ",", "rest", ".", "length", ")", ";", "return", "new", "ImmutableIntArray", "(", "array", ")", ";", "}"], "docstring": "okay since we have to copy the just-created array anyway.", "docstring_tokens": ["okay", "since", "we", "have", "to", "copy", "the", "just", "-", "created", "array", "anyway", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/primitives/ImmutableIntArray.java#L138-L145", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/primitives/ImmutableIntArray.java", "func_name": "ImmutableIntArray.copyOf", "original_string": "public static ImmutableIntArray copyOf(int[] values) {\n    return values.length == 0 ? EMPTY : new ImmutableIntArray(Arrays.copyOf(values, values.length));\n  }", "language": "java", "code": "public static ImmutableIntArray copyOf(int[] values) {\n    return values.length == 0 ? EMPTY : new ImmutableIntArray(Arrays.copyOf(values, values.length));\n  }", "code_tokens": ["public", "static", "ImmutableIntArray", "copyOf", "(", "int", "[", "]", "values", ")", "{", "return", "values", ".", "length", "==", "0", "?", "EMPTY", ":", "new", "ImmutableIntArray", "(", "Arrays", ".", "copyOf", "(", "values", ",", "values", ".", "length", ")", ")", ";", "}"], "docstring": "Returns an immutable array containing the given values, in order.", "docstring_tokens": ["Returns", "an", "immutable", "array", "containing", "the", "given", "values", "in", "order", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/primitives/ImmutableIntArray.java#L148-L150", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/primitives/ImmutableIntArray.java", "func_name": "ImmutableIntArray.copyOf", "original_string": "public static ImmutableIntArray copyOf(Collection<Integer> values) {\n    return values.isEmpty() ? EMPTY : new ImmutableIntArray(Ints.toArray(values));\n  }", "language": "java", "code": "public static ImmutableIntArray copyOf(Collection<Integer> values) {\n    return values.isEmpty() ? EMPTY : new ImmutableIntArray(Ints.toArray(values));\n  }", "code_tokens": ["public", "static", "ImmutableIntArray", "copyOf", "(", "Collection", "<", "Integer", ">", "values", ")", "{", "return", "values", ".", "isEmpty", "(", ")", "?", "EMPTY", ":", "new", "ImmutableIntArray", "(", "Ints", ".", "toArray", "(", "values", ")", ")", ";", "}"], "docstring": "Returns an immutable array containing the given values, in order.", "docstring_tokens": ["Returns", "an", "immutable", "array", "containing", "the", "given", "values", "in", "order", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/primitives/ImmutableIntArray.java#L153-L155", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/primitives/ImmutableIntArray.java", "func_name": "ImmutableIntArray.copyOf", "original_string": "public static ImmutableIntArray copyOf(Iterable<Integer> values) {\n    if (values instanceof Collection) {\n      return copyOf((Collection<Integer>) values);\n    }\n    return builder().addAll(values).build();\n  }", "language": "java", "code": "public static ImmutableIntArray copyOf(Iterable<Integer> values) {\n    if (values instanceof Collection) {\n      return copyOf((Collection<Integer>) values);\n    }\n    return builder().addAll(values).build();\n  }", "code_tokens": ["public", "static", "ImmutableIntArray", "copyOf", "(", "Iterable", "<", "Integer", ">", "values", ")", "{", "if", "(", "values", "instanceof", "Collection", ")", "{", "return", "copyOf", "(", "(", "Collection", "<", "Integer", ">", ")", "values", ")", ";", "}", "return", "builder", "(", ")", ".", "addAll", "(", "values", ")", ".", "build", "(", ")", ";", "}"], "docstring": "Returns an immutable array containing the given values, in order.\n\n<p><b>Performance note:</b> this method delegates to {@link #copyOf(Collection)} if {@code\nvalues} is a {@link Collection}. Otherwise it creates a {@link #builder} and uses {@link\nBuilder#addAll(Iterable)}, with all the performance implications associated with that.", "docstring_tokens": ["Returns", "an", "immutable", "array", "containing", "the", "given", "values", "in", "order", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/primitives/ImmutableIntArray.java#L164-L169", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/primitives/ImmutableIntArray.java", "func_name": "ImmutableIntArray.copyOf", "original_string": "public static ImmutableIntArray copyOf(IntStream stream) {\n    // Note this uses very different growth behavior from copyOf(Iterable) and the builder.\n    int[] array = stream.toArray();\n    return (array.length == 0) ? EMPTY : new ImmutableIntArray(array);\n  }", "language": "java", "code": "public static ImmutableIntArray copyOf(IntStream stream) {\n    // Note this uses very different growth behavior from copyOf(Iterable) and the builder.\n    int[] array = stream.toArray();\n    return (array.length == 0) ? EMPTY : new ImmutableIntArray(array);\n  }", "code_tokens": ["public", "static", "ImmutableIntArray", "copyOf", "(", "IntStream", "stream", ")", "{", "// Note this uses very different growth behavior from copyOf(Iterable) and the builder.", "int", "[", "]", "array", "=", "stream", ".", "toArray", "(", ")", ";", "return", "(", "array", ".", "length", "==", "0", ")", "?", "EMPTY", ":", "new", "ImmutableIntArray", "(", "array", ")", ";", "}"], "docstring": "Returns an immutable array containing all the values from {@code stream}, in order.", "docstring_tokens": ["Returns", "an", "immutable", "array", "containing", "all", "the", "values", "from", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/primitives/ImmutableIntArray.java#L172-L176", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/primitives/ImmutableIntArray.java", "func_name": "ImmutableIntArray.indexOf", "original_string": "public int indexOf(int target) {\n    for (int i = start; i < end; i++) {\n      if (array[i] == target) {\n        return i - start;\n      }\n    }\n    return -1;\n  }", "language": "java", "code": "public int indexOf(int target) {\n    for (int i = start; i < end; i++) {\n      if (array[i] == target) {\n        return i - start;\n      }\n    }\n    return -1;\n  }", "code_tokens": ["public", "int", "indexOf", "(", "int", "target", ")", "{", "for", "(", "int", "i", "=", "start", ";", "i", "<", "end", ";", "i", "++", ")", "{", "if", "(", "array", "[", "i", "]", "==", "target", ")", "{", "return", "i", "-", "start", ";", "}", "}", "return", "-", "1", ";", "}"], "docstring": "Returns the smallest index for which {@link #get} returns {@code target}, or {@code -1} if no\nsuch index exists. Equivalent to {@code asList().indexOf(target)}.", "docstring_tokens": ["Returns", "the", "smallest", "index", "for", "which", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/primitives/ImmutableIntArray.java#L381-L388", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/primitives/ImmutableIntArray.java", "func_name": "ImmutableIntArray.subArray", "original_string": "public ImmutableIntArray subArray(int startIndex, int endIndex) {\n    Preconditions.checkPositionIndexes(startIndex, endIndex, length());\n    return startIndex == endIndex\n        ? EMPTY\n        : new ImmutableIntArray(array, start + startIndex, start + endIndex);\n  }", "language": "java", "code": "public ImmutableIntArray subArray(int startIndex, int endIndex) {\n    Preconditions.checkPositionIndexes(startIndex, endIndex, length());\n    return startIndex == endIndex\n        ? EMPTY\n        : new ImmutableIntArray(array, start + startIndex, start + endIndex);\n  }", "code_tokens": ["public", "ImmutableIntArray", "subArray", "(", "int", "startIndex", ",", "int", "endIndex", ")", "{", "Preconditions", ".", "checkPositionIndexes", "(", "startIndex", ",", "endIndex", ",", "length", "(", ")", ")", ";", "return", "startIndex", "==", "endIndex", "?", "EMPTY", ":", "new", "ImmutableIntArray", "(", "array", ",", "start", "+", "startIndex", ",", "start", "+", "endIndex", ")", ";", "}"], "docstring": "Returns a new immutable array containing the values in the specified range.\n\n<p><b>Performance note:</b> The returned array has the same full memory footprint as this one\ndoes (no actual copying is performed). To reduce memory usage, use {@code subArray(start,\nend).trimmed()}.", "docstring_tokens": ["Returns", "a", "new", "immutable", "array", "containing", "the", "values", "in", "the", "specified", "range", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/primitives/ImmutableIntArray.java#L436-L441", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/math/DoubleMath.java", "func_name": "DoubleMath.roundToInt", "original_string": "@GwtIncompatible // #roundIntermediate\n  public static int roundToInt(double x, RoundingMode mode) {\n    double z = roundIntermediate(x, mode);\n    checkInRangeForRoundingInputs(\n        z > MIN_INT_AS_DOUBLE - 1.0 & z < MAX_INT_AS_DOUBLE + 1.0, x, mode);\n    return (int) z;\n  }", "language": "java", "code": "@GwtIncompatible // #roundIntermediate\n  public static int roundToInt(double x, RoundingMode mode) {\n    double z = roundIntermediate(x, mode);\n    checkInRangeForRoundingInputs(\n        z > MIN_INT_AS_DOUBLE - 1.0 & z < MAX_INT_AS_DOUBLE + 1.0, x, mode);\n    return (int) z;\n  }", "code_tokens": ["@", "GwtIncompatible", "// #roundIntermediate", "public", "static", "int", "roundToInt", "(", "double", "x", ",", "RoundingMode", "mode", ")", "{", "double", "z", "=", "roundIntermediate", "(", "x", ",", "mode", ")", ";", "checkInRangeForRoundingInputs", "(", "z", ">", "MIN_INT_AS_DOUBLE", "-", "1.0", "&", "z", "<", "MAX_INT_AS_DOUBLE", "+", "1.0", ",", "x", ",", "mode", ")", ";", "return", "(", "int", ")", "z", ";", "}"], "docstring": "Returns the {@code int} value that is equal to {@code x} rounded with the specified rounding\nmode, if possible.\n\n@throws ArithmeticException if\n<ul>\n<li>{@code x} is infinite or NaN\n<li>{@code x}, after being rounded to a mathematical integer using the specified rounding\nmode, is either less than {@code Integer.MIN_VALUE} or greater than {@code\nInteger.MAX_VALUE}\n<li>{@code x} is not a mathematical integer and {@code mode} is {@link\nRoundingMode#UNNECESSARY}\n</ul>", "docstring_tokens": ["Returns", "the", "{", "@code", "int", "}", "value", "that", "is", "equal", "to", "{", "@code", "x", "}", "rounded", "with", "the", "specified", "rounding", "mode", "if", "possible", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/math/DoubleMath.java#L130-L136", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/math/DoubleMath.java", "func_name": "DoubleMath.roundToLong", "original_string": "@GwtIncompatible // #roundIntermediate\n  public static long roundToLong(double x, RoundingMode mode) {\n    double z = roundIntermediate(x, mode);\n    checkInRangeForRoundingInputs(\n        MIN_LONG_AS_DOUBLE - z < 1.0 & z < MAX_LONG_AS_DOUBLE_PLUS_ONE, x, mode);\n    return (long) z;\n  }", "language": "java", "code": "@GwtIncompatible // #roundIntermediate\n  public static long roundToLong(double x, RoundingMode mode) {\n    double z = roundIntermediate(x, mode);\n    checkInRangeForRoundingInputs(\n        MIN_LONG_AS_DOUBLE - z < 1.0 & z < MAX_LONG_AS_DOUBLE_PLUS_ONE, x, mode);\n    return (long) z;\n  }", "code_tokens": ["@", "GwtIncompatible", "// #roundIntermediate", "public", "static", "long", "roundToLong", "(", "double", "x", ",", "RoundingMode", "mode", ")", "{", "double", "z", "=", "roundIntermediate", "(", "x", ",", "mode", ")", ";", "checkInRangeForRoundingInputs", "(", "MIN_LONG_AS_DOUBLE", "-", "z", "<", "1.0", "&", "z", "<", "MAX_LONG_AS_DOUBLE_PLUS_ONE", ",", "x", ",", "mode", ")", ";", "return", "(", "long", ")", "z", ";", "}"], "docstring": "Returns the {@code long} value that is equal to {@code x} rounded with the specified rounding\nmode, if possible.\n\n@throws ArithmeticException if\n<ul>\n<li>{@code x} is infinite or NaN\n<li>{@code x}, after being rounded to a mathematical integer using the specified rounding\nmode, is either less than {@code Long.MIN_VALUE} or greater than {@code\nLong.MAX_VALUE}\n<li>{@code x} is not a mathematical integer and {@code mode} is {@link\nRoundingMode#UNNECESSARY}\n</ul>", "docstring_tokens": ["Returns", "the", "{", "@code", "long", "}", "value", "that", "is", "equal", "to", "{", "@code", "x", "}", "rounded", "with", "the", "specified", "rounding", "mode", "if", "possible", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/math/DoubleMath.java#L155-L161", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/math/DoubleMath.java", "func_name": "DoubleMath.roundToBigInteger", "original_string": "@GwtIncompatible\n  public static BigInteger roundToBigInteger(double x, RoundingMode mode) {\n    x = roundIntermediate(x, mode);\n    if (MIN_LONG_AS_DOUBLE - x < 1.0 & x < MAX_LONG_AS_DOUBLE_PLUS_ONE) {\n      return BigInteger.valueOf((long) x);\n    }\n    int exponent = getExponent(x);\n    long significand = getSignificand(x);\n    BigInteger result = BigInteger.valueOf(significand).shiftLeft(exponent - SIGNIFICAND_BITS);\n    return (x < 0) ? result.negate() : result;\n  }", "language": "java", "code": "@GwtIncompatible\n  public static BigInteger roundToBigInteger(double x, RoundingMode mode) {\n    x = roundIntermediate(x, mode);\n    if (MIN_LONG_AS_DOUBLE - x < 1.0 & x < MAX_LONG_AS_DOUBLE_PLUS_ONE) {\n      return BigInteger.valueOf((long) x);\n    }\n    int exponent = getExponent(x);\n    long significand = getSignificand(x);\n    BigInteger result = BigInteger.valueOf(significand).shiftLeft(exponent - SIGNIFICAND_BITS);\n    return (x < 0) ? result.negate() : result;\n  }", "code_tokens": ["@", "GwtIncompatible", "public", "static", "BigInteger", "roundToBigInteger", "(", "double", "x", ",", "RoundingMode", "mode", ")", "{", "x", "=", "roundIntermediate", "(", "x", ",", "mode", ")", ";", "if", "(", "MIN_LONG_AS_DOUBLE", "-", "x", "<", "1.0", "&", "x", "<", "MAX_LONG_AS_DOUBLE_PLUS_ONE", ")", "{", "return", "BigInteger", ".", "valueOf", "(", "(", "long", ")", "x", ")", ";", "}", "int", "exponent", "=", "getExponent", "(", "x", ")", ";", "long", "significand", "=", "getSignificand", "(", "x", ")", ";", "BigInteger", "result", "=", "BigInteger", ".", "valueOf", "(", "significand", ")", ".", "shiftLeft", "(", "exponent", "-", "SIGNIFICAND_BITS", ")", ";", "return", "(", "x", "<", "0", ")", "?", "result", ".", "negate", "(", ")", ":", "result", ";", "}"], "docstring": "#roundIntermediate, java.lang.Math.getExponent, com.google.common.math.DoubleUtils", "docstring_tokens": ["#roundIntermediate", "java", ".", "lang", ".", "Math", ".", "getExponent", "com", ".", "google", ".", "common", ".", "math", ".", "DoubleUtils"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/math/DoubleMath.java#L182-L192", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/math/DoubleMath.java", "func_name": "DoubleMath.isPowerOfTwo", "original_string": "@GwtIncompatible // com.google.common.math.DoubleUtils\n  public static boolean isPowerOfTwo(double x) {\n    if (x > 0.0 && isFinite(x)) {\n      long significand = getSignificand(x);\n      return (significand & (significand - 1)) == 0;\n    }\n    return false;\n  }", "language": "java", "code": "@GwtIncompatible // com.google.common.math.DoubleUtils\n  public static boolean isPowerOfTwo(double x) {\n    if (x > 0.0 && isFinite(x)) {\n      long significand = getSignificand(x);\n      return (significand & (significand - 1)) == 0;\n    }\n    return false;\n  }", "code_tokens": ["@", "GwtIncompatible", "// com.google.common.math.DoubleUtils", "public", "static", "boolean", "isPowerOfTwo", "(", "double", "x", ")", "{", "if", "(", "x", ">", "0.0", "&&", "isFinite", "(", "x", ")", ")", "{", "long", "significand", "=", "getSignificand", "(", "x", ")", ";", "return", "(", "significand", "&", "(", "significand", "-", "1", ")", ")", "==", "0", ";", "}", "return", "false", ";", "}"], "docstring": "Returns {@code true} if {@code x} is exactly equal to {@code 2^k} for some finite integer\n{@code k}.", "docstring_tokens": ["Returns", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/math/DoubleMath.java#L198-L205", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/math/DoubleMath.java", "func_name": "DoubleMath.fuzzyEquals", "original_string": "public static boolean fuzzyEquals(double a, double b, double tolerance) {\n    MathPreconditions.checkNonNegative(\"tolerance\", tolerance);\n    return Math.copySign(a - b, 1.0) <= tolerance\n        // copySign(x, 1.0) is a branch-free version of abs(x), but with different NaN semantics\n        || (a == b) // needed to ensure that infinities equal themselves\n        || (Double.isNaN(a) && Double.isNaN(b));\n  }", "language": "java", "code": "public static boolean fuzzyEquals(double a, double b, double tolerance) {\n    MathPreconditions.checkNonNegative(\"tolerance\", tolerance);\n    return Math.copySign(a - b, 1.0) <= tolerance\n        // copySign(x, 1.0) is a branch-free version of abs(x), but with different NaN semantics\n        || (a == b) // needed to ensure that infinities equal themselves\n        || (Double.isNaN(a) && Double.isNaN(b));\n  }", "code_tokens": ["public", "static", "boolean", "fuzzyEquals", "(", "double", "a", ",", "double", "b", ",", "double", "tolerance", ")", "{", "MathPreconditions", ".", "checkNonNegative", "(", "\"tolerance\"", ",", "tolerance", ")", ";", "return", "Math", ".", "copySign", "(", "a", "-", "b", ",", "1.0", ")", "<=", "tolerance", "// copySign(x, 1.0) is a branch-free version of abs(x), but with different NaN semantics", "||", "(", "a", "==", "b", ")", "// needed to ensure that infinities equal themselves", "||", "(", "Double", ".", "isNaN", "(", "a", ")", "&&", "Double", ".", "isNaN", "(", "b", ")", ")", ";", "}"], "docstring": "Returns {@code true} if {@code a} and {@code b} are within {@code tolerance} of each other.\n\n<p>Technically speaking, this is equivalent to {@code Math.abs(a - b) <= tolerance ||\nDouble.valueOf(a).equals(Double.valueOf(b))}.\n\n<p>Notable special cases include:\n\n<ul>\n<li>All NaNs are fuzzily equal.\n<li>If {@code a == b}, then {@code a} and {@code b} are always fuzzily equal.\n<li>Positive and negative zero are always fuzzily equal.\n<li>If {@code tolerance} is zero, and neither {@code a} nor {@code b} is NaN, then {@code a}\nand {@code b} are fuzzily equal if and only if {@code a == b}.\n<li>With {@link Double#POSITIVE_INFINITY} tolerance, all non-NaN values are fuzzily equal.\n<li>With finite tolerance, {@code Double.POSITIVE_INFINITY} and {@code\nDouble.NEGATIVE_INFINITY} are fuzzily equal only to themselves.\n</ul>\n\n<p>This is reflexive and symmetric, but <em>not</em> transitive, so it is <em>not</em> an\nequivalence relation and <em>not</em> suitable for use in {@link Object#equals}\nimplementations.\n\n@throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN\n@since 13.0", "docstring_tokens": ["Returns", "{", "@code", "true", "}", "if", "{", "@code", "a", "}", "and", "{", "@code", "b", "}", "are", "within", "{", "@code", "tolerance", "}", "of", "each", "other", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/math/DoubleMath.java#L359-L365", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/math/DoubleMath.java", "func_name": "DoubleMath.fuzzyCompare", "original_string": "public static int fuzzyCompare(double a, double b, double tolerance) {\n    if (fuzzyEquals(a, b, tolerance)) {\n      return 0;\n    } else if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return Booleans.compare(Double.isNaN(a), Double.isNaN(b));\n    }\n  }", "language": "java", "code": "public static int fuzzyCompare(double a, double b, double tolerance) {\n    if (fuzzyEquals(a, b, tolerance)) {\n      return 0;\n    } else if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return Booleans.compare(Double.isNaN(a), Double.isNaN(b));\n    }\n  }", "code_tokens": ["public", "static", "int", "fuzzyCompare", "(", "double", "a", ",", "double", "b", ",", "double", "tolerance", ")", "{", "if", "(", "fuzzyEquals", "(", "a", ",", "b", ",", "tolerance", ")", ")", "{", "return", "0", ";", "}", "else", "if", "(", "a", "<", "b", ")", "{", "return", "-", "1", ";", "}", "else", "if", "(", "a", ">", "b", ")", "{", "return", "1", ";", "}", "else", "{", "return", "Booleans", ".", "compare", "(", "Double", ".", "isNaN", "(", "a", ")", ",", "Double", ".", "isNaN", "(", "b", ")", ")", ";", "}", "}"], "docstring": "Compares {@code a} and {@code b} \"fuzzily,\" with a tolerance for nearly-equal values.\n\n<p>This method is equivalent to {@code fuzzyEquals(a, b, tolerance) ? 0 : Double.compare(a,\nb)}. In particular, like {@link Double#compare(double, double)}, it treats all NaN values as\nequal and greater than all other values (including {@link Double#POSITIVE_INFINITY}).\n\n<p>This is <em>not</em> a total ordering and is <em>not</em> suitable for use in {@link\nComparable#compareTo} implementations. In particular, it is not transitive.\n\n@throws IllegalArgumentException if {@code tolerance} is {@code < 0} or NaN\n@since 13.0", "docstring_tokens": ["Compares", "{", "@code", "a", "}", "and", "{", "@code", "b", "}", "fuzzily", "with", "a", "tolerance", "for", "nearly", "-", "equal", "values", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/math/DoubleMath.java#L380-L390", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/math/DoubleMath.java", "func_name": "DoubleMath.mean", "original_string": "@Deprecated\n  // com.google.common.math.DoubleUtils\n  @GwtIncompatible\n  public static double mean(double... values) {\n    checkArgument(values.length > 0, \"Cannot take mean of 0 values\");\n    long count = 1;\n    double mean = checkFinite(values[0]);\n    for (int index = 1; index < values.length; ++index) {\n      checkFinite(values[index]);\n      count++;\n      // Art of Computer Programming vol. 2, Knuth, 4.2.2, (15)\n      mean += (values[index] - mean) / count;\n    }\n    return mean;\n  }", "language": "java", "code": "@Deprecated\n  // com.google.common.math.DoubleUtils\n  @GwtIncompatible\n  public static double mean(double... values) {\n    checkArgument(values.length > 0, \"Cannot take mean of 0 values\");\n    long count = 1;\n    double mean = checkFinite(values[0]);\n    for (int index = 1; index < values.length; ++index) {\n      checkFinite(values[index]);\n      count++;\n      // Art of Computer Programming vol. 2, Knuth, 4.2.2, (15)\n      mean += (values[index] - mean) / count;\n    }\n    return mean;\n  }", "code_tokens": ["@", "Deprecated", "// com.google.common.math.DoubleUtils", "@", "GwtIncompatible", "public", "static", "double", "mean", "(", "double", "...", "values", ")", "{", "checkArgument", "(", "values", ".", "length", ">", "0", ",", "\"Cannot take mean of 0 values\"", ")", ";", "long", "count", "=", "1", ";", "double", "mean", "=", "checkFinite", "(", "values", "[", "0", "]", ")", ";", "for", "(", "int", "index", "=", "1", ";", "index", "<", "values", ".", "length", ";", "++", "index", ")", "{", "checkFinite", "(", "values", "[", "index", "]", ")", ";", "count", "++", ";", "// Art of Computer Programming vol. 2, Knuth, 4.2.2, (15)", "mean", "+=", "(", "values", "[", "index", "]", "-", "mean", ")", "/", "count", ";", "}", "return", "mean", ";", "}"], "docstring": "Returns the <a href=\"http://en.wikipedia.org/wiki/Arithmetic_mean\">arithmetic mean</a> of\n{@code values}.\n\n<p>If these values are a sample drawn from a population, this is also an unbiased estimator of\nthe arithmetic mean of the population.\n\n@param values a nonempty series of values\n@throws IllegalArgumentException if {@code values} is empty or contains any non-finite value\n@deprecated Use {@link Stats#meanOf} instead, noting the less strict handling of non-finite\nvalues.", "docstring_tokens": ["Returns", "the", "<a", "href", "=", "http", ":", "//", "en", ".", "wikipedia", ".", "org", "/", "wiki", "/", "Arithmetic_mean", ">", "arithmetic", "mean<", "/", "a", ">", "of", "{", "@code", "values", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/math/DoubleMath.java#L404-L418", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/math/DoubleMath.java", "func_name": "DoubleMath.mean", "original_string": "@Deprecated\n  public static double mean(int... values) {\n    checkArgument(values.length > 0, \"Cannot take mean of 0 values\");\n    // The upper bound on the the length of an array and the bounds on the int values mean that, in\n    // this case only, we can compute the sum as a long without risking overflow or loss of\n    // precision. So we do that, as it's slightly quicker than the Knuth algorithm.\n    long sum = 0;\n    for (int index = 0; index < values.length; ++index) {\n      sum += values[index];\n    }\n    return (double) sum / values.length;\n  }", "language": "java", "code": "@Deprecated\n  public static double mean(int... values) {\n    checkArgument(values.length > 0, \"Cannot take mean of 0 values\");\n    // The upper bound on the the length of an array and the bounds on the int values mean that, in\n    // this case only, we can compute the sum as a long without risking overflow or loss of\n    // precision. So we do that, as it's slightly quicker than the Knuth algorithm.\n    long sum = 0;\n    for (int index = 0; index < values.length; ++index) {\n      sum += values[index];\n    }\n    return (double) sum / values.length;\n  }", "code_tokens": ["@", "Deprecated", "public", "static", "double", "mean", "(", "int", "...", "values", ")", "{", "checkArgument", "(", "values", ".", "length", ">", "0", ",", "\"Cannot take mean of 0 values\"", ")", ";", "// The upper bound on the the length of an array and the bounds on the int values mean that, in", "// this case only, we can compute the sum as a long without risking overflow or loss of", "// precision. So we do that, as it's slightly quicker than the Knuth algorithm.", "long", "sum", "=", "0", ";", "for", "(", "int", "index", "=", "0", ";", "index", "<", "values", ".", "length", ";", "++", "index", ")", "{", "sum", "+=", "values", "[", "index", "]", ";", "}", "return", "(", "double", ")", "sum", "/", "values", ".", "length", ";", "}"], "docstring": "Returns the <a href=\"http://en.wikipedia.org/wiki/Arithmetic_mean\">arithmetic mean</a> of\n{@code values}.\n\n<p>If these values are a sample drawn from a population, this is also an unbiased estimator of\nthe arithmetic mean of the population.\n\n@param values a nonempty series of values\n@throws IllegalArgumentException if {@code values} is empty\n@deprecated Use {@link Stats#meanOf} instead, noting the less strict handling of non-finite\nvalues.", "docstring_tokens": ["Returns", "the", "<a", "href", "=", "http", ":", "//", "en", ".", "wikipedia", ".", "org", "/", "wiki", "/", "Arithmetic_mean", ">", "arithmetic", "mean<", "/", "a", ">", "of", "{", "@code", "values", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/math/DoubleMath.java#L432-L443", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/math/DoubleMath.java", "func_name": "DoubleMath.mean", "original_string": "@Deprecated\n  public static double mean(long... values) {\n    checkArgument(values.length > 0, \"Cannot take mean of 0 values\");\n    long count = 1;\n    double mean = values[0];\n    for (int index = 1; index < values.length; ++index) {\n      count++;\n      // Art of Computer Programming vol. 2, Knuth, 4.2.2, (15)\n      mean += (values[index] - mean) / count;\n    }\n    return mean;\n  }", "language": "java", "code": "@Deprecated\n  public static double mean(long... values) {\n    checkArgument(values.length > 0, \"Cannot take mean of 0 values\");\n    long count = 1;\n    double mean = values[0];\n    for (int index = 1; index < values.length; ++index) {\n      count++;\n      // Art of Computer Programming vol. 2, Knuth, 4.2.2, (15)\n      mean += (values[index] - mean) / count;\n    }\n    return mean;\n  }", "code_tokens": ["@", "Deprecated", "public", "static", "double", "mean", "(", "long", "...", "values", ")", "{", "checkArgument", "(", "values", ".", "length", ">", "0", ",", "\"Cannot take mean of 0 values\"", ")", ";", "long", "count", "=", "1", ";", "double", "mean", "=", "values", "[", "0", "]", ";", "for", "(", "int", "index", "=", "1", ";", "index", "<", "values", ".", "length", ";", "++", "index", ")", "{", "count", "++", ";", "// Art of Computer Programming vol. 2, Knuth, 4.2.2, (15)", "mean", "+=", "(", "values", "[", "index", "]", "-", "mean", ")", "/", "count", ";", "}", "return", "mean", ";", "}"], "docstring": "Returns the <a href=\"http://en.wikipedia.org/wiki/Arithmetic_mean\">arithmetic mean</a> of\n{@code values}.\n\n<p>If these values are a sample drawn from a population, this is also an unbiased estimator of\nthe arithmetic mean of the population.\n\n@param values a nonempty series of values, which will be converted to {@code double} values\n(this may cause loss of precision for longs of magnitude over 2^53 (slightly over 9e15))\n@throws IllegalArgumentException if {@code values} is empty\n@deprecated Use {@link Stats#meanOf} instead, noting the less strict handling of non-finite\nvalues.", "docstring_tokens": ["Returns", "the", "<a", "href", "=", "http", ":", "//", "en", ".", "wikipedia", ".", "org", "/", "wiki", "/", "Arithmetic_mean", ">", "arithmetic", "mean<", "/", "a", ">", "of", "{", "@code", "values", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/math/DoubleMath.java#L458-L469", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/LinkedListMultimap.java", "func_name": "LinkedListMultimap.removeNode", "original_string": "private void removeNode(Node<K, V> node) {\n    if (node.previous != null) {\n      node.previous.next = node.next;\n    } else { // node was head\n      head = node.next;\n    }\n    if (node.next != null) {\n      node.next.previous = node.previous;\n    } else { // node was tail\n      tail = node.previous;\n    }\n    if (node.previousSibling == null && node.nextSibling == null) {\n      KeyList<K, V> keyList = keyToKeyList.remove(node.key);\n      keyList.count = 0;\n      modCount++;\n    } else {\n      KeyList<K, V> keyList = keyToKeyList.get(node.key);\n      keyList.count--;\n\n      if (node.previousSibling == null) {\n        keyList.head = node.nextSibling;\n      } else {\n        node.previousSibling.nextSibling = node.nextSibling;\n      }\n\n      if (node.nextSibling == null) {\n        keyList.tail = node.previousSibling;\n      } else {\n        node.nextSibling.previousSibling = node.previousSibling;\n      }\n    }\n    size--;\n  }", "language": "java", "code": "private void removeNode(Node<K, V> node) {\n    if (node.previous != null) {\n      node.previous.next = node.next;\n    } else { // node was head\n      head = node.next;\n    }\n    if (node.next != null) {\n      node.next.previous = node.previous;\n    } else { // node was tail\n      tail = node.previous;\n    }\n    if (node.previousSibling == null && node.nextSibling == null) {\n      KeyList<K, V> keyList = keyToKeyList.remove(node.key);\n      keyList.count = 0;\n      modCount++;\n    } else {\n      KeyList<K, V> keyList = keyToKeyList.get(node.key);\n      keyList.count--;\n\n      if (node.previousSibling == null) {\n        keyList.head = node.nextSibling;\n      } else {\n        node.previousSibling.nextSibling = node.nextSibling;\n      }\n\n      if (node.nextSibling == null) {\n        keyList.tail = node.previousSibling;\n      } else {\n        node.nextSibling.previousSibling = node.previousSibling;\n      }\n    }\n    size--;\n  }", "code_tokens": ["private", "void", "removeNode", "(", "Node", "<", "K", ",", "V", ">", "node", ")", "{", "if", "(", "node", ".", "previous", "!=", "null", ")", "{", "node", ".", "previous", ".", "next", "=", "node", ".", "next", ";", "}", "else", "{", "// node was head", "head", "=", "node", ".", "next", ";", "}", "if", "(", "node", ".", "next", "!=", "null", ")", "{", "node", ".", "next", ".", "previous", "=", "node", ".", "previous", ";", "}", "else", "{", "// node was tail", "tail", "=", "node", ".", "previous", ";", "}", "if", "(", "node", ".", "previousSibling", "==", "null", "&&", "node", ".", "nextSibling", "==", "null", ")", "{", "KeyList", "<", "K", ",", "V", ">", "keyList", "=", "keyToKeyList", ".", "remove", "(", "node", ".", "key", ")", ";", "keyList", ".", "count", "=", "0", ";", "modCount", "++", ";", "}", "else", "{", "KeyList", "<", "K", ",", "V", ">", "keyList", "=", "keyToKeyList", ".", "get", "(", "node", ".", "key", ")", ";", "keyList", ".", "count", "--", ";", "if", "(", "node", ".", "previousSibling", "==", "null", ")", "{", "keyList", ".", "head", "=", "node", ".", "nextSibling", ";", "}", "else", "{", "node", ".", "previousSibling", ".", "nextSibling", "=", "node", ".", "nextSibling", ";", "}", "if", "(", "node", ".", "nextSibling", "==", "null", ")", "{", "keyList", ".", "tail", "=", "node", ".", "previousSibling", ";", "}", "else", "{", "node", ".", "nextSibling", ".", "previousSibling", "=", "node", ".", "previousSibling", ";", "}", "}", "size", "--", ";", "}"], "docstring": "Removes the specified node from the linked list. This method is only intended to be used from\nthe {@code Iterator} classes. See also {@link LinkedListMultimap#removeAllNodes(Object)}.", "docstring_tokens": ["Removes", "the", "specified", "node", "from", "the", "linked", "list", ".", "This", "method", "is", "only", "intended", "to", "be", "used", "from", "the", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/LinkedListMultimap.java#L261-L293", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/LinkedListMultimap.java", "func_name": "LinkedListMultimap.replaceValues", "original_string": "@CanIgnoreReturnValue\n  @Override\n  public List<V> replaceValues(@Nullable K key, Iterable<? extends V> values) {\n    List<V> oldValues = getCopy(key);\n    ListIterator<V> keyValues = new ValueForKeyIterator(key);\n    Iterator<? extends V> newValues = values.iterator();\n\n    // Replace existing values, if any.\n    while (keyValues.hasNext() && newValues.hasNext()) {\n      keyValues.next();\n      keyValues.set(newValues.next());\n    }\n\n    // Remove remaining old values, if any.\n    while (keyValues.hasNext()) {\n      keyValues.next();\n      keyValues.remove();\n    }\n\n    // Add remaining new values, if any.\n    while (newValues.hasNext()) {\n      keyValues.add(newValues.next());\n    }\n\n    return oldValues;\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  @Override\n  public List<V> replaceValues(@Nullable K key, Iterable<? extends V> values) {\n    List<V> oldValues = getCopy(key);\n    ListIterator<V> keyValues = new ValueForKeyIterator(key);\n    Iterator<? extends V> newValues = values.iterator();\n\n    // Replace existing values, if any.\n    while (keyValues.hasNext() && newValues.hasNext()) {\n      keyValues.next();\n      keyValues.set(newValues.next());\n    }\n\n    // Remove remaining old values, if any.\n    while (keyValues.hasNext()) {\n      keyValues.next();\n      keyValues.remove();\n    }\n\n    // Add remaining new values, if any.\n    while (newValues.hasNext()) {\n      keyValues.add(newValues.next());\n    }\n\n    return oldValues;\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "@", "Override", "public", "List", "<", "V", ">", "replaceValues", "(", "@", "Nullable", "K", "key", ",", "Iterable", "<", "?", "extends", "V", ">", "values", ")", "{", "List", "<", "V", ">", "oldValues", "=", "getCopy", "(", "key", ")", ";", "ListIterator", "<", "V", ">", "keyValues", "=", "new", "ValueForKeyIterator", "(", "key", ")", ";", "Iterator", "<", "?", "extends", "V", ">", "newValues", "=", "values", ".", "iterator", "(", ")", ";", "// Replace existing values, if any.", "while", "(", "keyValues", ".", "hasNext", "(", ")", "&&", "newValues", ".", "hasNext", "(", ")", ")", "{", "keyValues", ".", "next", "(", ")", ";", "keyValues", ".", "set", "(", "newValues", ".", "next", "(", ")", ")", ";", "}", "// Remove remaining old values, if any.", "while", "(", "keyValues", ".", "hasNext", "(", ")", ")", "{", "keyValues", ".", "next", "(", ")", ";", "keyValues", ".", "remove", "(", ")", ";", "}", "// Add remaining new values, if any.", "while", "(", "newValues", ".", "hasNext", "(", ")", ")", "{", "keyValues", ".", "add", "(", "newValues", ".", "next", "(", ")", ")", ";", "}", "return", "oldValues", ";", "}"], "docstring": "{@inheritDoc}\n\n<p>If any entries for the specified {@code key} already exist in the multimap, their values are\nchanged in-place without affecting the iteration order.\n\n<p>The returned list is immutable and implements {@link java.util.RandomAccess}.", "docstring_tokens": ["{", "@inheritDoc", "}"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/LinkedListMultimap.java#L614-L639", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/LinkedListMultimap.java", "func_name": "LinkedListMultimap.get", "original_string": "@Override\n  public List<V> get(final @Nullable K key) {\n    return new AbstractSequentialList<V>() {\n      @Override\n      public int size() {\n        KeyList<K, V> keyList = keyToKeyList.get(key);\n        return (keyList == null) ? 0 : keyList.count;\n      }\n\n      @Override\n      public ListIterator<V> listIterator(int index) {\n        return new ValueForKeyIterator(key, index);\n      }\n    };\n  }", "language": "java", "code": "@Override\n  public List<V> get(final @Nullable K key) {\n    return new AbstractSequentialList<V>() {\n      @Override\n      public int size() {\n        KeyList<K, V> keyList = keyToKeyList.get(key);\n        return (keyList == null) ? 0 : keyList.count;\n      }\n\n      @Override\n      public ListIterator<V> listIterator(int index) {\n        return new ValueForKeyIterator(key, index);\n      }\n    };\n  }", "code_tokens": ["@", "Override", "public", "List", "<", "V", ">", "get", "(", "final", "@", "Nullable", "K", "key", ")", "{", "return", "new", "AbstractSequentialList", "<", "V", ">", "(", ")", "{", "@", "Override", "public", "int", "size", "(", ")", "{", "KeyList", "<", "K", ",", "V", ">", "keyList", "=", "keyToKeyList", ".", "get", "(", "key", ")", ";", "return", "(", "keyList", "==", "null", ")", "?", "0", ":", "keyList", ".", "count", ";", "}", "@", "Override", "public", "ListIterator", "<", "V", ">", "listIterator", "(", "int", "index", ")", "{", "return", "new", "ValueForKeyIterator", "(", "key", ",", "index", ")", ";", "}", "}", ";", "}"], "docstring": "{@inheritDoc}\n\n<p>If the multimap is modified while an iteration over the list is in progress (except through\nthe iterator's own {@code add}, {@code set} or {@code remove} operations) the results of the\niteration are undefined.\n\n<p>The returned list is not serializable and does not have random access.", "docstring_tokens": ["{", "@inheritDoc", "}"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/LinkedListMultimap.java#L678-L692", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/LinkedListMultimap.java", "func_name": "LinkedListMultimap.entries", "original_string": "@Override\n  public List<Entry<K, V>> entries() {\n    return (List<Entry<K, V>>) super.entries();\n  }", "language": "java", "code": "@Override\n  public List<Entry<K, V>> entries() {\n    return (List<Entry<K, V>>) super.entries();\n  }", "code_tokens": ["@", "Override", "public", "List", "<", "Entry", "<", "K", ",", "V", ">", ">", "entries", "(", ")", "{", "return", "(", "List", "<", "Entry", "<", "K", ",", "V", ">", ">", ")", "super", ".", "entries", "(", ")", ";", "}"], "docstring": "{@inheritDoc}\n\n<p>The iterator generated by the returned collection traverses the entries in the order they\nwere added to the multimap. Because the entries may have duplicates and follow the insertion\nordering, this method returns a {@link List}, instead of the {@link Collection} specified in\nthe {@link ListMultimap} interface.\n\n<p>An entry's {@link Entry#getKey} method always returns the same key, regardless of what\nhappens subsequently. As long as the corresponding key-value mapping is not removed from the\nmultimap, {@link Entry#getValue} returns the value from the multimap, which may change over\ntime, and {@link Entry#setValue} modifies that value. Removing the mapping from the multimap\ndoes not alter the value returned by {@code getValue()}, though a subsequent {@code setValue()}\ncall won't update the multimap but will lead to a revised value being returned by {@code\ngetValue()}.", "docstring_tokens": ["{", "@inheritDoc", "}"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/LinkedListMultimap.java#L783-L786", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/hash/HashingInputStream.java", "func_name": "HashingInputStream.read", "original_string": "@Override\n  @CanIgnoreReturnValue\n  public int read() throws IOException {\n    int b = in.read();\n    if (b != -1) {\n      hasher.putByte((byte) b);\n    }\n    return b;\n  }", "language": "java", "code": "@Override\n  @CanIgnoreReturnValue\n  public int read() throws IOException {\n    int b = in.read();\n    if (b != -1) {\n      hasher.putByte((byte) b);\n    }\n    return b;\n  }", "code_tokens": ["@", "Override", "@", "CanIgnoreReturnValue", "public", "int", "read", "(", ")", "throws", "IOException", "{", "int", "b", "=", "in", ".", "read", "(", ")", ";", "if", "(", "b", "!=", "-", "1", ")", "{", "hasher", ".", "putByte", "(", "(", "byte", ")", "b", ")", ";", "}", "return", "b", ";", "}"], "docstring": "Reads the next byte of data from the underlying input stream and updates the hasher with the\nbyte read.", "docstring_tokens": ["Reads", "the", "next", "byte", "of", "data", "from", "the", "underlying", "input", "stream", "and", "updates", "the", "hasher", "with", "the", "byte", "read", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/hash/HashingInputStream.java#L50-L58", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/hash/HashingInputStream.java", "func_name": "HashingInputStream.read", "original_string": "@Override\n  @CanIgnoreReturnValue\n  public int read(byte[] bytes, int off, int len) throws IOException {\n    int numOfBytesRead = in.read(bytes, off, len);\n    if (numOfBytesRead != -1) {\n      hasher.putBytes(bytes, off, numOfBytesRead);\n    }\n    return numOfBytesRead;\n  }", "language": "java", "code": "@Override\n  @CanIgnoreReturnValue\n  public int read(byte[] bytes, int off, int len) throws IOException {\n    int numOfBytesRead = in.read(bytes, off, len);\n    if (numOfBytesRead != -1) {\n      hasher.putBytes(bytes, off, numOfBytesRead);\n    }\n    return numOfBytesRead;\n  }", "code_tokens": ["@", "Override", "@", "CanIgnoreReturnValue", "public", "int", "read", "(", "byte", "[", "]", "bytes", ",", "int", "off", ",", "int", "len", ")", "throws", "IOException", "{", "int", "numOfBytesRead", "=", "in", ".", "read", "(", "bytes", ",", "off", ",", "len", ")", ";", "if", "(", "numOfBytesRead", "!=", "-", "1", ")", "{", "hasher", ".", "putBytes", "(", "bytes", ",", "off", ",", "numOfBytesRead", ")", ";", "}", "return", "numOfBytesRead", ";", "}"], "docstring": "Reads the specified bytes of data from the underlying input stream and updates the hasher with\nthe bytes read.", "docstring_tokens": ["Reads", "the", "specified", "bytes", "of", "data", "from", "the", "underlying", "input", "stream", "and", "updates", "the", "hasher", "with", "the", "bytes", "read", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/hash/HashingInputStream.java#L64-L72", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Serialization.java", "func_name": "Serialization.writeMap", "original_string": "static <K, V> void writeMap(Map<K, V> map, ObjectOutputStream stream) throws IOException {\n    stream.writeInt(map.size());\n    for (Map.Entry<K, V> entry : map.entrySet()) {\n      stream.writeObject(entry.getKey());\n      stream.writeObject(entry.getValue());\n    }\n  }", "language": "java", "code": "static <K, V> void writeMap(Map<K, V> map, ObjectOutputStream stream) throws IOException {\n    stream.writeInt(map.size());\n    for (Map.Entry<K, V> entry : map.entrySet()) {\n      stream.writeObject(entry.getKey());\n      stream.writeObject(entry.getValue());\n    }\n  }", "code_tokens": ["static", "<", "K", ",", "V", ">", "void", "writeMap", "(", "Map", "<", "K", ",", "V", ">", "map", ",", "ObjectOutputStream", "stream", ")", "throws", "IOException", "{", "stream", ".", "writeInt", "(", "map", ".", "size", "(", ")", ")", ";", "for", "(", "Map", ".", "Entry", "<", "K", ",", "V", ">", "entry", ":", "map", ".", "entrySet", "(", ")", ")", "{", "stream", ".", "writeObject", "(", "entry", ".", "getKey", "(", ")", ")", ";", "stream", ".", "writeObject", "(", "entry", ".", "getValue", "(", ")", ")", ";", "}", "}"], "docstring": "Stores the contents of a map in an output stream, as part of serialization. It does not support\nconcurrent maps whose content may change while the method is running.\n\n<p>The serialized output consists of the number of entries, first key, first value, second key,\nsecond value, and so on.", "docstring_tokens": ["Stores", "the", "contents", "of", "a", "map", "in", "an", "output", "stream", "as", "part", "of", "serialization", ".", "It", "does", "not", "support", "concurrent", "maps", "whose", "content", "may", "change", "while", "the", "method", "is", "running", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Serialization.java#L57-L63", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Serialization.java", "func_name": "Serialization.populateMap", "original_string": "static <K, V> void populateMap(Map<K, V> map, ObjectInputStream stream)\n      throws IOException, ClassNotFoundException {\n    int size = stream.readInt();\n    populateMap(map, stream, size);\n  }", "language": "java", "code": "static <K, V> void populateMap(Map<K, V> map, ObjectInputStream stream)\n      throws IOException, ClassNotFoundException {\n    int size = stream.readInt();\n    populateMap(map, stream, size);\n  }", "code_tokens": ["static", "<", "K", ",", "V", ">", "void", "populateMap", "(", "Map", "<", "K", ",", "V", ">", "map", ",", "ObjectInputStream", "stream", ")", "throws", "IOException", ",", "ClassNotFoundException", "{", "int", "size", "=", "stream", ".", "readInt", "(", ")", ";", "populateMap", "(", "map", ",", "stream", ",", "size", ")", ";", "}"], "docstring": "Populates a map by reading an input stream, as part of deserialization. See {@link #writeMap}\nfor the data format.", "docstring_tokens": ["Populates", "a", "map", "by", "reading", "an", "input", "stream", "as", "part", "of", "deserialization", ".", "See", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Serialization.java#L69-L73", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Serialization.java", "func_name": "Serialization.populateMap", "original_string": "static <K, V> void populateMap(Map<K, V> map, ObjectInputStream stream, int size)\n      throws IOException, ClassNotFoundException {\n    for (int i = 0; i < size; i++) {\n      @SuppressWarnings(\"unchecked\") // reading data stored by writeMap\n      K key = (K) stream.readObject();\n      @SuppressWarnings(\"unchecked\") // reading data stored by writeMap\n      V value = (V) stream.readObject();\n      map.put(key, value);\n    }\n  }", "language": "java", "code": "static <K, V> void populateMap(Map<K, V> map, ObjectInputStream stream, int size)\n      throws IOException, ClassNotFoundException {\n    for (int i = 0; i < size; i++) {\n      @SuppressWarnings(\"unchecked\") // reading data stored by writeMap\n      K key = (K) stream.readObject();\n      @SuppressWarnings(\"unchecked\") // reading data stored by writeMap\n      V value = (V) stream.readObject();\n      map.put(key, value);\n    }\n  }", "code_tokens": ["static", "<", "K", ",", "V", ">", "void", "populateMap", "(", "Map", "<", "K", ",", "V", ">", "map", ",", "ObjectInputStream", "stream", ",", "int", "size", ")", "throws", "IOException", ",", "ClassNotFoundException", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "size", ";", "i", "++", ")", "{", "@", "SuppressWarnings", "(", "\"unchecked\"", ")", "// reading data stored by writeMap", "K", "key", "=", "(", "K", ")", "stream", ".", "readObject", "(", ")", ";", "@", "SuppressWarnings", "(", "\"unchecked\"", ")", "// reading data stored by writeMap", "V", "value", "=", "(", "V", ")", "stream", ".", "readObject", "(", ")", ";", "map", ".", "put", "(", "key", ",", "value", ")", ";", "}", "}"], "docstring": "Populates a map by reading an input stream, as part of deserialization. See {@link #writeMap}\nfor the data format. The size is determined by a prior call to {@link #readCount}.", "docstring_tokens": ["Populates", "a", "map", "by", "reading", "an", "input", "stream", "as", "part", "of", "deserialization", ".", "See", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Serialization.java#L79-L88", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Serialization.java", "func_name": "Serialization.writeMultiset", "original_string": "static <E> void writeMultiset(Multiset<E> multiset, ObjectOutputStream stream)\n      throws IOException {\n    int entryCount = multiset.entrySet().size();\n    stream.writeInt(entryCount);\n    for (Multiset.Entry<E> entry : multiset.entrySet()) {\n      stream.writeObject(entry.getElement());\n      stream.writeInt(entry.getCount());\n    }\n  }", "language": "java", "code": "static <E> void writeMultiset(Multiset<E> multiset, ObjectOutputStream stream)\n      throws IOException {\n    int entryCount = multiset.entrySet().size();\n    stream.writeInt(entryCount);\n    for (Multiset.Entry<E> entry : multiset.entrySet()) {\n      stream.writeObject(entry.getElement());\n      stream.writeInt(entry.getCount());\n    }\n  }", "code_tokens": ["static", "<", "E", ">", "void", "writeMultiset", "(", "Multiset", "<", "E", ">", "multiset", ",", "ObjectOutputStream", "stream", ")", "throws", "IOException", "{", "int", "entryCount", "=", "multiset", ".", "entrySet", "(", ")", ".", "size", "(", ")", ";", "stream", ".", "writeInt", "(", "entryCount", ")", ";", "for", "(", "Multiset", ".", "Entry", "<", "E", ">", "entry", ":", "multiset", ".", "entrySet", "(", ")", ")", "{", "stream", ".", "writeObject", "(", "entry", ".", "getElement", "(", ")", ")", ";", "stream", ".", "writeInt", "(", "entry", ".", "getCount", "(", ")", ")", ";", "}", "}"], "docstring": "Stores the contents of a multiset in an output stream, as part of serialization. It does not\nsupport concurrent multisets whose content may change while the method is running.\n\n<p>The serialized output consists of the number of distinct elements, the first element, its\ncount, the second element, its count, and so on.", "docstring_tokens": ["Stores", "the", "contents", "of", "a", "multiset", "in", "an", "output", "stream", "as", "part", "of", "serialization", ".", "It", "does", "not", "support", "concurrent", "multisets", "whose", "content", "may", "change", "while", "the", "method", "is", "running", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Serialization.java#L97-L105", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Serialization.java", "func_name": "Serialization.populateMultiset", "original_string": "static <E> void populateMultiset(Multiset<E> multiset, ObjectInputStream stream)\n      throws IOException, ClassNotFoundException {\n    int distinctElements = stream.readInt();\n    populateMultiset(multiset, stream, distinctElements);\n  }", "language": "java", "code": "static <E> void populateMultiset(Multiset<E> multiset, ObjectInputStream stream)\n      throws IOException, ClassNotFoundException {\n    int distinctElements = stream.readInt();\n    populateMultiset(multiset, stream, distinctElements);\n  }", "code_tokens": ["static", "<", "E", ">", "void", "populateMultiset", "(", "Multiset", "<", "E", ">", "multiset", ",", "ObjectInputStream", "stream", ")", "throws", "IOException", ",", "ClassNotFoundException", "{", "int", "distinctElements", "=", "stream", ".", "readInt", "(", ")", ";", "populateMultiset", "(", "multiset", ",", "stream", ",", "distinctElements", ")", ";", "}"], "docstring": "Populates a multiset by reading an input stream, as part of deserialization. See {@link\n#writeMultiset} for the data format.", "docstring_tokens": ["Populates", "a", "multiset", "by", "reading", "an", "input", "stream", "as", "part", "of", "deserialization", ".", "See", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Serialization.java#L111-L115", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Serialization.java", "func_name": "Serialization.populateMultiset", "original_string": "static <E> void populateMultiset(\n      Multiset<E> multiset, ObjectInputStream stream, int distinctElements)\n      throws IOException, ClassNotFoundException {\n    for (int i = 0; i < distinctElements; i++) {\n      @SuppressWarnings(\"unchecked\") // reading data stored by writeMultiset\n      E element = (E) stream.readObject();\n      int count = stream.readInt();\n      multiset.add(element, count);\n    }\n  }", "language": "java", "code": "static <E> void populateMultiset(\n      Multiset<E> multiset, ObjectInputStream stream, int distinctElements)\n      throws IOException, ClassNotFoundException {\n    for (int i = 0; i < distinctElements; i++) {\n      @SuppressWarnings(\"unchecked\") // reading data stored by writeMultiset\n      E element = (E) stream.readObject();\n      int count = stream.readInt();\n      multiset.add(element, count);\n    }\n  }", "code_tokens": ["static", "<", "E", ">", "void", "populateMultiset", "(", "Multiset", "<", "E", ">", "multiset", ",", "ObjectInputStream", "stream", ",", "int", "distinctElements", ")", "throws", "IOException", ",", "ClassNotFoundException", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "distinctElements", ";", "i", "++", ")", "{", "@", "SuppressWarnings", "(", "\"unchecked\"", ")", "// reading data stored by writeMultiset", "E", "element", "=", "(", "E", ")", "stream", ".", "readObject", "(", ")", ";", "int", "count", "=", "stream", ".", "readInt", "(", ")", ";", "multiset", ".", "add", "(", "element", ",", "count", ")", ";", "}", "}"], "docstring": "Populates a multiset by reading an input stream, as part of deserialization. See {@link\n#writeMultiset} for the data format. The number of distinct elements is determined by a prior\ncall to {@link #readCount}.", "docstring_tokens": ["Populates", "a", "multiset", "by", "reading", "an", "input", "stream", "as", "part", "of", "deserialization", ".", "See", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Serialization.java#L122-L131", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Serialization.java", "func_name": "Serialization.writeMultimap", "original_string": "static <K, V> void writeMultimap(Multimap<K, V> multimap, ObjectOutputStream stream)\n      throws IOException {\n    stream.writeInt(multimap.asMap().size());\n    for (Map.Entry<K, Collection<V>> entry : multimap.asMap().entrySet()) {\n      stream.writeObject(entry.getKey());\n      stream.writeInt(entry.getValue().size());\n      for (V value : entry.getValue()) {\n        stream.writeObject(value);\n      }\n    }\n  }", "language": "java", "code": "static <K, V> void writeMultimap(Multimap<K, V> multimap, ObjectOutputStream stream)\n      throws IOException {\n    stream.writeInt(multimap.asMap().size());\n    for (Map.Entry<K, Collection<V>> entry : multimap.asMap().entrySet()) {\n      stream.writeObject(entry.getKey());\n      stream.writeInt(entry.getValue().size());\n      for (V value : entry.getValue()) {\n        stream.writeObject(value);\n      }\n    }\n  }", "code_tokens": ["static", "<", "K", ",", "V", ">", "void", "writeMultimap", "(", "Multimap", "<", "K", ",", "V", ">", "multimap", ",", "ObjectOutputStream", "stream", ")", "throws", "IOException", "{", "stream", ".", "writeInt", "(", "multimap", ".", "asMap", "(", ")", ".", "size", "(", ")", ")", ";", "for", "(", "Map", ".", "Entry", "<", "K", ",", "Collection", "<", "V", ">", ">", "entry", ":", "multimap", ".", "asMap", "(", ")", ".", "entrySet", "(", ")", ")", "{", "stream", ".", "writeObject", "(", "entry", ".", "getKey", "(", ")", ")", ";", "stream", ".", "writeInt", "(", "entry", ".", "getValue", "(", ")", ".", "size", "(", ")", ")", ";", "for", "(", "V", "value", ":", "entry", ".", "getValue", "(", ")", ")", "{", "stream", ".", "writeObject", "(", "value", ")", ";", "}", "}", "}"], "docstring": "Stores the contents of a multimap in an output stream, as part of serialization. It does not\nsupport concurrent multimaps whose content may change while the method is running. The {@link\nMultimap#asMap} view determines the ordering in which data is written to the stream.\n\n<p>The serialized output consists of the number of distinct keys, and then for each distinct\nkey: the key, the number of values for that key, and the key's values.", "docstring_tokens": ["Stores", "the", "contents", "of", "a", "multimap", "in", "an", "output", "stream", "as", "part", "of", "serialization", ".", "It", "does", "not", "support", "concurrent", "multimaps", "whose", "content", "may", "change", "while", "the", "method", "is", "running", ".", "The", "{", "@link", "Multimap#asMap", "}", "view", "determines", "the", "ordering", "in", "which", "data", "is", "written", "to", "the", "stream", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Serialization.java#L141-L151", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Serialization.java", "func_name": "Serialization.populateMultimap", "original_string": "static <K, V> void populateMultimap(Multimap<K, V> multimap, ObjectInputStream stream)\n      throws IOException, ClassNotFoundException {\n    int distinctKeys = stream.readInt();\n    populateMultimap(multimap, stream, distinctKeys);\n  }", "language": "java", "code": "static <K, V> void populateMultimap(Multimap<K, V> multimap, ObjectInputStream stream)\n      throws IOException, ClassNotFoundException {\n    int distinctKeys = stream.readInt();\n    populateMultimap(multimap, stream, distinctKeys);\n  }", "code_tokens": ["static", "<", "K", ",", "V", ">", "void", "populateMultimap", "(", "Multimap", "<", "K", ",", "V", ">", "multimap", ",", "ObjectInputStream", "stream", ")", "throws", "IOException", ",", "ClassNotFoundException", "{", "int", "distinctKeys", "=", "stream", ".", "readInt", "(", ")", ";", "populateMultimap", "(", "multimap", ",", "stream", ",", "distinctKeys", ")", ";", "}"], "docstring": "Populates a multimap by reading an input stream, as part of deserialization. See {@link\n#writeMultimap} for the data format.", "docstring_tokens": ["Populates", "a", "multimap", "by", "reading", "an", "input", "stream", "as", "part", "of", "deserialization", ".", "See", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Serialization.java#L157-L161", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Serialization.java", "func_name": "Serialization.populateMultimap", "original_string": "static <K, V> void populateMultimap(\n      Multimap<K, V> multimap, ObjectInputStream stream, int distinctKeys)\n      throws IOException, ClassNotFoundException {\n    for (int i = 0; i < distinctKeys; i++) {\n      @SuppressWarnings(\"unchecked\") // reading data stored by writeMultimap\n      K key = (K) stream.readObject();\n      Collection<V> values = multimap.get(key);\n      int valueCount = stream.readInt();\n      for (int j = 0; j < valueCount; j++) {\n        @SuppressWarnings(\"unchecked\") // reading data stored by writeMultimap\n        V value = (V) stream.readObject();\n        values.add(value);\n      }\n    }\n  }", "language": "java", "code": "static <K, V> void populateMultimap(\n      Multimap<K, V> multimap, ObjectInputStream stream, int distinctKeys)\n      throws IOException, ClassNotFoundException {\n    for (int i = 0; i < distinctKeys; i++) {\n      @SuppressWarnings(\"unchecked\") // reading data stored by writeMultimap\n      K key = (K) stream.readObject();\n      Collection<V> values = multimap.get(key);\n      int valueCount = stream.readInt();\n      for (int j = 0; j < valueCount; j++) {\n        @SuppressWarnings(\"unchecked\") // reading data stored by writeMultimap\n        V value = (V) stream.readObject();\n        values.add(value);\n      }\n    }\n  }", "code_tokens": ["static", "<", "K", ",", "V", ">", "void", "populateMultimap", "(", "Multimap", "<", "K", ",", "V", ">", "multimap", ",", "ObjectInputStream", "stream", ",", "int", "distinctKeys", ")", "throws", "IOException", ",", "ClassNotFoundException", "{", "for", "(", "int", "i", "=", "0", ";", "i", "<", "distinctKeys", ";", "i", "++", ")", "{", "@", "SuppressWarnings", "(", "\"unchecked\"", ")", "// reading data stored by writeMultimap", "K", "key", "=", "(", "K", ")", "stream", ".", "readObject", "(", ")", ";", "Collection", "<", "V", ">", "values", "=", "multimap", ".", "get", "(", "key", ")", ";", "int", "valueCount", "=", "stream", ".", "readInt", "(", ")", ";", "for", "(", "int", "j", "=", "0", ";", "j", "<", "valueCount", ";", "j", "++", ")", "{", "@", "SuppressWarnings", "(", "\"unchecked\"", ")", "// reading data stored by writeMultimap", "V", "value", "=", "(", "V", ")", "stream", ".", "readObject", "(", ")", ";", "values", ".", "add", "(", "value", ")", ";", "}", "}", "}"], "docstring": "Populates a multimap by reading an input stream, as part of deserialization. See {@link\n#writeMultimap} for the data format. The number of distinct keys is determined by a prior call\nto {@link #readCount}.", "docstring_tokens": ["Populates", "a", "multimap", "by", "reading", "an", "input", "stream", "as", "part", "of", "deserialization", ".", "See", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Serialization.java#L168-L182", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/collect/Serialization.java", "func_name": "Serialization.getFieldSetter", "original_string": "static <T> FieldSetter<T> getFieldSetter(final Class<T> clazz, String fieldName) {\n    try {\n      Field field = clazz.getDeclaredField(fieldName);\n      return new FieldSetter<T>(field);\n    } catch (NoSuchFieldException e) {\n      throw new AssertionError(e); // programmer error\n    }\n  }", "language": "java", "code": "static <T> FieldSetter<T> getFieldSetter(final Class<T> clazz, String fieldName) {\n    try {\n      Field field = clazz.getDeclaredField(fieldName);\n      return new FieldSetter<T>(field);\n    } catch (NoSuchFieldException e) {\n      throw new AssertionError(e); // programmer error\n    }\n  }", "code_tokens": ["static", "<", "T", ">", "FieldSetter", "<", "T", ">", "getFieldSetter", "(", "final", "Class", "<", "T", ">", "clazz", ",", "String", "fieldName", ")", "{", "try", "{", "Field", "field", "=", "clazz", ".", "getDeclaredField", "(", "fieldName", ")", ";", "return", "new", "FieldSetter", "<", "T", ">", "(", "field", ")", ";", "}", "catch", "(", "NoSuchFieldException", "e", ")", "{", "throw", "new", "AssertionError", "(", "e", ")", ";", "// programmer error", "}", "}"], "docstring": "Secret sauce for setting final fields; don't make it public.", "docstring_tokens": ["Secret", "sauce", "for", "setting", "final", "fields", ";", "don", "t", "make", "it", "public", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/collect/Serialization.java#L185-L192", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/graph/MapRetrievalCache.java", "func_name": "MapRetrievalCache.getIfCached", "original_string": "@Override\n  protected V getIfCached(@Nullable Object key) {\n    V value = super.getIfCached(key);\n    if (value != null) {\n      return value;\n    }\n\n    // Store a local reference to the cache entry. If the backing map is immutable, this,\n    // in combination with immutable cache entries, will ensure a thread-safe cache.\n    CacheEntry<K, V> entry;\n\n    // Check cache. We use == on purpose because it's cheaper and a cache miss is ok.\n    entry = cacheEntry1;\n    if (entry != null && entry.key == key) {\n      return entry.value;\n    }\n    entry = cacheEntry2;\n    if (entry != null && entry.key == key) {\n      // Promote second cache entry to first so the access pattern\n      // [K1, K2, K1, K3, K1, K4...] still hits the cache half the time.\n      addToCache(entry);\n      return entry.value;\n    }\n    return null;\n  }", "language": "java", "code": "@Override\n  protected V getIfCached(@Nullable Object key) {\n    V value = super.getIfCached(key);\n    if (value != null) {\n      return value;\n    }\n\n    // Store a local reference to the cache entry. If the backing map is immutable, this,\n    // in combination with immutable cache entries, will ensure a thread-safe cache.\n    CacheEntry<K, V> entry;\n\n    // Check cache. We use == on purpose because it's cheaper and a cache miss is ok.\n    entry = cacheEntry1;\n    if (entry != null && entry.key == key) {\n      return entry.value;\n    }\n    entry = cacheEntry2;\n    if (entry != null && entry.key == key) {\n      // Promote second cache entry to first so the access pattern\n      // [K1, K2, K1, K3, K1, K4...] still hits the cache half the time.\n      addToCache(entry);\n      return entry.value;\n    }\n    return null;\n  }", "code_tokens": ["@", "Override", "protected", "V", "getIfCached", "(", "@", "Nullable", "Object", "key", ")", "{", "V", "value", "=", "super", ".", "getIfCached", "(", "key", ")", ";", "if", "(", "value", "!=", "null", ")", "{", "return", "value", ";", "}", "// Store a local reference to the cache entry. If the backing map is immutable, this,", "// in combination with immutable cache entries, will ensure a thread-safe cache.", "CacheEntry", "<", "K", ",", "V", ">", "entry", ";", "// Check cache. We use == on purpose because it's cheaper and a cache miss is ok.", "entry", "=", "cacheEntry1", ";", "if", "(", "entry", "!=", "null", "&&", "entry", ".", "key", "==", "key", ")", "{", "return", "entry", ".", "value", ";", "}", "entry", "=", "cacheEntry2", ";", "if", "(", "entry", "!=", "null", "&&", "entry", ".", "key", "==", "key", ")", "{", "// Promote second cache entry to first so the access pattern", "// [K1, K2, K1, K3, K1, K4...] still hits the cache half the time.", "addToCache", "(", "entry", ")", ";", "return", "entry", ".", "value", ";", "}", "return", "null", ";", "}"], "docstring": "Internal methods ('protected' is still package-visible, but treat as only subclass-visible)", "docstring_tokens": ["Internal", "methods", "(", "protected", "is", "still", "package", "-", "visible", "but", "treat", "as", "only", "subclass", "-", "visible", ")"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/graph/MapRetrievalCache.java#L53-L77", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/hash/AbstractStreamingHasher.java", "func_name": "AbstractStreamingHasher.processRemaining", "original_string": "protected void processRemaining(ByteBuffer bb) {\n    bb.position(bb.limit()); // move at the end\n    bb.limit(chunkSize + 7); // get ready to pad with longs\n    while (bb.position() < chunkSize) {\n      bb.putLong(0);\n    }\n    bb.limit(chunkSize);\n    bb.flip();\n    process(bb);\n  }", "language": "java", "code": "protected void processRemaining(ByteBuffer bb) {\n    bb.position(bb.limit()); // move at the end\n    bb.limit(chunkSize + 7); // get ready to pad with longs\n    while (bb.position() < chunkSize) {\n      bb.putLong(0);\n    }\n    bb.limit(chunkSize);\n    bb.flip();\n    process(bb);\n  }", "code_tokens": ["protected", "void", "processRemaining", "(", "ByteBuffer", "bb", ")", "{", "bb", ".", "position", "(", "bb", ".", "limit", "(", ")", ")", ";", "// move at the end", "bb", ".", "limit", "(", "chunkSize", "+", "7", ")", ";", "// get ready to pad with longs", "while", "(", "bb", ".", "position", "(", ")", "<", "chunkSize", ")", "{", "bb", ".", "putLong", "(", "0", ")", ";", "}", "bb", ".", "limit", "(", "chunkSize", ")", ";", "bb", ".", "flip", "(", ")", ";", "process", "(", "bb", ")", ";", "}"], "docstring": "This is invoked for the last bytes of the input, which are not enough to fill a whole chunk.\nThe passed {@code ByteBuffer} is guaranteed to be non-empty.\n\n<p>This implementation simply pads with zeros and delegates to {@link #process(ByteBuffer)}.", "docstring_tokens": ["This", "is", "invoked", "for", "the", "last", "bytes", "of", "the", "input", "which", "are", "not", "enough", "to", "fill", "a", "whole", "chunk", ".", "The", "passed", "{", "@code", "ByteBuffer", "}", "is", "guaranteed", "to", "be", "non", "-", "empty", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/hash/AbstractStreamingHasher.java#L82-L91", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/primitives/UnsignedLong.java", "func_name": "UnsignedLong.dividedBy", "original_string": "public UnsignedLong dividedBy(UnsignedLong val) {\n    return fromLongBits(UnsignedLongs.divide(value, checkNotNull(val).value));\n  }", "language": "java", "code": "public UnsignedLong dividedBy(UnsignedLong val) {\n    return fromLongBits(UnsignedLongs.divide(value, checkNotNull(val).value));\n  }", "code_tokens": ["public", "UnsignedLong", "dividedBy", "(", "UnsignedLong", "val", ")", "{", "return", "fromLongBits", "(", "UnsignedLongs", ".", "divide", "(", "value", ",", "checkNotNull", "(", "val", ")", ".", "value", ")", ")", ";", "}"], "docstring": "Returns the result of dividing this by {@code val}.\n\n@since 14.0", "docstring_tokens": ["Returns", "the", "result", "of", "dividing", "this", "by", "{", "@code", "val", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/primitives/UnsignedLong.java#L161-L163", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/primitives/UnsignedLong.java", "func_name": "UnsignedLong.mod", "original_string": "public UnsignedLong mod(UnsignedLong val) {\n    return fromLongBits(UnsignedLongs.remainder(value, checkNotNull(val).value));\n  }", "language": "java", "code": "public UnsignedLong mod(UnsignedLong val) {\n    return fromLongBits(UnsignedLongs.remainder(value, checkNotNull(val).value));\n  }", "code_tokens": ["public", "UnsignedLong", "mod", "(", "UnsignedLong", "val", ")", "{", "return", "fromLongBits", "(", "UnsignedLongs", ".", "remainder", "(", "value", ",", "checkNotNull", "(", "val", ")", ".", "value", ")", ")", ";", "}"], "docstring": "Returns this modulo {@code val}.\n\n@since 14.0", "docstring_tokens": ["Returns", "this", "modulo", "{", "@code", "val", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/primitives/UnsignedLong.java#L170-L172", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/primitives/UnsignedLong.java", "func_name": "UnsignedLong.floatValue", "original_string": "@Override\n  public float floatValue() {\n    @SuppressWarnings(\"cast\")\n    float fValue = (float) (value & UNSIGNED_MASK);\n    if (value < 0) {\n      fValue += 0x1.0p63f;\n    }\n    return fValue;\n  }", "language": "java", "code": "@Override\n  public float floatValue() {\n    @SuppressWarnings(\"cast\")\n    float fValue = (float) (value & UNSIGNED_MASK);\n    if (value < 0) {\n      fValue += 0x1.0p63f;\n    }\n    return fValue;\n  }", "code_tokens": ["@", "Override", "public", "float", "floatValue", "(", ")", "{", "@", "SuppressWarnings", "(", "\"cast\"", ")", "float", "fValue", "=", "(", "float", ")", "(", "value", "&", "UNSIGNED_MASK", ")", ";", "if", "(", "value", "<", "0", ")", "{", "fValue", "+=", "0x1", ".", "0", "p63f", ";", "}", "return", "fValue", ";", "}"], "docstring": "Returns the value of this {@code UnsignedLong} as a {@code float}, analogous to a widening\nprimitive conversion from {@code long} to {@code float}, and correctly rounded.", "docstring_tokens": ["Returns", "the", "value", "of", "this", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/primitives/UnsignedLong.java#L196-L204", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/primitives/UnsignedLong.java", "func_name": "UnsignedLong.doubleValue", "original_string": "@Override\n  public double doubleValue() {\n    @SuppressWarnings(\"cast\")\n    double dValue = (double) (value & UNSIGNED_MASK);\n    if (value < 0) {\n      dValue += 0x1.0p63;\n    }\n    return dValue;\n  }", "language": "java", "code": "@Override\n  public double doubleValue() {\n    @SuppressWarnings(\"cast\")\n    double dValue = (double) (value & UNSIGNED_MASK);\n    if (value < 0) {\n      dValue += 0x1.0p63;\n    }\n    return dValue;\n  }", "code_tokens": ["@", "Override", "public", "double", "doubleValue", "(", ")", "{", "@", "SuppressWarnings", "(", "\"cast\"", ")", "double", "dValue", "=", "(", "double", ")", "(", "value", "&", "UNSIGNED_MASK", ")", ";", "if", "(", "value", "<", "0", ")", "{", "dValue", "+=", "0x1", ".", "0", "p63", ";", "}", "return", "dValue", ";", "}"], "docstring": "Returns the value of this {@code UnsignedLong} as a {@code double}, analogous to a widening\nprimitive conversion from {@code long} to {@code double}, and correctly rounded.", "docstring_tokens": ["Returns", "the", "value", "of", "this", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/primitives/UnsignedLong.java#L210-L218", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/primitives/UnsignedLong.java", "func_name": "UnsignedLong.bigIntegerValue", "original_string": "public BigInteger bigIntegerValue() {\n    BigInteger bigInt = BigInteger.valueOf(value & UNSIGNED_MASK);\n    if (value < 0) {\n      bigInt = bigInt.setBit(Long.SIZE - 1);\n    }\n    return bigInt;\n  }", "language": "java", "code": "public BigInteger bigIntegerValue() {\n    BigInteger bigInt = BigInteger.valueOf(value & UNSIGNED_MASK);\n    if (value < 0) {\n      bigInt = bigInt.setBit(Long.SIZE - 1);\n    }\n    return bigInt;\n  }", "code_tokens": ["public", "BigInteger", "bigIntegerValue", "(", ")", "{", "BigInteger", "bigInt", "=", "BigInteger", ".", "valueOf", "(", "value", "&", "UNSIGNED_MASK", ")", ";", "if", "(", "value", "<", "0", ")", "{", "bigInt", "=", "bigInt", ".", "setBit", "(", "Long", ".", "SIZE", "-", "1", ")", ";", "}", "return", "bigInt", ";", "}"], "docstring": "Returns the value of this {@code UnsignedLong} as a {@link BigInteger}.", "docstring_tokens": ["Returns", "the", "value", "of", "this", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/primitives/UnsignedLong.java#L221-L227", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Throwables.java", "func_name": "Throwables.throwIfInstanceOf", "original_string": "@GwtIncompatible // Class.cast, Class.isInstance\n  public static <X extends Throwable> void throwIfInstanceOf(\n      Throwable throwable, Class<X> declaredType) throws X {\n    checkNotNull(throwable);\n    if (declaredType.isInstance(throwable)) {\n      throw declaredType.cast(throwable);\n    }\n  }", "language": "java", "code": "@GwtIncompatible // Class.cast, Class.isInstance\n  public static <X extends Throwable> void throwIfInstanceOf(\n      Throwable throwable, Class<X> declaredType) throws X {\n    checkNotNull(throwable);\n    if (declaredType.isInstance(throwable)) {\n      throw declaredType.cast(throwable);\n    }\n  }", "code_tokens": ["@", "GwtIncompatible", "// Class.cast, Class.isInstance", "public", "static", "<", "X", "extends", "Throwable", ">", "void", "throwIfInstanceOf", "(", "Throwable", "throwable", ",", "Class", "<", "X", ">", "declaredType", ")", "throws", "X", "{", "checkNotNull", "(", "throwable", ")", ";", "if", "(", "declaredType", ".", "isInstance", "(", "throwable", ")", ")", "{", "throw", "declaredType", ".", "cast", "(", "throwable", ")", ";", "}", "}"], "docstring": "Throws {@code throwable} if it is an instance of {@code declaredType}. Example usage:\n\n<pre>\nfor (Foo foo : foos) {\ntry {\nfoo.bar();\n} catch (BarException | RuntimeException | Error t) {\nfailure = t;\n}\n}\nif (failure != null) {\nthrowIfInstanceOf(failure, BarException.class);\nthrowIfUnchecked(failure);\nthrow new AssertionError(failure);\n}\n</pre>\n\n@since 20.0", "docstring_tokens": ["Throws", "{", "@code", "throwable", "}", "if", "it", "is", "an", "instance", "of", "{", "@code", "declaredType", "}", ".", "Example", "usage", ":"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Throwables.java#L71-L78", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Throwables.java", "func_name": "Throwables.propagateIfInstanceOf", "original_string": "@Deprecated\n  @GwtIncompatible // throwIfInstanceOf\n  public static <X extends Throwable> void propagateIfInstanceOf(\n      @Nullable Throwable throwable, Class<X> declaredType) throws X {\n    if (throwable != null) {\n      throwIfInstanceOf(throwable, declaredType);\n    }\n  }", "language": "java", "code": "@Deprecated\n  @GwtIncompatible // throwIfInstanceOf\n  public static <X extends Throwable> void propagateIfInstanceOf(\n      @Nullable Throwable throwable, Class<X> declaredType) throws X {\n    if (throwable != null) {\n      throwIfInstanceOf(throwable, declaredType);\n    }\n  }", "code_tokens": ["@", "Deprecated", "@", "GwtIncompatible", "// throwIfInstanceOf", "public", "static", "<", "X", "extends", "Throwable", ">", "void", "propagateIfInstanceOf", "(", "@", "Nullable", "Throwable", "throwable", ",", "Class", "<", "X", ">", "declaredType", ")", "throws", "X", "{", "if", "(", "throwable", "!=", "null", ")", "{", "throwIfInstanceOf", "(", "throwable", ",", "declaredType", ")", ";", "}", "}"], "docstring": "Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@code\ndeclaredType}. Example usage:\n\n<pre>\ntry {\nsomeMethodThatCouldThrowAnything();\n} catch (IKnowWhatToDoWithThisException e) {\nhandle(e);\n} catch (Throwable t) {\nThrowables.propagateIfInstanceOf(t, IOException.class);\nThrowables.propagateIfInstanceOf(t, SQLException.class);\nthrow Throwables.propagate(t);\n}\n</pre>\n\n@deprecated Use {@link #throwIfInstanceOf}, which has the same behavior but rejects {@code\nnull}.", "docstring_tokens": ["Propagates", "{", "@code", "throwable", "}", "exactly", "as", "-", "is", "if", "and", "only", "if", "it", "is", "an", "instance", "of", "{", "@code", "declaredType", "}", ".", "Example", "usage", ":"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Throwables.java#L99-L106", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Throwables.java", "func_name": "Throwables.throwIfUnchecked", "original_string": "public static void throwIfUnchecked(Throwable throwable) {\n    checkNotNull(throwable);\n    if (throwable instanceof RuntimeException) {\n      throw (RuntimeException) throwable;\n    }\n    if (throwable instanceof Error) {\n      throw (Error) throwable;\n    }\n  }", "language": "java", "code": "public static void throwIfUnchecked(Throwable throwable) {\n    checkNotNull(throwable);\n    if (throwable instanceof RuntimeException) {\n      throw (RuntimeException) throwable;\n    }\n    if (throwable instanceof Error) {\n      throw (Error) throwable;\n    }\n  }", "code_tokens": ["public", "static", "void", "throwIfUnchecked", "(", "Throwable", "throwable", ")", "{", "checkNotNull", "(", "throwable", ")", ";", "if", "(", "throwable", "instanceof", "RuntimeException", ")", "{", "throw", "(", "RuntimeException", ")", "throwable", ";", "}", "if", "(", "throwable", "instanceof", "Error", ")", "{", "throw", "(", "Error", ")", "throwable", ";", "}", "}"], "docstring": "Throws {@code throwable} if it is a {@link RuntimeException} or {@link Error}. Example usage:\n\n<pre>\nfor (Foo foo : foos) {\ntry {\nfoo.bar();\n} catch (RuntimeException | Error t) {\nfailure = t;\n}\n}\nif (failure != null) {\nthrowIfUnchecked(failure);\nthrow new AssertionError(failure);\n}\n</pre>\n\n@since 20.0", "docstring_tokens": ["Throws", "{", "@code", "throwable", "}", "if", "it", "is", "a", "{", "@link", "RuntimeException", "}", "or", "{", "@link", "Error", "}", ".", "Example", "usage", ":"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Throwables.java#L127-L135", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Throwables.java", "func_name": "Throwables.propagateIfPossible", "original_string": "@Deprecated\n  @GwtIncompatible\n  public static void propagateIfPossible(@Nullable Throwable throwable) {\n    if (throwable != null) {\n      throwIfUnchecked(throwable);\n    }\n  }", "language": "java", "code": "@Deprecated\n  @GwtIncompatible\n  public static void propagateIfPossible(@Nullable Throwable throwable) {\n    if (throwable != null) {\n      throwIfUnchecked(throwable);\n    }\n  }", "code_tokens": ["@", "Deprecated", "@", "GwtIncompatible", "public", "static", "void", "propagateIfPossible", "(", "@", "Nullable", "Throwable", "throwable", ")", "{", "if", "(", "throwable", "!=", "null", ")", "{", "throwIfUnchecked", "(", "throwable", ")", ";", "}", "}"], "docstring": "Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link\nRuntimeException} or {@link Error}. Example usage:\n\n<pre>\ntry {\nsomeMethodThatCouldThrowAnything();\n} catch (IKnowWhatToDoWithThisException e) {\nhandle(e);\n} catch (Throwable t) {\nThrowables.propagateIfPossible(t);\nthrow new RuntimeException(\"unexpected\", t);\n}\n</pre>\n\n@deprecated Use {@link #throwIfUnchecked}, which has the same behavior but rejects {@code\nnull}.", "docstring_tokens": ["Propagates", "{", "@code", "throwable", "}", "exactly", "as", "-", "is", "if", "and", "only", "if", "it", "is", "an", "instance", "of", "{", "@link", "RuntimeException", "}", "or", "{", "@link", "Error", "}", ".", "Example", "usage", ":"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Throwables.java#L155-L161", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Throwables.java", "func_name": "Throwables.propagateIfPossible", "original_string": "@GwtIncompatible // propagateIfInstanceOf\n  public static <X1 extends Throwable, X2 extends Throwable> void propagateIfPossible(\n      @Nullable Throwable throwable, Class<X1> declaredType1, Class<X2> declaredType2)\n      throws X1, X2 {\n    checkNotNull(declaredType2);\n    propagateIfInstanceOf(throwable, declaredType1);\n    propagateIfPossible(throwable, declaredType2);\n  }", "language": "java", "code": "@GwtIncompatible // propagateIfInstanceOf\n  public static <X1 extends Throwable, X2 extends Throwable> void propagateIfPossible(\n      @Nullable Throwable throwable, Class<X1> declaredType1, Class<X2> declaredType2)\n      throws X1, X2 {\n    checkNotNull(declaredType2);\n    propagateIfInstanceOf(throwable, declaredType1);\n    propagateIfPossible(throwable, declaredType2);\n  }", "code_tokens": ["@", "GwtIncompatible", "// propagateIfInstanceOf", "public", "static", "<", "X1", "extends", "Throwable", ",", "X2", "extends", "Throwable", ">", "void", "propagateIfPossible", "(", "@", "Nullable", "Throwable", "throwable", ",", "Class", "<", "X1", ">", "declaredType1", ",", "Class", "<", "X2", ">", "declaredType2", ")", "throws", "X1", ",", "X2", "{", "checkNotNull", "(", "declaredType2", ")", ";", "propagateIfInstanceOf", "(", "throwable", ",", "declaredType1", ")", ";", "propagateIfPossible", "(", "throwable", ",", "declaredType2", ")", ";", "}"], "docstring": "Propagates {@code throwable} exactly as-is, if and only if it is an instance of {@link\nRuntimeException}, {@link Error}, {@code declaredType1}, or {@code declaredType2}. In the\nunlikely case that you have three or more declared checked exception types, you can handle them\nall by invoking these methods repeatedly. See usage example in {@link\n#propagateIfPossible(Throwable, Class)}.\n\n@param throwable the Throwable to possibly propagate\n@param declaredType1 any checked exception type declared by the calling method\n@param declaredType2 any other checked exception type declared by the calling method", "docstring_tokens": ["Propagates", "{", "@code", "throwable", "}", "exactly", "as", "-", "is", "if", "and", "only", "if", "it", "is", "an", "instance", "of", "{", "@link", "RuntimeException", "}", "{", "@link", "Error", "}", "{", "@code", "declaredType1", "}", "or", "{", "@code", "declaredType2", "}", ".", "In", "the", "unlikely", "case", "that", "you", "have", "three", "or", "more", "declared", "checked", "exception", "types", "you", "can", "handle", "them", "all", "by", "invoking", "these", "methods", "repeatedly", ".", "See", "usage", "example", "in", "{", "@link", "#propagateIfPossible", "(", "Throwable", "Class", ")", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Throwables.java#L199-L206", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Throwables.java", "func_name": "Throwables.propagate", "original_string": "@CanIgnoreReturnValue\n  @GwtIncompatible\n  @Deprecated\n  public static RuntimeException propagate(Throwable throwable) {\n    throwIfUnchecked(throwable);\n    throw new RuntimeException(throwable);\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  @GwtIncompatible\n  @Deprecated\n  public static RuntimeException propagate(Throwable throwable) {\n    throwIfUnchecked(throwable);\n    throw new RuntimeException(throwable);\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "@", "GwtIncompatible", "@", "Deprecated", "public", "static", "RuntimeException", "propagate", "(", "Throwable", "throwable", ")", "{", "throwIfUnchecked", "(", "throwable", ")", ";", "throw", "new", "RuntimeException", "(", "throwable", ")", ";", "}"], "docstring": "Propagates {@code throwable} as-is if it is an instance of {@link RuntimeException} or {@link\nError}, or else as a last resort, wraps it in a {@code RuntimeException} and then propagates.\n\n<p>This method always throws an exception. The {@code RuntimeException} return type allows\nclient code to signal to the compiler that statements after the call are unreachable. Example\nusage:\n\n<pre>\nT doSomething() {\ntry {\nreturn someMethodThatCouldThrowAnything();\n} catch (IKnowWhatToDoWithThisException e) {\nreturn handle(e);\n} catch (Throwable t) {\nthrow Throwables.propagate(t);\n}\n}\n</pre>\n\n@param throwable the Throwable to propagate\n@return nothing will ever be returned; this return type is only for your convenience, as\nillustrated in the example above\n@deprecated Use {@code throw e} or {@code throw new RuntimeException(e)} directly, or use a\ncombination of {@link #throwIfUnchecked} and {@code throw new RuntimeException(e)}. For\nbackground on the deprecation, read <a href=\"https://goo.gl/Ivn2kc\">Why we deprecated\n{@code Throwables.propagate}</a>.", "docstring_tokens": ["Propagates", "{", "@code", "throwable", "}", "as", "-", "is", "if", "it", "is", "an", "instance", "of", "{", "@link", "RuntimeException", "}", "or", "{", "@link", "Error", "}", "or", "else", "as", "a", "last", "resort", "wraps", "it", "in", "a", "{", "@code", "RuntimeException", "}", "and", "then", "propagates", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Throwables.java#L236-L242", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Throwables.java", "func_name": "Throwables.getRootCause", "original_string": "public static Throwable getRootCause(Throwable throwable) {\n    // Keep a second pointer that slowly walks the causal chain. If the fast pointer ever catches\n    // the slower pointer, then there's a loop.\n    Throwable slowPointer = throwable;\n    boolean advanceSlowPointer = false;\n\n    Throwable cause;\n    while ((cause = throwable.getCause()) != null) {\n      throwable = cause;\n\n      if (throwable == slowPointer) {\n        throw new IllegalArgumentException(\"Loop in causal chain detected.\", throwable);\n      }\n      if (advanceSlowPointer) {\n        slowPointer = slowPointer.getCause();\n      }\n      advanceSlowPointer = !advanceSlowPointer; // only advance every other iteration\n    }\n    return throwable;\n  }", "language": "java", "code": "public static Throwable getRootCause(Throwable throwable) {\n    // Keep a second pointer that slowly walks the causal chain. If the fast pointer ever catches\n    // the slower pointer, then there's a loop.\n    Throwable slowPointer = throwable;\n    boolean advanceSlowPointer = false;\n\n    Throwable cause;\n    while ((cause = throwable.getCause()) != null) {\n      throwable = cause;\n\n      if (throwable == slowPointer) {\n        throw new IllegalArgumentException(\"Loop in causal chain detected.\", throwable);\n      }\n      if (advanceSlowPointer) {\n        slowPointer = slowPointer.getCause();\n      }\n      advanceSlowPointer = !advanceSlowPointer; // only advance every other iteration\n    }\n    return throwable;\n  }", "code_tokens": ["public", "static", "Throwable", "getRootCause", "(", "Throwable", "throwable", ")", "{", "// Keep a second pointer that slowly walks the causal chain. If the fast pointer ever catches", "// the slower pointer, then there's a loop.", "Throwable", "slowPointer", "=", "throwable", ";", "boolean", "advanceSlowPointer", "=", "false", ";", "Throwable", "cause", ";", "while", "(", "(", "cause", "=", "throwable", ".", "getCause", "(", ")", ")", "!=", "null", ")", "{", "throwable", "=", "cause", ";", "if", "(", "throwable", "==", "slowPointer", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Loop in causal chain detected.\"", ",", "throwable", ")", ";", "}", "if", "(", "advanceSlowPointer", ")", "{", "slowPointer", "=", "slowPointer", ".", "getCause", "(", ")", ";", "}", "advanceSlowPointer", "=", "!", "advanceSlowPointer", ";", "// only advance every other iteration", "}", "return", "throwable", ";", "}"], "docstring": "Returns the innermost cause of {@code throwable}. The first throwable in a chain provides\ncontext from when the error or exception was initially detected. Example usage:\n\n<pre>\nassertEquals(\"Unable to assign a customer id\", Throwables.getRootCause(e).getMessage());\n</pre>\n\n@throws IllegalArgumentException if there is a loop in the causal chain", "docstring_tokens": ["Returns", "the", "innermost", "cause", "of", "{", "@code", "throwable", "}", ".", "The", "first", "throwable", "in", "a", "chain", "provides", "context", "from", "when", "the", "error", "or", "exception", "was", "initially", "detected", ".", "Example", "usage", ":"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Throwables.java#L254-L273", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Throwables.java", "func_name": "Throwables.getCausalChain", "original_string": "@Beta // TODO(kevinb): decide best return type\n  public static List<Throwable> getCausalChain(Throwable throwable) {\n    checkNotNull(throwable);\n    List<Throwable> causes = new ArrayList<>(4);\n    causes.add(throwable);\n\n    // Keep a second pointer that slowly walks the causal chain. If the fast pointer ever catches\n    // the slower pointer, then there's a loop.\n    Throwable slowPointer = throwable;\n    boolean advanceSlowPointer = false;\n\n    Throwable cause;\n    while ((cause = throwable.getCause()) != null) {\n      throwable = cause;\n      causes.add(throwable);\n\n      if (throwable == slowPointer) {\n        throw new IllegalArgumentException(\"Loop in causal chain detected.\", throwable);\n      }\n      if (advanceSlowPointer) {\n        slowPointer = slowPointer.getCause();\n      }\n      advanceSlowPointer = !advanceSlowPointer; // only advance every other iteration\n    }\n    return Collections.unmodifiableList(causes);\n  }", "language": "java", "code": "@Beta // TODO(kevinb): decide best return type\n  public static List<Throwable> getCausalChain(Throwable throwable) {\n    checkNotNull(throwable);\n    List<Throwable> causes = new ArrayList<>(4);\n    causes.add(throwable);\n\n    // Keep a second pointer that slowly walks the causal chain. If the fast pointer ever catches\n    // the slower pointer, then there's a loop.\n    Throwable slowPointer = throwable;\n    boolean advanceSlowPointer = false;\n\n    Throwable cause;\n    while ((cause = throwable.getCause()) != null) {\n      throwable = cause;\n      causes.add(throwable);\n\n      if (throwable == slowPointer) {\n        throw new IllegalArgumentException(\"Loop in causal chain detected.\", throwable);\n      }\n      if (advanceSlowPointer) {\n        slowPointer = slowPointer.getCause();\n      }\n      advanceSlowPointer = !advanceSlowPointer; // only advance every other iteration\n    }\n    return Collections.unmodifiableList(causes);\n  }", "code_tokens": ["@", "Beta", "// TODO(kevinb): decide best return type", "public", "static", "List", "<", "Throwable", ">", "getCausalChain", "(", "Throwable", "throwable", ")", "{", "checkNotNull", "(", "throwable", ")", ";", "List", "<", "Throwable", ">", "causes", "=", "new", "ArrayList", "<>", "(", "4", ")", ";", "causes", ".", "add", "(", "throwable", ")", ";", "// Keep a second pointer that slowly walks the causal chain. If the fast pointer ever catches", "// the slower pointer, then there's a loop.", "Throwable", "slowPointer", "=", "throwable", ";", "boolean", "advanceSlowPointer", "=", "false", ";", "Throwable", "cause", ";", "while", "(", "(", "cause", "=", "throwable", ".", "getCause", "(", ")", ")", "!=", "null", ")", "{", "throwable", "=", "cause", ";", "causes", ".", "add", "(", "throwable", ")", ";", "if", "(", "throwable", "==", "slowPointer", ")", "{", "throw", "new", "IllegalArgumentException", "(", "\"Loop in causal chain detected.\"", ",", "throwable", ")", ";", "}", "if", "(", "advanceSlowPointer", ")", "{", "slowPointer", "=", "slowPointer", ".", "getCause", "(", ")", ";", "}", "advanceSlowPointer", "=", "!", "advanceSlowPointer", ";", "// only advance every other iteration", "}", "return", "Collections", ".", "unmodifiableList", "(", "causes", ")", ";", "}"], "docstring": "Gets a {@code Throwable} cause chain as a list. The first entry in the list will be {@code\nthrowable} followed by its cause hierarchy. Note that this is a snapshot of the cause chain and\nwill not reflect any subsequent changes to the cause chain.\n\n<p>Here's an example of how it can be used to find specific types of exceptions in the cause\nchain:\n\n<pre>\nIterables.filter(Throwables.getCausalChain(e), IOException.class));\n</pre>\n\n@param throwable the non-null {@code Throwable} to extract causes from\n@return an unmodifiable list containing the cause chain starting with {@code throwable}\n@throws IllegalArgumentException if there is a loop in the causal chain", "docstring_tokens": ["Gets", "a", "{", "@code", "Throwable", "}", "cause", "chain", "as", "a", "list", ".", "The", "first", "entry", "in", "the", "list", "will", "be", "{", "@code", "throwable", "}", "followed", "by", "its", "cause", "hierarchy", ".", "Note", "that", "this", "is", "a", "snapshot", "of", "the", "cause", "chain", "and", "will", "not", "reflect", "any", "subsequent", "changes", "to", "the", "cause", "chain", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Throwables.java#L291-L316", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Throwables.java", "func_name": "Throwables.getCauseAs", "original_string": "@Beta\n  @GwtIncompatible // Class.cast(Object)\n  public static <X extends Throwable> X getCauseAs(\n      Throwable throwable, Class<X> expectedCauseType) {\n    try {\n      return expectedCauseType.cast(throwable.getCause());\n    } catch (ClassCastException e) {\n      e.initCause(throwable);\n      throw e;\n    }\n  }", "language": "java", "code": "@Beta\n  @GwtIncompatible // Class.cast(Object)\n  public static <X extends Throwable> X getCauseAs(\n      Throwable throwable, Class<X> expectedCauseType) {\n    try {\n      return expectedCauseType.cast(throwable.getCause());\n    } catch (ClassCastException e) {\n      e.initCause(throwable);\n      throw e;\n    }\n  }", "code_tokens": ["@", "Beta", "@", "GwtIncompatible", "// Class.cast(Object)", "public", "static", "<", "X", "extends", "Throwable", ">", "X", "getCauseAs", "(", "Throwable", "throwable", ",", "Class", "<", "X", ">", "expectedCauseType", ")", "{", "try", "{", "return", "expectedCauseType", ".", "cast", "(", "throwable", ".", "getCause", "(", ")", ")", ";", "}", "catch", "(", "ClassCastException", "e", ")", "{", "e", ".", "initCause", "(", "throwable", ")", ";", "throw", "e", ";", "}", "}"], "docstring": "Returns {@code throwable}'s cause, cast to {@code expectedCauseType}.\n\n<p>Prefer this method instead of manually casting an exception's cause. For example, {@code\n(IOException) e.getCause()} throws a {@link ClassCastException} that discards the original\nexception {@code e} if the cause is not an {@link IOException}, but {@code\nThrowables.getCauseAs(e, IOException.class)} keeps {@code e} as the {@link\nClassCastException}'s cause.\n\n@throws ClassCastException if the cause cannot be cast to the expected type. The {@code\nClassCastException}'s cause is {@code throwable}.\n@since 22.0", "docstring_tokens": ["Returns", "{", "@code", "throwable", "}", "s", "cause", "cast", "to", "{", "@code", "expectedCauseType", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Throwables.java#L331-L341", "partition": "valid"}
{"repo": "google/guava", "path": "guava/src/com/google/common/base/Throwables.java", "func_name": "Throwables.lazyStackTrace", "original_string": "@Beta\n  @GwtIncompatible // lazyStackTraceIsLazy, jlaStackTrace\n  // TODO(cpovirk): Consider making this available under GWT (slow implementation only).\n  public static List<StackTraceElement> lazyStackTrace(Throwable throwable) {\n    return lazyStackTraceIsLazy()\n        ? jlaStackTrace(throwable)\n        : unmodifiableList(asList(throwable.getStackTrace()));\n  }", "language": "java", "code": "@Beta\n  @GwtIncompatible // lazyStackTraceIsLazy, jlaStackTrace\n  // TODO(cpovirk): Consider making this available under GWT (slow implementation only).\n  public static List<StackTraceElement> lazyStackTrace(Throwable throwable) {\n    return lazyStackTraceIsLazy()\n        ? jlaStackTrace(throwable)\n        : unmodifiableList(asList(throwable.getStackTrace()));\n  }", "code_tokens": ["@", "Beta", "@", "GwtIncompatible", "// lazyStackTraceIsLazy, jlaStackTrace", "// TODO(cpovirk): Consider making this available under GWT (slow implementation only).", "public", "static", "List", "<", "StackTraceElement", ">", "lazyStackTrace", "(", "Throwable", "throwable", ")", "{", "return", "lazyStackTraceIsLazy", "(", ")", "?", "jlaStackTrace", "(", "throwable", ")", ":", "unmodifiableList", "(", "asList", "(", "throwable", ".", "getStackTrace", "(", ")", ")", ")", ";", "}"], "docstring": "TODO(cpovirk): Say something about the possibility that List access could fail at runtime?", "docstring_tokens": ["TODO", "(", "cpovirk", ")", ":", "Say", "something", "about", "the", "possibility", "that", "List", "access", "could", "fail", "at", "runtime?"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/guava/src/com/google/common/base/Throwables.java#L384-L391", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/math/Stats.java", "func_name": "Stats.of", "original_string": "public static Stats of(Iterable<? extends Number> values) {\n    StatsAccumulator accumulator = new StatsAccumulator();\n    accumulator.addAll(values);\n    return accumulator.snapshot();\n  }", "language": "java", "code": "public static Stats of(Iterable<? extends Number> values) {\n    StatsAccumulator accumulator = new StatsAccumulator();\n    accumulator.addAll(values);\n    return accumulator.snapshot();\n  }", "code_tokens": ["public", "static", "Stats", "of", "(", "Iterable", "<", "?", "extends", "Number", ">", "values", ")", "{", "StatsAccumulator", "accumulator", "=", "new", "StatsAccumulator", "(", ")", ";", "accumulator", ".", "addAll", "(", "values", ")", ";", "return", "accumulator", ".", "snapshot", "(", ")", ";", "}"], "docstring": "Returns statistics over a dataset containing the given values.\n\n@param values a series of values, which will be converted to {@code double} values (this may\ncause loss of precision)", "docstring_tokens": ["Returns", "statistics", "over", "a", "dataset", "containing", "the", "given", "values", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/math/Stats.java#L99-L103", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/math/Stats.java", "func_name": "Stats.of", "original_string": "public static Stats of(int... values) {\n    StatsAccumulator acummulator = new StatsAccumulator();\n    acummulator.addAll(values);\n    return acummulator.snapshot();\n  }", "language": "java", "code": "public static Stats of(int... values) {\n    StatsAccumulator acummulator = new StatsAccumulator();\n    acummulator.addAll(values);\n    return acummulator.snapshot();\n  }", "code_tokens": ["public", "static", "Stats", "of", "(", "int", "...", "values", ")", "{", "StatsAccumulator", "acummulator", "=", "new", "StatsAccumulator", "(", ")", ";", "acummulator", ".", "addAll", "(", "values", ")", ";", "return", "acummulator", ".", "snapshot", "(", ")", ";", "}"], "docstring": "Returns statistics over a dataset containing the given values.\n\n@param values a series of values", "docstring_tokens": ["Returns", "statistics", "over", "a", "dataset", "containing", "the", "given", "values", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/math/Stats.java#L133-L137", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/math/Stats.java", "func_name": "Stats.populationVariance", "original_string": "public double populationVariance() {\n    checkState(count > 0);\n    if (isNaN(sumOfSquaresOfDeltas)) {\n      return NaN;\n    }\n    if (count == 1) {\n      return 0.0;\n    }\n    return ensureNonNegative(sumOfSquaresOfDeltas) / count();\n  }", "language": "java", "code": "public double populationVariance() {\n    checkState(count > 0);\n    if (isNaN(sumOfSquaresOfDeltas)) {\n      return NaN;\n    }\n    if (count == 1) {\n      return 0.0;\n    }\n    return ensureNonNegative(sumOfSquaresOfDeltas) / count();\n  }", "code_tokens": ["public", "double", "populationVariance", "(", ")", "{", "checkState", "(", "count", ">", "0", ")", ";", "if", "(", "isNaN", "(", "sumOfSquaresOfDeltas", ")", ")", "{", "return", "NaN", ";", "}", "if", "(", "count", "==", "1", ")", "{", "return", "0.0", ";", "}", "return", "ensureNonNegative", "(", "sumOfSquaresOfDeltas", ")", "/", "count", "(", ")", ";", "}"], "docstring": "Returns the <a href=\"http://en.wikipedia.org/wiki/Variance#Population_variance\">population\nvariance</a> of the values. The count must be non-zero.\n\n<p>This is guaranteed to return zero if the dataset contains only exactly one finite value. It\nis not guaranteed to return zero when the dataset consists of the same value multiple times,\ndue to numerical errors. However, it is guaranteed never to return a negative result.\n\n<h3>Non-finite values</h3>\n\n<p>If the dataset contains any non-finite values ({@link Double#POSITIVE_INFINITY}, {@link\nDouble#NEGATIVE_INFINITY}, or {@link Double#NaN}) then the result is {@link Double#NaN}.\n\n@throws IllegalStateException if the dataset is empty", "docstring_tokens": ["Returns", "the", "<a", "href", "=", "http", ":", "//", "en", ".", "wikipedia", ".", "org", "/", "wiki", "/", "Variance#Population_variance", ">", "population", "variance<", "/", "a", ">", "of", "the", "values", ".", "The", "count", "must", "be", "non", "-", "zero", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/math/Stats.java#L213-L222", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/math/Stats.java", "func_name": "Stats.meanOf", "original_string": "public static double meanOf(Iterator<? extends Number> values) {\n    checkArgument(values.hasNext());\n    long count = 1;\n    double mean = values.next().doubleValue();\n    while (values.hasNext()) {\n      double value = values.next().doubleValue();\n      count++;\n      if (isFinite(value) && isFinite(mean)) {\n        // Art of Computer Programming vol. 2, Knuth, 4.2.2, (15)\n        mean += (value - mean) / count;\n      } else {\n        mean = calculateNewMeanNonFinite(mean, value);\n      }\n    }\n    return mean;\n  }", "language": "java", "code": "public static double meanOf(Iterator<? extends Number> values) {\n    checkArgument(values.hasNext());\n    long count = 1;\n    double mean = values.next().doubleValue();\n    while (values.hasNext()) {\n      double value = values.next().doubleValue();\n      count++;\n      if (isFinite(value) && isFinite(mean)) {\n        // Art of Computer Programming vol. 2, Knuth, 4.2.2, (15)\n        mean += (value - mean) / count;\n      } else {\n        mean = calculateNewMeanNonFinite(mean, value);\n      }\n    }\n    return mean;\n  }", "code_tokens": ["public", "static", "double", "meanOf", "(", "Iterator", "<", "?", "extends", "Number", ">", "values", ")", "{", "checkArgument", "(", "values", ".", "hasNext", "(", ")", ")", ";", "long", "count", "=", "1", ";", "double", "mean", "=", "values", ".", "next", "(", ")", ".", "doubleValue", "(", ")", ";", "while", "(", "values", ".", "hasNext", "(", ")", ")", "{", "double", "value", "=", "values", ".", "next", "(", ")", ".", "doubleValue", "(", ")", ";", "count", "++", ";", "if", "(", "isFinite", "(", "value", ")", "&&", "isFinite", "(", "mean", ")", ")", "{", "// Art of Computer Programming vol. 2, Knuth, 4.2.2, (15)", "mean", "+=", "(", "value", "-", "mean", ")", "/", "count", ";", "}", "else", "{", "mean", "=", "calculateNewMeanNonFinite", "(", "mean", ",", "value", ")", ";", "}", "}", "return", "mean", ";", "}"], "docstring": "Returns the <a href=\"http://en.wikipedia.org/wiki/Arithmetic_mean\">arithmetic mean</a> of the\nvalues. The count must be non-zero.\n\n<p>The definition of the mean is the same as {@link Stats#mean}.\n\n@param values a series of values, which will be converted to {@code double} values (this may\ncause loss of precision)\n@throws IllegalArgumentException if the dataset is empty", "docstring_tokens": ["Returns", "the", "<a", "href", "=", "http", ":", "//", "en", ".", "wikipedia", ".", "org", "/", "wiki", "/", "Arithmetic_mean", ">", "arithmetic", "mean<", "/", "a", ">", "of", "the", "values", ".", "The", "count", "must", "be", "non", "-", "zero", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/math/Stats.java#L411-L426", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/math/Stats.java", "func_name": "Stats.meanOf", "original_string": "public static double meanOf(long... values) {\n    checkArgument(values.length > 0);\n    double mean = values[0];\n    for (int index = 1; index < values.length; index++) {\n      double value = values[index];\n      if (isFinite(value) && isFinite(mean)) {\n        // Art of Computer Programming vol. 2, Knuth, 4.2.2, (15)\n        mean += (value - mean) / (index + 1);\n      } else {\n        mean = calculateNewMeanNonFinite(mean, value);\n      }\n    }\n    return mean;\n  }", "language": "java", "code": "public static double meanOf(long... values) {\n    checkArgument(values.length > 0);\n    double mean = values[0];\n    for (int index = 1; index < values.length; index++) {\n      double value = values[index];\n      if (isFinite(value) && isFinite(mean)) {\n        // Art of Computer Programming vol. 2, Knuth, 4.2.2, (15)\n        mean += (value - mean) / (index + 1);\n      } else {\n        mean = calculateNewMeanNonFinite(mean, value);\n      }\n    }\n    return mean;\n  }", "code_tokens": ["public", "static", "double", "meanOf", "(", "long", "...", "values", ")", "{", "checkArgument", "(", "values", ".", "length", ">", "0", ")", ";", "double", "mean", "=", "values", "[", "0", "]", ";", "for", "(", "int", "index", "=", "1", ";", "index", "<", "values", ".", "length", ";", "index", "++", ")", "{", "double", "value", "=", "values", "[", "index", "]", ";", "if", "(", "isFinite", "(", "value", ")", "&&", "isFinite", "(", "mean", ")", ")", "{", "// Art of Computer Programming vol. 2, Knuth, 4.2.2, (15)", "mean", "+=", "(", "value", "-", "mean", ")", "/", "(", "index", "+", "1", ")", ";", "}", "else", "{", "mean", "=", "calculateNewMeanNonFinite", "(", "mean", ",", "value", ")", ";", "}", "}", "return", "mean", ";", "}"], "docstring": "Returns the <a href=\"http://en.wikipedia.org/wiki/Arithmetic_mean\">arithmetic mean</a> of the\nvalues. The count must be non-zero.\n\n<p>The definition of the mean is the same as {@link Stats#mean}.\n\n@param values a series of values, which will be converted to {@code double} values (this may\ncause loss of precision for longs of magnitude over 2^53 (slightly over 9e15))\n@throws IllegalArgumentException if the dataset is empty", "docstring_tokens": ["Returns", "the", "<a", "href", "=", "http", ":", "//", "en", ".", "wikipedia", ".", "org", "/", "wiki", "/", "Arithmetic_mean", ">", "arithmetic", "mean<", "/", "a", ">", "of", "the", "values", ".", "The", "count", "must", "be", "non", "-", "zero", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/math/Stats.java#L486-L499", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/math/Stats.java", "func_name": "Stats.toByteArray", "original_string": "public byte[] toByteArray() {\n    ByteBuffer buff = ByteBuffer.allocate(BYTES).order(ByteOrder.LITTLE_ENDIAN);\n    writeTo(buff);\n    return buff.array();\n  }", "language": "java", "code": "public byte[] toByteArray() {\n    ByteBuffer buff = ByteBuffer.allocate(BYTES).order(ByteOrder.LITTLE_ENDIAN);\n    writeTo(buff);\n    return buff.array();\n  }", "code_tokens": ["public", "byte", "[", "]", "toByteArray", "(", ")", "{", "ByteBuffer", "buff", "=", "ByteBuffer", ".", "allocate", "(", "BYTES", ")", ".", "order", "(", "ByteOrder", ".", "LITTLE_ENDIAN", ")", ";", "writeTo", "(", "buff", ")", ";", "return", "buff", ".", "array", "(", ")", ";", "}"], "docstring": "Gets a byte array representation of this instance.\n\n<p><b>Note:</b> No guarantees are made regarding stability of the representation between\nversions.", "docstring_tokens": ["Gets", "a", "byte", "array", "representation", "of", "this", "instance", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/math/Stats.java#L512-L516", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/math/Stats.java", "func_name": "Stats.writeTo", "original_string": "void writeTo(ByteBuffer buffer) {\n    checkNotNull(buffer);\n    checkArgument(\n        buffer.remaining() >= BYTES,\n        \"Expected at least Stats.BYTES = %s remaining , got %s\",\n        BYTES,\n        buffer.remaining());\n    buffer\n        .putLong(count)\n        .putDouble(mean)\n        .putDouble(sumOfSquaresOfDeltas)\n        .putDouble(min)\n        .putDouble(max);\n  }", "language": "java", "code": "void writeTo(ByteBuffer buffer) {\n    checkNotNull(buffer);\n    checkArgument(\n        buffer.remaining() >= BYTES,\n        \"Expected at least Stats.BYTES = %s remaining , got %s\",\n        BYTES,\n        buffer.remaining());\n    buffer\n        .putLong(count)\n        .putDouble(mean)\n        .putDouble(sumOfSquaresOfDeltas)\n        .putDouble(min)\n        .putDouble(max);\n  }", "code_tokens": ["void", "writeTo", "(", "ByteBuffer", "buffer", ")", "{", "checkNotNull", "(", "buffer", ")", ";", "checkArgument", "(", "buffer", ".", "remaining", "(", ")", ">=", "BYTES", ",", "\"Expected at least Stats.BYTES = %s remaining , got %s\"", ",", "BYTES", ",", "buffer", ".", "remaining", "(", ")", ")", ";", "buffer", ".", "putLong", "(", "count", ")", ".", "putDouble", "(", "mean", ")", ".", "putDouble", "(", "sumOfSquaresOfDeltas", ")", ".", "putDouble", "(", "min", ")", ".", "putDouble", "(", "max", ")", ";", "}"], "docstring": "Writes to the given {@link ByteBuffer} a byte representation of this instance.\n\n<p><b>Note:</b> No guarantees are made regarding stability of the representation between\nversions.\n\n@param buffer A {@link ByteBuffer} with at least BYTES {@link ByteBuffer#remaining}, ordered as\n{@link ByteOrder#LITTLE_ENDIAN}, to which a BYTES-long byte representation of this instance\nis written. In the process increases the position of {@link ByteBuffer} by BYTES.", "docstring_tokens": ["Writes", "to", "the", "given", "{", "@link", "ByteBuffer", "}", "a", "byte", "representation", "of", "this", "instance", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/math/Stats.java#L528-L541", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/math/Stats.java", "func_name": "Stats.fromByteArray", "original_string": "public static Stats fromByteArray(byte[] byteArray) {\n    checkNotNull(byteArray);\n    checkArgument(\n        byteArray.length == BYTES,\n        \"Expected Stats.BYTES = %s remaining , got %s\",\n        BYTES,\n        byteArray.length);\n    return readFrom(ByteBuffer.wrap(byteArray).order(ByteOrder.LITTLE_ENDIAN));\n  }", "language": "java", "code": "public static Stats fromByteArray(byte[] byteArray) {\n    checkNotNull(byteArray);\n    checkArgument(\n        byteArray.length == BYTES,\n        \"Expected Stats.BYTES = %s remaining , got %s\",\n        BYTES,\n        byteArray.length);\n    return readFrom(ByteBuffer.wrap(byteArray).order(ByteOrder.LITTLE_ENDIAN));\n  }", "code_tokens": ["public", "static", "Stats", "fromByteArray", "(", "byte", "[", "]", "byteArray", ")", "{", "checkNotNull", "(", "byteArray", ")", ";", "checkArgument", "(", "byteArray", ".", "length", "==", "BYTES", ",", "\"Expected Stats.BYTES = %s remaining , got %s\"", ",", "BYTES", ",", "byteArray", ".", "length", ")", ";", "return", "readFrom", "(", "ByteBuffer", ".", "wrap", "(", "byteArray", ")", ".", "order", "(", "ByteOrder", ".", "LITTLE_ENDIAN", ")", ")", ";", "}"], "docstring": "Creates a Stats instance from the given byte representation which was obtained by {@link\n#toByteArray}.\n\n<p><b>Note:</b> No guarantees are made regarding stability of the representation between\nversions.", "docstring_tokens": ["Creates", "a", "Stats", "instance", "from", "the", "given", "byte", "representation", "which", "was", "obtained", "by", "{", "@link", "#toByteArray", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/math/Stats.java#L550-L558", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/math/Stats.java", "func_name": "Stats.readFrom", "original_string": "static Stats readFrom(ByteBuffer buffer) {\n    checkNotNull(buffer);\n    checkArgument(\n        buffer.remaining() >= BYTES,\n        \"Expected at least Stats.BYTES = %s remaining , got %s\",\n        BYTES,\n        buffer.remaining());\n    return new Stats(\n        buffer.getLong(),\n        buffer.getDouble(),\n        buffer.getDouble(),\n        buffer.getDouble(),\n        buffer.getDouble());\n  }", "language": "java", "code": "static Stats readFrom(ByteBuffer buffer) {\n    checkNotNull(buffer);\n    checkArgument(\n        buffer.remaining() >= BYTES,\n        \"Expected at least Stats.BYTES = %s remaining , got %s\",\n        BYTES,\n        buffer.remaining());\n    return new Stats(\n        buffer.getLong(),\n        buffer.getDouble(),\n        buffer.getDouble(),\n        buffer.getDouble(),\n        buffer.getDouble());\n  }", "code_tokens": ["static", "Stats", "readFrom", "(", "ByteBuffer", "buffer", ")", "{", "checkNotNull", "(", "buffer", ")", ";", "checkArgument", "(", "buffer", ".", "remaining", "(", ")", ">=", "BYTES", ",", "\"Expected at least Stats.BYTES = %s remaining , got %s\"", ",", "BYTES", ",", "buffer", ".", "remaining", "(", ")", ")", ";", "return", "new", "Stats", "(", "buffer", ".", "getLong", "(", ")", ",", "buffer", ".", "getDouble", "(", ")", ",", "buffer", ".", "getDouble", "(", ")", ",", "buffer", ".", "getDouble", "(", ")", ",", "buffer", ".", "getDouble", "(", ")", ")", ";", "}"], "docstring": "Creates a Stats instance from the byte representation read from the given {@link ByteBuffer}.\n\n<p><b>Note:</b> No guarantees are made regarding stability of the representation between\nversions.\n\n@param buffer A {@link ByteBuffer} with at least BYTES {@link ByteBuffer#remaining}, ordered as\n{@link ByteOrder#LITTLE_ENDIAN}, from which a BYTES-long byte representation of this\ninstance is read. In the process increases the position of {@link ByteBuffer} by BYTES.", "docstring_tokens": ["Creates", "a", "Stats", "instance", "from", "the", "byte", "representation", "read", "from", "the", "given", "{", "@link", "ByteBuffer", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/math/Stats.java#L570-L583", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java", "func_name": "AtomicDoubleArray.set", "original_string": "public final void set(int i, double newValue) {\n    long next = doubleToRawLongBits(newValue);\n    longs.set(i, next);\n  }", "language": "java", "code": "public final void set(int i, double newValue) {\n    long next = doubleToRawLongBits(newValue);\n    longs.set(i, next);\n  }", "code_tokens": ["public", "final", "void", "set", "(", "int", "i", ",", "double", "newValue", ")", "{", "long", "next", "=", "doubleToRawLongBits", "(", "newValue", ")", ";", "longs", ".", "set", "(", "i", ",", "next", ")", ";", "}"], "docstring": "Sets the element at position {@code i} to the given value.\n\n@param i the index\n@param newValue the new value", "docstring_tokens": ["Sets", "the", "element", "at", "position", "{", "@code", "i", "}", "to", "the", "given", "value", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java#L104-L107", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java", "func_name": "AtomicDoubleArray.lazySet", "original_string": "public final void lazySet(int i, double newValue) {\n    long next = doubleToRawLongBits(newValue);\n    longs.lazySet(i, next);\n  }", "language": "java", "code": "public final void lazySet(int i, double newValue) {\n    long next = doubleToRawLongBits(newValue);\n    longs.lazySet(i, next);\n  }", "code_tokens": ["public", "final", "void", "lazySet", "(", "int", "i", ",", "double", "newValue", ")", "{", "long", "next", "=", "doubleToRawLongBits", "(", "newValue", ")", ";", "longs", ".", "lazySet", "(", "i", ",", "next", ")", ";", "}"], "docstring": "Eventually sets the element at position {@code i} to the given value.\n\n@param i the index\n@param newValue the new value", "docstring_tokens": ["Eventually", "sets", "the", "element", "at", "position", "{", "@code", "i", "}", "to", "the", "given", "value", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java#L115-L118", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java", "func_name": "AtomicDoubleArray.getAndSet", "original_string": "public final double getAndSet(int i, double newValue) {\n    long next = doubleToRawLongBits(newValue);\n    return longBitsToDouble(longs.getAndSet(i, next));\n  }", "language": "java", "code": "public final double getAndSet(int i, double newValue) {\n    long next = doubleToRawLongBits(newValue);\n    return longBitsToDouble(longs.getAndSet(i, next));\n  }", "code_tokens": ["public", "final", "double", "getAndSet", "(", "int", "i", ",", "double", "newValue", ")", "{", "long", "next", "=", "doubleToRawLongBits", "(", "newValue", ")", ";", "return", "longBitsToDouble", "(", "longs", ".", "getAndSet", "(", "i", ",", "next", ")", ")", ";", "}"], "docstring": "Atomically sets the element at position {@code i} to the given value and returns the old value.\n\n@param i the index\n@param newValue the new value\n@return the previous value", "docstring_tokens": ["Atomically", "sets", "the", "element", "at", "position", "{", "@code", "i", "}", "to", "the", "given", "value", "and", "returns", "the", "old", "value", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java#L127-L130", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java", "func_name": "AtomicDoubleArray.compareAndSet", "original_string": "public final boolean compareAndSet(int i, double expect, double update) {\n    return longs.compareAndSet(i, doubleToRawLongBits(expect), doubleToRawLongBits(update));\n  }", "language": "java", "code": "public final boolean compareAndSet(int i, double expect, double update) {\n    return longs.compareAndSet(i, doubleToRawLongBits(expect), doubleToRawLongBits(update));\n  }", "code_tokens": ["public", "final", "boolean", "compareAndSet", "(", "int", "i", ",", "double", "expect", ",", "double", "update", ")", "{", "return", "longs", ".", "compareAndSet", "(", "i", ",", "doubleToRawLongBits", "(", "expect", ")", ",", "doubleToRawLongBits", "(", "update", ")", ")", ";", "}"], "docstring": "Atomically sets the element at position {@code i} to the given updated value if the current\nvalue is <a href=\"#bitEquals\">bitwise equal</a> to the expected value.\n\n@param i the index\n@param expect the expected value\n@param update the new value\n@return true if successful. False return indicates that the actual value was not equal to the\nexpected value.", "docstring_tokens": ["Atomically", "sets", "the", "element", "at", "position", "{", "@code", "i", "}", "to", "the", "given", "updated", "value", "if", "the", "current", "value", "is", "<a", "href", "=", "#bitEquals", ">", "bitwise", "equal<", "/", "a", ">", "to", "the", "expected", "value", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java#L142-L144", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java", "func_name": "AtomicDoubleArray.weakCompareAndSet", "original_string": "public final boolean weakCompareAndSet(int i, double expect, double update) {\n    return longs.weakCompareAndSet(i, doubleToRawLongBits(expect), doubleToRawLongBits(update));\n  }", "language": "java", "code": "public final boolean weakCompareAndSet(int i, double expect, double update) {\n    return longs.weakCompareAndSet(i, doubleToRawLongBits(expect), doubleToRawLongBits(update));\n  }", "code_tokens": ["public", "final", "boolean", "weakCompareAndSet", "(", "int", "i", ",", "double", "expect", ",", "double", "update", ")", "{", "return", "longs", ".", "weakCompareAndSet", "(", "i", ",", "doubleToRawLongBits", "(", "expect", ")", ",", "doubleToRawLongBits", "(", "update", ")", ")", ";", "}"], "docstring": "Atomically sets the element at position {@code i} to the given updated value if the current\nvalue is <a href=\"#bitEquals\">bitwise equal</a> to the expected value.\n\n<p>May <a\nhref=\"http://download.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/package-summary.html#Spurious\">\nfail spuriously</a> and does not provide ordering guarantees, so is only rarely an appropriate\nalternative to {@code compareAndSet}.\n\n@param i the index\n@param expect the expected value\n@param update the new value\n@return true if successful", "docstring_tokens": ["Atomically", "sets", "the", "element", "at", "position", "{", "@code", "i", "}", "to", "the", "given", "updated", "value", "if", "the", "current", "value", "is", "<a", "href", "=", "#bitEquals", ">", "bitwise", "equal<", "/", "a", ">", "to", "the", "expected", "value", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java#L160-L162", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java", "func_name": "AtomicDoubleArray.getAndAdd", "original_string": "@CanIgnoreReturnValue\n  public final double getAndAdd(int i, double delta) {\n    while (true) {\n      long current = longs.get(i);\n      double currentVal = longBitsToDouble(current);\n      double nextVal = currentVal + delta;\n      long next = doubleToRawLongBits(nextVal);\n      if (longs.compareAndSet(i, current, next)) {\n        return currentVal;\n      }\n    }\n  }", "language": "java", "code": "@CanIgnoreReturnValue\n  public final double getAndAdd(int i, double delta) {\n    while (true) {\n      long current = longs.get(i);\n      double currentVal = longBitsToDouble(current);\n      double nextVal = currentVal + delta;\n      long next = doubleToRawLongBits(nextVal);\n      if (longs.compareAndSet(i, current, next)) {\n        return currentVal;\n      }\n    }\n  }", "code_tokens": ["@", "CanIgnoreReturnValue", "public", "final", "double", "getAndAdd", "(", "int", "i", ",", "double", "delta", ")", "{", "while", "(", "true", ")", "{", "long", "current", "=", "longs", ".", "get", "(", "i", ")", ";", "double", "currentVal", "=", "longBitsToDouble", "(", "current", ")", ";", "double", "nextVal", "=", "currentVal", "+", "delta", ";", "long", "next", "=", "doubleToRawLongBits", "(", "nextVal", ")", ";", "if", "(", "longs", ".", "compareAndSet", "(", "i", ",", "current", ",", "next", ")", ")", "{", "return", "currentVal", ";", "}", "}", "}"], "docstring": "Atomically adds the given value to the element at index {@code i}.\n\n@param i the index\n@param delta the value to add\n@return the previous value", "docstring_tokens": ["Atomically", "adds", "the", "given", "value", "to", "the", "element", "at", "index", "{", "@code", "i", "}", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java#L171-L182", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java", "func_name": "AtomicDoubleArray.writeObject", "original_string": "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {\n    s.defaultWriteObject();\n\n    // Write out array length\n    int length = length();\n    s.writeInt(length);\n\n    // Write out all elements in the proper order.\n    for (int i = 0; i < length; i++) {\n      s.writeDouble(get(i));\n    }\n  }", "language": "java", "code": "private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {\n    s.defaultWriteObject();\n\n    // Write out array length\n    int length = length();\n    s.writeInt(length);\n\n    // Write out all elements in the proper order.\n    for (int i = 0; i < length; i++) {\n      s.writeDouble(get(i));\n    }\n  }", "code_tokens": ["private", "void", "writeObject", "(", "java", ".", "io", ".", "ObjectOutputStream", "s", ")", "throws", "java", ".", "io", ".", "IOException", "{", "s", ".", "defaultWriteObject", "(", ")", ";", "// Write out array length", "int", "length", "=", "length", "(", ")", ";", "s", ".", "writeInt", "(", "length", ")", ";", "// Write out all elements in the proper order.", "for", "(", "int", "i", "=", "0", ";", "i", "<", "length", ";", "i", "++", ")", "{", "s", ".", "writeDouble", "(", "get", "(", "i", ")", ")", ";", "}", "}"], "docstring": "Saves the state to a stream (that is, serializes it).\n\n@serialData The length of the array is emitted (int), followed by all of its elements (each a\n{@code double}) in the proper order.", "docstring_tokens": ["Saves", "the", "state", "to", "a", "stream", "(", "that", "is", "serializes", "it", ")", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java#L234-L245", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java", "func_name": "AtomicDoubleArray.readObject", "original_string": "private void readObject(java.io.ObjectInputStream s)\n      throws java.io.IOException, ClassNotFoundException {\n    s.defaultReadObject();\n\n    int length = s.readInt();\n    ImmutableLongArray.Builder builder = ImmutableLongArray.builder();\n    for (int i = 0; i < length; i++) {\n      builder.add(doubleToRawLongBits(s.readDouble()));\n    }\n    this.longs = new AtomicLongArray(builder.build().toArray());\n  }", "language": "java", "code": "private void readObject(java.io.ObjectInputStream s)\n      throws java.io.IOException, ClassNotFoundException {\n    s.defaultReadObject();\n\n    int length = s.readInt();\n    ImmutableLongArray.Builder builder = ImmutableLongArray.builder();\n    for (int i = 0; i < length; i++) {\n      builder.add(doubleToRawLongBits(s.readDouble()));\n    }\n    this.longs = new AtomicLongArray(builder.build().toArray());\n  }", "code_tokens": ["private", "void", "readObject", "(", "java", ".", "io", ".", "ObjectInputStream", "s", ")", "throws", "java", ".", "io", ".", "IOException", ",", "ClassNotFoundException", "{", "s", ".", "defaultReadObject", "(", ")", ";", "int", "length", "=", "s", ".", "readInt", "(", ")", ";", "ImmutableLongArray", ".", "Builder", "builder", "=", "ImmutableLongArray", ".", "builder", "(", ")", ";", "for", "(", "int", "i", "=", "0", ";", "i", "<", "length", ";", "i", "++", ")", "{", "builder", ".", "add", "(", "doubleToRawLongBits", "(", "s", ".", "readDouble", "(", ")", ")", ")", ";", "}", "this", ".", "longs", "=", "new", "AtomicLongArray", "(", "builder", ".", "build", "(", ")", ".", "toArray", "(", ")", ")", ";", "}"], "docstring": "Reconstitutes the instance from a stream (that is, deserializes it).", "docstring_tokens": ["Reconstitutes", "the", "instance", "from", "a", "stream", "(", "that", "is", "deserializes", "it", ")", "."], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java#L248-L258", "partition": "valid"}
{"repo": "google/guava", "path": "android/guava/src/com/google/common/graph/EndpointPair.java", "func_name": "EndpointPair.ordered", "original_string": "public static <N> EndpointPair<N> ordered(N source, N target) {\n    return new Ordered<N>(source, target);\n  }", "language": "java", "code": "public static <N> EndpointPair<N> ordered(N source, N target) {\n    return new Ordered<N>(source, target);\n  }", "code_tokens": ["public", "static", "<", "N", ">", "EndpointPair", "<", "N", ">", "ordered", "(", "N", "source", ",", "N", "target", ")", "{", "return", "new", "Ordered", "<", "N", ">", "(", "source", ",", "target", ")", ";", "}"], "docstring": "Returns an {@link EndpointPair} representing the endpoints of a directed edge.", "docstring_tokens": ["Returns", "an", "{"], "sha": "7155d12b70a2406fa84d94d4b8b3bc108e89abfd", "url": "https://github.com/google/guava/blob/7155d12b70a2406fa84d94d4b8b3bc108e89abfd/android/guava/src/com/google/common/graph/EndpointPair.java#L52-L54", "partition": "valid"}
